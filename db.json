{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1558921772171},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1558921772171},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1558921772171},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1558921772171},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1558921772171},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1558921772171},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1558921772172},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1558921772172},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1558921772172},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1558921772172},{"_id":"themes/next/_config.yml","hash":"dbfa2823b0c5b0c3d2fe99004c315f2409836959","modified":1558921772172},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1558921772173},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1558921772173},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1558921772191},{"_id":"source/_posts/load_balance.md","hash":"864994c33746b459cad495996a0e5b61ead7b401","modified":1558921772146},{"_id":"source/_posts/net-byte-order.md","hash":"a701bdb99b3225ff8f6ae8d25f7848bfe0c4dc5f","modified":1558921772147},{"_id":"source/categories/index.md","hash":"629fd3a876d21c056d2063be1f2424b204822a68","modified":1558921772150},{"_id":"source/_posts/LT-ET.md","hash":"f87f60aa7a06e48af7de6c3c24098b2e01d06947","modified":1558921772146},{"_id":"source/_posts/browser-proxy.md","hash":"0fa37758a1e888db67eef2251c76aeaa3cc1594a","modified":1558921772146},{"_id":"source/_posts/nginx-config-store-summarize.md","hash":"44d6c2ad604a0852643d9d5cba3ae6731f878628","modified":1558921772148},{"_id":"source/_posts/nginx-listen-socket.md","hash":"458db100b15a19bd14777c7d615f8d3b640ae9f6","modified":1558921772149},{"_id":"source/_posts/nginx_memory_manage.md","hash":"0492d25d02833a91cd1946c3135b1f5d62b5b811","modified":1558921772149},{"_id":"source/_posts/swoole-server-introduce.md","hash":"8bbfd2ed803aae0fc32c69045ea3630f33c3bd75","modified":1558923715098},{"_id":"source/_posts/struct-transmission.md","hash":"94602dc13bd41f8791306018e07c191b30c3face","modified":1558921772149},{"_id":"source/tags/index.md","hash":"bb7ee0987f0e61dbec70077d2e388b316c7be60f","modified":1558921772150},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1558921772173},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1558921772173},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1558921772173},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1558921772174},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1558921772174},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1558921772174},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1558921772174},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1558921772174},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1558921772174},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1558921772175},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1558921772175},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1558921772175},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1558921772175},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1558921772176},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1558921772176},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1558921772176},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1558921772177},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1558921772190},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1558921772190},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1558921772191},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1558921772191},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1558921772191},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1558921772192},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1558921772191},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1558921772193},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1558921772191},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1558921772247},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1558921772248},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1558921772248},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558921772218},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1558921772176},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1558921772176},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1558921772177},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"2922006bd970e531edc469ffb45b9854cda0a109","modified":1558921772177},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1558921772178},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1558921772177},{"_id":"themes/next/layout/_macro/post.swig","hash":"d3405c5916844e6e4bcff17136cbc711ba78d46b","modified":1558921772177},{"_id":"themes/next/layout/_macro/post_old.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1558921772178},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1558921772178},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1558921772179},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1558921772178},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1558921772179},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1558921772180},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1558921772180},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1558921772180},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1558921772179},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1558921772183},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1558921772180},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1558921772183},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1558921772184},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1558921772188},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1558921772188},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1558921772188},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1558921772188},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1558921772189},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1558921772189},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1558921772189},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1558921772193},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1558921772193},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1558921772194},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1558921772194},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1558921772194},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1558921772194},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1558921772194},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1558921772195},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1558921772195},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1558921772217},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1558921772218},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1558921772218},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1558921772218},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1558921772218},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1558921772219},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1558921772219},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1558921772219},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1558921772219},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1558921772219},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1558921772220},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1558921772220},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1558921772220},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1558921772220},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1558921772220},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1558921772220},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1558921772221},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1558921772221},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1558921772221},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558921772183},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558921772184},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558921772210},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558921772211},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558921772211},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558921772217},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558921772217},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1558921772180},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1558921772180},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1558921772181},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1558921772181},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1558921772181},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1558921772182},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1558921772182},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1558921772182},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1558921772182},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1558921772184},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1558921772183},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1558921772183},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1558921772184},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1558921772184},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1558921772184},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1558921772185},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1558921772185},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1558921772185},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1558921772185},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1558921772185},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1558921772186},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1558921772186},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1558921772186},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1558921772186},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1558921772186},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1558921772186},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1558921772187},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1558921772187},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1558921772187},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1558921772187},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1558921772187},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1558921772187},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1558921772188},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1558921772188},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1558921772189},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1558921772190},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1558921772190},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1558921772190},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"befbf3f19fe82bcb4b2ac7ddbf1333c8bdc6be09","modified":1558921772210},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1558921772210},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1558921772211},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1558921772216},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1558921772216},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1558921772211},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1558921772217},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1558921772217},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1558921772221},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1558921772221},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1558921772227},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1558921772222},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1558921772222},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1558921772222},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1558921772223},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1558921772223},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1558921772223},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1558921772223},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1558921772224},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1558921772224},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1558921772230},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1558921772230},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1558921772230},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1558921772230},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1558921772233},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1558921772234},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1558921772234},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1558921772234},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1558921772235},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1558921772235},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1558921772235},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1558921772235},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1558921772235},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1558921772239},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1558921772239},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1558921772239},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1558921772240},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1558921772240},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1558921772240},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1558921772240},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1558921772240},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1558921772240},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1558921772241},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1558921772241},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1558921772241},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1558921772241},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1558921772241},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1558921772242},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1558921772241},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1558921772242},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1558921772242},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1558921772242},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1558921772242},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1558921772242},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1558921772242},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1558921772242},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1558921772242},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1558921772243},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1558921772243},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1558921772243},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1558921772246},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1558921772246},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1558921772247},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1558921772247},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1558921772247},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1558921772239},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1558921772189},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1558921772189},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1558921772195},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1558921772195},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1558921772196},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1558921772196},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1558921772196},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1558921772199},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1558921772204},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1558921772209},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1558921772209},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1558921772209},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1558921772210},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1558921772210},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1558921772209},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1558921772210},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1558921772212},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1558921772212},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1558921772213},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1558921772212},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1558921772213},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1558921772212},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1558921772213},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1558921772213},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1558921772214},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1558921772214},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1558921772214},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1558921772214},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1558921772214},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1558921772215},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1558921772215},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1558921772215},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1558921772215},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1558921772216},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1558921772216},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1558921772227},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1558921772226},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1558921772223},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1558921772231},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1558921772231},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1558921772231},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1558921772231},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1558921772231},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1558921772231},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1558921772233},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1558921772233},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1558921772233},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1558921772234},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1558921772235},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1558921772235},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1558921772236},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1558921772245},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1558921772245},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1558921772226},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1558921772226},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1558921772234},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1558921772239},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1558921772238},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1558921772247},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1558921772196},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1558921772196},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1558921772197},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1558921772197},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1558921772197},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1558921772197},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1558921772198},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1558921772198},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1558921772198},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1558921772198},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1558921772199},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1558921772198},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1558921772199},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1558921772199},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1558921772199},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1558921772199},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1558921772200},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1558921772200},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1558921772200},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1558921772200},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1558921772200},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1558921772201},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1558921772201},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1558921772201},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1558921772201},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1558921772202},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1558921772201},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1558921772201},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1558921772202},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1558921772202},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1558921772202},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1558921772202},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1558921772202},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1558921772203},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1558921772203},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1558921772203},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1558921772203},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1558921772203},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1558921772203},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1558921772207},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1558921772207},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1558921772207},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1558921772208},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1558921772208},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1558921772208},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1558921772208},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1558921772208},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1558921772208},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1558921772209},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1558921772204},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1558921772204},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1558921772204},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1558921772205},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1558921772204},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1558921772205},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1558921772205},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1558921772205},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1558921772206},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1558921772214},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1558921772213},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1558921772215},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1558921772224},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1558921772225},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1558921772225},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1558921772225},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1558921772225},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1558921772232},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1558921772232},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1558921772232},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1558921772232},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1558921772233},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1558921772232},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1558921772236},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1558921772238},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1558921772237},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1558921772229},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1558921772238},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1558921772245}],"Category":[{"name":"架构","_id":"cjw5qxkq80004txs62lgoolu5"},{"name":"网络编程","_id":"cjw5qxkqd0009txs6ywb1knat"},{"name":"负载均衡","parent":"cjw5qxkq80004txs62lgoolu5","_id":"cjw5qxkqo000mtxs6871p90xq"},{"name":"nginx","_id":"cjw5qxkqs000ptxs6a7l6xc57"},{"name":"基础","parent":"cjw5qxkqd0009txs6ywb1knat","_id":"cjw5qxkqv000wtxs6qs0nccnp"},{"name":"swoole","_id":"cjw5qxkqw000ztxs6j6raqttz"},{"name":"代理","parent":"cjw5qxkqd0009txs6ywb1knat","_id":"cjw5qxkr0001etxs6bi938z5m"},{"name":"配置解析","parent":"cjw5qxkqs000ptxs6a7l6xc57","_id":"cjw5qxkr1001ktxs6jniwcbi2"},{"name":"server","parent":"cjw5qxkqw000ztxs6j6raqttz","_id":"cjw5qxkr3001stxs6raga91w3"},{"name":"内存管理","parent":"cjw5qxkqs000ptxs6a7l6xc57","_id":"cjw5qxkr4001ztxs6uw987mf4"}],"Data":[],"Page":[{"title":"categories","date":"2018-10-31T05:40:07.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-10-31 13:40:07\ntype: \"categories\"\n---\n","updated":"2019-05-27T01:49:32.150Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjw5qxkq40001txs60x75sd4g","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-10-31T06:03:04.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-10-31 14:03:04\ntype: \"tags\"\n---\n","updated":"2019-05-27T01:49:32.150Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjw5qxkq60003txs6fc5gu4qz","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"负载均衡","date":"2018-11-01T05:54:24.000Z","_content":"\n# 一. 基础知识\n## 1.1 基础\n1. 什么是负载均衡?\n> 当单机提供的并发量不能满足需求时，我们需要多台服务器同时服务。当客户请求到达时，如何为客户选择最合适的服务器?这个问题就是负载均衡问题。\n2. 负载均衡主要需要解决的问题是哪些?\n> - 从客户端的角度上看，客户需要最快速的得到服务器的相应，负载均衡时需要找出能最快相应客户需求的服务器进行服务。\n> - 从服务端来看如何使得每台服务器都能达到较高的利用率，最大限制的为用户提供快速、可靠的服务是服务端需要考虑的主要问题。\n\n\n## 1.2 负载均衡分类\n1. 硬件\n> - F5\n\n2. 软件\n> - dns负载均衡\n> - LVS负载均衡(4层)\n> - nginx, haproxy(7层)\n\n# 二. F5负载均衡\n1. F5是一家美国的公司，该公司生产一些硬件设备可以作为负载均衡器使用(例如:big-ip), 本文后续部分所说的F5是指其负载均衡器产品。\n2. 不同的产品实现的功能不一致，具体情况需要根据产品说明书。\n3. F5可以在4-7层内做负载均衡，用户可以根据需求进行配置。\n4. 由于F5可以做7层负载均衡，故而可以实现会话管理，http处理等。\n\n## 2.1 数据转发模式\n1. standard类型, 这种模式下，客户端与F5服务器建立连接，F5服务器与真实服务器建立连接，F5服务器将客户需求转发给真实服务器，并将真实服务器的相应转发给客户端，此时F5可以查看请求和相应的所有信息。\n2. 四层转发模式(performance L4), 这种模式下，F5只处理4层以下的数据。客户端将数据发送给F5, F5仅将数据转发给真实服务器，包括TCP的握手数据包以及挥手数据包，真实服务器需要先将数据发送给F5服务器，F5将其转发给客户端。\n3. 路由模式, 这种模式与LVS的DR模式类似。\n4. ...\n\n## 2.2 负载均衡算法\n1. 轮询，加权轮询。\n2. 源地址哈希\n3. ...\n\n## 2.3 小结\nF5的优势在于功能强大，并发量高，能满足客户的大多数需求，但其成本较高，一般大型国企可能会使用。\n\n## 2.4 参考\n- https://f5.com/zh\n- https://www.jianshu.com/p/2b55aa4c21e2\n- https://wenku.baidu.com/view/450b8643cc7931b765ce15c1.html\n\n# 三. dns负载均衡\n1. dns负载均衡由dns服务提供厂商提供。\n2. 最初的dns负载均衡提供简单轮询，不能根据客户端或者服务端状态进行选择。\n3. 目前，有些dns服务厂商可以提供智能dns服务，用户可以设置负载均衡方案，例如：根据客户端ip地址，选择就近的服务器。\n4. 对于目前大多数的公司而言，为了更好的服务用户，通常会使用dns负载均衡，将用户按照就近原则，分配到某个集群服务器上。之后，集群内再采用其他的负载均衡方案。\n\n# 四. Linux Virtual Server(LVS)\n1. LVS通过修改数据包Ip地址，Mac地址实现负载均衡。\n2. LVS由ipvs(内核中), ipvsadm(用户态)组成。LVS需要理解tcp，ip头部。\n3. 当tcp握手信号，SYN数据包达到时，ipvs选择一个后端服务器，将数据包进行转发。在此之后，所有包含相同的ip，tcp头部的数据包都会被转发到之前选择的服务器上。很明显，ipvs无法感知数据包内容。\n\n## 4.1 分类\n- LVS-NAT\n- LVS-DR\n- LVS-TUN\n\n## 4.2 基本原理\n### 4.2.1 LVS-DR\nLVS-DR模式的基本原理如下图所示:\n![image](https://picturestore.nos-eastchina1.126.net/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/lvs-dr.png)\n\n### 4.2.2 LVS-NAT\nLVS-NAT模式的基本原理如下图所示:\n![image](https://picturestore.nos-eastchina1.126.net/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/lvs-nat.png)\n\n## 4.3 负载均衡算法\n### 4.3.1 静态算法\n1. 轮询(Round Robin, RR)\n2. 加权轮询(Weight Round Robin, WRR)\n3. 源地址Hash(Source Hash, SH)\n4. 目的地址Hash(Destination Hash, DH), 可以设置多个VIP\n\n### 4.3.2 动态算法\n1. 最少连接(Least Connections, LC)，找出当前连接数最小的服务器\n2. 加权最少连接(Weighted Least Connections, WLC)\n3. 最短期望延迟(Shortest Expected Delay Scheduling, SED) 基于WLC。例如: 现有A, B, C三台服务器，权重分别为100,200,300，当前的连接数分别为1,2,3,下一个连接到达时，通过计算期望时延选择服务器(1+1)/100, (2+1)/200, (3+1)/300, 故而选择C服务器。\n4. 永不排队(Never Queue Scheduling, NQ)， 改进的sed, 如果某台服务器连接数为0，直接连接过去，不在进行sed计算。\n5. 基于局部性的最少连接(locality-Based Least Connections, LBLC)，根据目标ip, 找出目标ip最近使用的服务器，如果服务器存在并且负载没有大于一个阈值，则将新的连接分配到这个服务器上，否则按照最少连接找出一个服务器处理该请求。\n6. 带复制的基于局部性最少连接(Locality-Based Least Connections with Replication, LBLCR)，根据目标ip，维护一个服务器组，每次从组中挑选服务器，如果服务器不可以处理，则从所有服务器中按照最少连接挑选出一台服务器，并将其加入到目标ip的处理组服务器中。\n\n## 4.3 参考\n- https://liangshuang.name/2017/11/19/lvs/\n\n# 五. Nginx Load Balance\n1. nginx负载均衡工作在7层，它会与client、upstream分别建立tcp连接，nginx需要维护这两个连接的状态。\n2. nginx的stream模块可以用于4层负载均衡，但一般很少使用。\n\n## 5.1 基本原理\nnginx做7层负载均衡的基本原理如下图所示:\n![image](https://picturestore.nos-eastchina1.126.net/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png)\n\n\n## 5.2 负载均衡算法\n1. 轮询(默认)\n2. 加权轮询\n3. 源ip哈希\n4. 响应时间\n5. url 哈希\n","source":"_posts/load_balance.md","raw":"---\ntitle: 负载均衡\ndate: 2018-11-01 13:54:24\ncategories:\n- 架构\n- 负载均衡\ntags:\n- 负载均衡\n- 分布式技术\n---\n\n# 一. 基础知识\n## 1.1 基础\n1. 什么是负载均衡?\n> 当单机提供的并发量不能满足需求时，我们需要多台服务器同时服务。当客户请求到达时，如何为客户选择最合适的服务器?这个问题就是负载均衡问题。\n2. 负载均衡主要需要解决的问题是哪些?\n> - 从客户端的角度上看，客户需要最快速的得到服务器的相应，负载均衡时需要找出能最快相应客户需求的服务器进行服务。\n> - 从服务端来看如何使得每台服务器都能达到较高的利用率，最大限制的为用户提供快速、可靠的服务是服务端需要考虑的主要问题。\n\n\n## 1.2 负载均衡分类\n1. 硬件\n> - F5\n\n2. 软件\n> - dns负载均衡\n> - LVS负载均衡(4层)\n> - nginx, haproxy(7层)\n\n# 二. F5负载均衡\n1. F5是一家美国的公司，该公司生产一些硬件设备可以作为负载均衡器使用(例如:big-ip), 本文后续部分所说的F5是指其负载均衡器产品。\n2. 不同的产品实现的功能不一致，具体情况需要根据产品说明书。\n3. F5可以在4-7层内做负载均衡，用户可以根据需求进行配置。\n4. 由于F5可以做7层负载均衡，故而可以实现会话管理，http处理等。\n\n## 2.1 数据转发模式\n1. standard类型, 这种模式下，客户端与F5服务器建立连接，F5服务器与真实服务器建立连接，F5服务器将客户需求转发给真实服务器，并将真实服务器的相应转发给客户端，此时F5可以查看请求和相应的所有信息。\n2. 四层转发模式(performance L4), 这种模式下，F5只处理4层以下的数据。客户端将数据发送给F5, F5仅将数据转发给真实服务器，包括TCP的握手数据包以及挥手数据包，真实服务器需要先将数据发送给F5服务器，F5将其转发给客户端。\n3. 路由模式, 这种模式与LVS的DR模式类似。\n4. ...\n\n## 2.2 负载均衡算法\n1. 轮询，加权轮询。\n2. 源地址哈希\n3. ...\n\n## 2.3 小结\nF5的优势在于功能强大，并发量高，能满足客户的大多数需求，但其成本较高，一般大型国企可能会使用。\n\n## 2.4 参考\n- https://f5.com/zh\n- https://www.jianshu.com/p/2b55aa4c21e2\n- https://wenku.baidu.com/view/450b8643cc7931b765ce15c1.html\n\n# 三. dns负载均衡\n1. dns负载均衡由dns服务提供厂商提供。\n2. 最初的dns负载均衡提供简单轮询，不能根据客户端或者服务端状态进行选择。\n3. 目前，有些dns服务厂商可以提供智能dns服务，用户可以设置负载均衡方案，例如：根据客户端ip地址，选择就近的服务器。\n4. 对于目前大多数的公司而言，为了更好的服务用户，通常会使用dns负载均衡，将用户按照就近原则，分配到某个集群服务器上。之后，集群内再采用其他的负载均衡方案。\n\n# 四. Linux Virtual Server(LVS)\n1. LVS通过修改数据包Ip地址，Mac地址实现负载均衡。\n2. LVS由ipvs(内核中), ipvsadm(用户态)组成。LVS需要理解tcp，ip头部。\n3. 当tcp握手信号，SYN数据包达到时，ipvs选择一个后端服务器，将数据包进行转发。在此之后，所有包含相同的ip，tcp头部的数据包都会被转发到之前选择的服务器上。很明显，ipvs无法感知数据包内容。\n\n## 4.1 分类\n- LVS-NAT\n- LVS-DR\n- LVS-TUN\n\n## 4.2 基本原理\n### 4.2.1 LVS-DR\nLVS-DR模式的基本原理如下图所示:\n![image](https://picturestore.nos-eastchina1.126.net/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/lvs-dr.png)\n\n### 4.2.2 LVS-NAT\nLVS-NAT模式的基本原理如下图所示:\n![image](https://picturestore.nos-eastchina1.126.net/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/lvs-nat.png)\n\n## 4.3 负载均衡算法\n### 4.3.1 静态算法\n1. 轮询(Round Robin, RR)\n2. 加权轮询(Weight Round Robin, WRR)\n3. 源地址Hash(Source Hash, SH)\n4. 目的地址Hash(Destination Hash, DH), 可以设置多个VIP\n\n### 4.3.2 动态算法\n1. 最少连接(Least Connections, LC)，找出当前连接数最小的服务器\n2. 加权最少连接(Weighted Least Connections, WLC)\n3. 最短期望延迟(Shortest Expected Delay Scheduling, SED) 基于WLC。例如: 现有A, B, C三台服务器，权重分别为100,200,300，当前的连接数分别为1,2,3,下一个连接到达时，通过计算期望时延选择服务器(1+1)/100, (2+1)/200, (3+1)/300, 故而选择C服务器。\n4. 永不排队(Never Queue Scheduling, NQ)， 改进的sed, 如果某台服务器连接数为0，直接连接过去，不在进行sed计算。\n5. 基于局部性的最少连接(locality-Based Least Connections, LBLC)，根据目标ip, 找出目标ip最近使用的服务器，如果服务器存在并且负载没有大于一个阈值，则将新的连接分配到这个服务器上，否则按照最少连接找出一个服务器处理该请求。\n6. 带复制的基于局部性最少连接(Locality-Based Least Connections with Replication, LBLCR)，根据目标ip，维护一个服务器组，每次从组中挑选服务器，如果服务器不可以处理，则从所有服务器中按照最少连接挑选出一台服务器，并将其加入到目标ip的处理组服务器中。\n\n## 4.3 参考\n- https://liangshuang.name/2017/11/19/lvs/\n\n# 五. Nginx Load Balance\n1. nginx负载均衡工作在7层，它会与client、upstream分别建立tcp连接，nginx需要维护这两个连接的状态。\n2. nginx的stream模块可以用于4层负载均衡，但一般很少使用。\n\n## 5.1 基本原理\nnginx做7层负载均衡的基本原理如下图所示:\n![image](https://picturestore.nos-eastchina1.126.net/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png)\n\n\n## 5.2 负载均衡算法\n1. 轮询(默认)\n2. 加权轮询\n3. 源ip哈希\n4. 响应时间\n5. url 哈希\n","slug":"load_balance","published":1,"updated":"2019-05-27T01:49:32.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw5qxkq00000txs6emwjofse","content":"<h1 id=\"一-基础知识\"><a href=\"#一-基础知识\" class=\"headerlink\" title=\"一. 基础知识\"></a>一. 基础知识</h1><h2 id=\"1-1-基础\"><a href=\"#1-1-基础\" class=\"headerlink\" title=\"1.1 基础\"></a>1.1 基础</h2><ol>\n<li>什么是负载均衡?<blockquote>\n<p>当单机提供的并发量不能满足需求时，我们需要多台服务器同时服务。当客户请求到达时，如何为客户选择最合适的服务器?这个问题就是负载均衡问题。</p>\n</blockquote>\n</li>\n<li>负载均衡主要需要解决的问题是哪些?<blockquote>\n<ul>\n<li>从客户端的角度上看，客户需要最快速的得到服务器的相应，负载均衡时需要找出能最快相应客户需求的服务器进行服务。</li>\n<li>从服务端来看如何使得每台服务器都能达到较高的利用率，最大限制的为用户提供快速、可靠的服务是服务端需要考虑的主要问题。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"1-2-负载均衡分类\"><a href=\"#1-2-负载均衡分类\" class=\"headerlink\" title=\"1.2 负载均衡分类\"></a>1.2 负载均衡分类</h2><ol>\n<li><p>硬件</p>\n<blockquote>\n<ul>\n<li>F5</li>\n</ul>\n</blockquote>\n</li>\n<li><p>软件</p>\n<blockquote>\n<ul>\n<li>dns负载均衡</li>\n<li>LVS负载均衡(4层)</li>\n<li>nginx, haproxy(7层)</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"二-F5负载均衡\"><a href=\"#二-F5负载均衡\" class=\"headerlink\" title=\"二. F5负载均衡\"></a>二. F5负载均衡</h1><ol>\n<li>F5是一家美国的公司，该公司生产一些硬件设备可以作为负载均衡器使用(例如:big-ip), 本文后续部分所说的F5是指其负载均衡器产品。</li>\n<li>不同的产品实现的功能不一致，具体情况需要根据产品说明书。</li>\n<li>F5可以在4-7层内做负载均衡，用户可以根据需求进行配置。</li>\n<li>由于F5可以做7层负载均衡，故而可以实现会话管理，http处理等。</li>\n</ol>\n<h2 id=\"2-1-数据转发模式\"><a href=\"#2-1-数据转发模式\" class=\"headerlink\" title=\"2.1 数据转发模式\"></a>2.1 数据转发模式</h2><ol>\n<li>standard类型, 这种模式下，客户端与F5服务器建立连接，F5服务器与真实服务器建立连接，F5服务器将客户需求转发给真实服务器，并将真实服务器的相应转发给客户端，此时F5可以查看请求和相应的所有信息。</li>\n<li>四层转发模式(performance L4), 这种模式下，F5只处理4层以下的数据。客户端将数据发送给F5, F5仅将数据转发给真实服务器，包括TCP的握手数据包以及挥手数据包，真实服务器需要先将数据发送给F5服务器，F5将其转发给客户端。</li>\n<li>路由模式, 这种模式与LVS的DR模式类似。</li>\n<li>…</li>\n</ol>\n<h2 id=\"2-2-负载均衡算法\"><a href=\"#2-2-负载均衡算法\" class=\"headerlink\" title=\"2.2 负载均衡算法\"></a>2.2 负载均衡算法</h2><ol>\n<li>轮询，加权轮询。</li>\n<li>源地址哈希</li>\n<li>…</li>\n</ol>\n<h2 id=\"2-3-小结\"><a href=\"#2-3-小结\" class=\"headerlink\" title=\"2.3 小结\"></a>2.3 小结</h2><p>F5的优势在于功能强大，并发量高，能满足客户的大多数需求，但其成本较高，一般大型国企可能会使用。</p>\n<h2 id=\"2-4-参考\"><a href=\"#2-4-参考\" class=\"headerlink\" title=\"2.4 参考\"></a>2.4 参考</h2><ul>\n<li><a href=\"https://f5.com/zh\" target=\"_blank\" rel=\"noopener\">https://f5.com/zh</a></li>\n<li><a href=\"https://www.jianshu.com/p/2b55aa4c21e2\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/2b55aa4c21e2</a></li>\n<li><a href=\"https://wenku.baidu.com/view/450b8643cc7931b765ce15c1.html\" target=\"_blank\" rel=\"noopener\">https://wenku.baidu.com/view/450b8643cc7931b765ce15c1.html</a></li>\n</ul>\n<h1 id=\"三-dns负载均衡\"><a href=\"#三-dns负载均衡\" class=\"headerlink\" title=\"三. dns负载均衡\"></a>三. dns负载均衡</h1><ol>\n<li>dns负载均衡由dns服务提供厂商提供。</li>\n<li>最初的dns负载均衡提供简单轮询，不能根据客户端或者服务端状态进行选择。</li>\n<li>目前，有些dns服务厂商可以提供智能dns服务，用户可以设置负载均衡方案，例如：根据客户端ip地址，选择就近的服务器。</li>\n<li>对于目前大多数的公司而言，为了更好的服务用户，通常会使用dns负载均衡，将用户按照就近原则，分配到某个集群服务器上。之后，集群内再采用其他的负载均衡方案。</li>\n</ol>\n<h1 id=\"四-Linux-Virtual-Server-LVS\"><a href=\"#四-Linux-Virtual-Server-LVS\" class=\"headerlink\" title=\"四. Linux Virtual Server(LVS)\"></a>四. Linux Virtual Server(LVS)</h1><ol>\n<li>LVS通过修改数据包Ip地址，Mac地址实现负载均衡。</li>\n<li>LVS由ipvs(内核中), ipvsadm(用户态)组成。LVS需要理解tcp，ip头部。</li>\n<li>当tcp握手信号，SYN数据包达到时，ipvs选择一个后端服务器，将数据包进行转发。在此之后，所有包含相同的ip，tcp头部的数据包都会被转发到之前选择的服务器上。很明显，ipvs无法感知数据包内容。</li>\n</ol>\n<h2 id=\"4-1-分类\"><a href=\"#4-1-分类\" class=\"headerlink\" title=\"4.1 分类\"></a>4.1 分类</h2><ul>\n<li>LVS-NAT</li>\n<li>LVS-DR</li>\n<li>LVS-TUN</li>\n</ul>\n<h2 id=\"4-2-基本原理\"><a href=\"#4-2-基本原理\" class=\"headerlink\" title=\"4.2 基本原理\"></a>4.2 基本原理</h2><h3 id=\"4-2-1-LVS-DR\"><a href=\"#4-2-1-LVS-DR\" class=\"headerlink\" title=\"4.2.1 LVS-DR\"></a>4.2.1 LVS-DR</h3><p>LVS-DR模式的基本原理如下图所示:<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/lvs-dr.png\" alt=\"image\"></p>\n<h3 id=\"4-2-2-LVS-NAT\"><a href=\"#4-2-2-LVS-NAT\" class=\"headerlink\" title=\"4.2.2 LVS-NAT\"></a>4.2.2 LVS-NAT</h3><p>LVS-NAT模式的基本原理如下图所示:<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/lvs-nat.png\" alt=\"image\"></p>\n<h2 id=\"4-3-负载均衡算法\"><a href=\"#4-3-负载均衡算法\" class=\"headerlink\" title=\"4.3 负载均衡算法\"></a>4.3 负载均衡算法</h2><h3 id=\"4-3-1-静态算法\"><a href=\"#4-3-1-静态算法\" class=\"headerlink\" title=\"4.3.1 静态算法\"></a>4.3.1 静态算法</h3><ol>\n<li>轮询(Round Robin, RR)</li>\n<li>加权轮询(Weight Round Robin, WRR)</li>\n<li>源地址Hash(Source Hash, SH)</li>\n<li>目的地址Hash(Destination Hash, DH), 可以设置多个VIP</li>\n</ol>\n<h3 id=\"4-3-2-动态算法\"><a href=\"#4-3-2-动态算法\" class=\"headerlink\" title=\"4.3.2 动态算法\"></a>4.3.2 动态算法</h3><ol>\n<li>最少连接(Least Connections, LC)，找出当前连接数最小的服务器</li>\n<li>加权最少连接(Weighted Least Connections, WLC)</li>\n<li>最短期望延迟(Shortest Expected Delay Scheduling, SED) 基于WLC。例如: 现有A, B, C三台服务器，权重分别为100,200,300，当前的连接数分别为1,2,3,下一个连接到达时，通过计算期望时延选择服务器(1+1)/100, (2+1)/200, (3+1)/300, 故而选择C服务器。</li>\n<li>永不排队(Never Queue Scheduling, NQ)， 改进的sed, 如果某台服务器连接数为0，直接连接过去，不在进行sed计算。</li>\n<li>基于局部性的最少连接(locality-Based Least Connections, LBLC)，根据目标ip, 找出目标ip最近使用的服务器，如果服务器存在并且负载没有大于一个阈值，则将新的连接分配到这个服务器上，否则按照最少连接找出一个服务器处理该请求。</li>\n<li>带复制的基于局部性最少连接(Locality-Based Least Connections with Replication, LBLCR)，根据目标ip，维护一个服务器组，每次从组中挑选服务器，如果服务器不可以处理，则从所有服务器中按照最少连接挑选出一台服务器，并将其加入到目标ip的处理组服务器中。</li>\n</ol>\n<h2 id=\"4-3-参考\"><a href=\"#4-3-参考\" class=\"headerlink\" title=\"4.3 参考\"></a>4.3 参考</h2><ul>\n<li><a href=\"https://liangshuang.name/2017/11/19/lvs/\" target=\"_blank\" rel=\"noopener\">https://liangshuang.name/2017/11/19/lvs/</a></li>\n</ul>\n<h1 id=\"五-Nginx-Load-Balance\"><a href=\"#五-Nginx-Load-Balance\" class=\"headerlink\" title=\"五. Nginx Load Balance\"></a>五. Nginx Load Balance</h1><ol>\n<li>nginx负载均衡工作在7层，它会与client、upstream分别建立tcp连接，nginx需要维护这两个连接的状态。</li>\n<li>nginx的stream模块可以用于4层负载均衡，但一般很少使用。</li>\n</ol>\n<h2 id=\"5-1-基本原理\"><a href=\"#5-1-基本原理\" class=\"headerlink\" title=\"5.1 基本原理\"></a>5.1 基本原理</h2><p>nginx做7层负载均衡的基本原理如下图所示:<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png\" alt=\"image\"></p>\n<h2 id=\"5-2-负载均衡算法\"><a href=\"#5-2-负载均衡算法\" class=\"headerlink\" title=\"5.2 负载均衡算法\"></a>5.2 负载均衡算法</h2><ol>\n<li>轮询(默认)</li>\n<li>加权轮询</li>\n<li>源ip哈希</li>\n<li>响应时间</li>\n<li>url 哈希</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-基础知识\"><a href=\"#一-基础知识\" class=\"headerlink\" title=\"一. 基础知识\"></a>一. 基础知识</h1><h2 id=\"1-1-基础\"><a href=\"#1-1-基础\" class=\"headerlink\" title=\"1.1 基础\"></a>1.1 基础</h2><ol>\n<li>什么是负载均衡?<blockquote>\n<p>当单机提供的并发量不能满足需求时，我们需要多台服务器同时服务。当客户请求到达时，如何为客户选择最合适的服务器?这个问题就是负载均衡问题。</p>\n</blockquote>\n</li>\n<li>负载均衡主要需要解决的问题是哪些?<blockquote>\n<ul>\n<li>从客户端的角度上看，客户需要最快速的得到服务器的相应，负载均衡时需要找出能最快相应客户需求的服务器进行服务。</li>\n<li>从服务端来看如何使得每台服务器都能达到较高的利用率，最大限制的为用户提供快速、可靠的服务是服务端需要考虑的主要问题。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"1-2-负载均衡分类\"><a href=\"#1-2-负载均衡分类\" class=\"headerlink\" title=\"1.2 负载均衡分类\"></a>1.2 负载均衡分类</h2><ol>\n<li><p>硬件</p>\n<blockquote>\n<ul>\n<li>F5</li>\n</ul>\n</blockquote>\n</li>\n<li><p>软件</p>\n<blockquote>\n<ul>\n<li>dns负载均衡</li>\n<li>LVS负载均衡(4层)</li>\n<li>nginx, haproxy(7层)</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"二-F5负载均衡\"><a href=\"#二-F5负载均衡\" class=\"headerlink\" title=\"二. F5负载均衡\"></a>二. F5负载均衡</h1><ol>\n<li>F5是一家美国的公司，该公司生产一些硬件设备可以作为负载均衡器使用(例如:big-ip), 本文后续部分所说的F5是指其负载均衡器产品。</li>\n<li>不同的产品实现的功能不一致，具体情况需要根据产品说明书。</li>\n<li>F5可以在4-7层内做负载均衡，用户可以根据需求进行配置。</li>\n<li>由于F5可以做7层负载均衡，故而可以实现会话管理，http处理等。</li>\n</ol>\n<h2 id=\"2-1-数据转发模式\"><a href=\"#2-1-数据转发模式\" class=\"headerlink\" title=\"2.1 数据转发模式\"></a>2.1 数据转发模式</h2><ol>\n<li>standard类型, 这种模式下，客户端与F5服务器建立连接，F5服务器与真实服务器建立连接，F5服务器将客户需求转发给真实服务器，并将真实服务器的相应转发给客户端，此时F5可以查看请求和相应的所有信息。</li>\n<li>四层转发模式(performance L4), 这种模式下，F5只处理4层以下的数据。客户端将数据发送给F5, F5仅将数据转发给真实服务器，包括TCP的握手数据包以及挥手数据包，真实服务器需要先将数据发送给F5服务器，F5将其转发给客户端。</li>\n<li>路由模式, 这种模式与LVS的DR模式类似。</li>\n<li>…</li>\n</ol>\n<h2 id=\"2-2-负载均衡算法\"><a href=\"#2-2-负载均衡算法\" class=\"headerlink\" title=\"2.2 负载均衡算法\"></a>2.2 负载均衡算法</h2><ol>\n<li>轮询，加权轮询。</li>\n<li>源地址哈希</li>\n<li>…</li>\n</ol>\n<h2 id=\"2-3-小结\"><a href=\"#2-3-小结\" class=\"headerlink\" title=\"2.3 小结\"></a>2.3 小结</h2><p>F5的优势在于功能强大，并发量高，能满足客户的大多数需求，但其成本较高，一般大型国企可能会使用。</p>\n<h2 id=\"2-4-参考\"><a href=\"#2-4-参考\" class=\"headerlink\" title=\"2.4 参考\"></a>2.4 参考</h2><ul>\n<li><a href=\"https://f5.com/zh\" target=\"_blank\" rel=\"noopener\">https://f5.com/zh</a></li>\n<li><a href=\"https://www.jianshu.com/p/2b55aa4c21e2\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/2b55aa4c21e2</a></li>\n<li><a href=\"https://wenku.baidu.com/view/450b8643cc7931b765ce15c1.html\" target=\"_blank\" rel=\"noopener\">https://wenku.baidu.com/view/450b8643cc7931b765ce15c1.html</a></li>\n</ul>\n<h1 id=\"三-dns负载均衡\"><a href=\"#三-dns负载均衡\" class=\"headerlink\" title=\"三. dns负载均衡\"></a>三. dns负载均衡</h1><ol>\n<li>dns负载均衡由dns服务提供厂商提供。</li>\n<li>最初的dns负载均衡提供简单轮询，不能根据客户端或者服务端状态进行选择。</li>\n<li>目前，有些dns服务厂商可以提供智能dns服务，用户可以设置负载均衡方案，例如：根据客户端ip地址，选择就近的服务器。</li>\n<li>对于目前大多数的公司而言，为了更好的服务用户，通常会使用dns负载均衡，将用户按照就近原则，分配到某个集群服务器上。之后，集群内再采用其他的负载均衡方案。</li>\n</ol>\n<h1 id=\"四-Linux-Virtual-Server-LVS\"><a href=\"#四-Linux-Virtual-Server-LVS\" class=\"headerlink\" title=\"四. Linux Virtual Server(LVS)\"></a>四. Linux Virtual Server(LVS)</h1><ol>\n<li>LVS通过修改数据包Ip地址，Mac地址实现负载均衡。</li>\n<li>LVS由ipvs(内核中), ipvsadm(用户态)组成。LVS需要理解tcp，ip头部。</li>\n<li>当tcp握手信号，SYN数据包达到时，ipvs选择一个后端服务器，将数据包进行转发。在此之后，所有包含相同的ip，tcp头部的数据包都会被转发到之前选择的服务器上。很明显，ipvs无法感知数据包内容。</li>\n</ol>\n<h2 id=\"4-1-分类\"><a href=\"#4-1-分类\" class=\"headerlink\" title=\"4.1 分类\"></a>4.1 分类</h2><ul>\n<li>LVS-NAT</li>\n<li>LVS-DR</li>\n<li>LVS-TUN</li>\n</ul>\n<h2 id=\"4-2-基本原理\"><a href=\"#4-2-基本原理\" class=\"headerlink\" title=\"4.2 基本原理\"></a>4.2 基本原理</h2><h3 id=\"4-2-1-LVS-DR\"><a href=\"#4-2-1-LVS-DR\" class=\"headerlink\" title=\"4.2.1 LVS-DR\"></a>4.2.1 LVS-DR</h3><p>LVS-DR模式的基本原理如下图所示:<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/lvs-dr.png\" alt=\"image\"></p>\n<h3 id=\"4-2-2-LVS-NAT\"><a href=\"#4-2-2-LVS-NAT\" class=\"headerlink\" title=\"4.2.2 LVS-NAT\"></a>4.2.2 LVS-NAT</h3><p>LVS-NAT模式的基本原理如下图所示:<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/lvs-nat.png\" alt=\"image\"></p>\n<h2 id=\"4-3-负载均衡算法\"><a href=\"#4-3-负载均衡算法\" class=\"headerlink\" title=\"4.3 负载均衡算法\"></a>4.3 负载均衡算法</h2><h3 id=\"4-3-1-静态算法\"><a href=\"#4-3-1-静态算法\" class=\"headerlink\" title=\"4.3.1 静态算法\"></a>4.3.1 静态算法</h3><ol>\n<li>轮询(Round Robin, RR)</li>\n<li>加权轮询(Weight Round Robin, WRR)</li>\n<li>源地址Hash(Source Hash, SH)</li>\n<li>目的地址Hash(Destination Hash, DH), 可以设置多个VIP</li>\n</ol>\n<h3 id=\"4-3-2-动态算法\"><a href=\"#4-3-2-动态算法\" class=\"headerlink\" title=\"4.3.2 动态算法\"></a>4.3.2 动态算法</h3><ol>\n<li>最少连接(Least Connections, LC)，找出当前连接数最小的服务器</li>\n<li>加权最少连接(Weighted Least Connections, WLC)</li>\n<li>最短期望延迟(Shortest Expected Delay Scheduling, SED) 基于WLC。例如: 现有A, B, C三台服务器，权重分别为100,200,300，当前的连接数分别为1,2,3,下一个连接到达时，通过计算期望时延选择服务器(1+1)/100, (2+1)/200, (3+1)/300, 故而选择C服务器。</li>\n<li>永不排队(Never Queue Scheduling, NQ)， 改进的sed, 如果某台服务器连接数为0，直接连接过去，不在进行sed计算。</li>\n<li>基于局部性的最少连接(locality-Based Least Connections, LBLC)，根据目标ip, 找出目标ip最近使用的服务器，如果服务器存在并且负载没有大于一个阈值，则将新的连接分配到这个服务器上，否则按照最少连接找出一个服务器处理该请求。</li>\n<li>带复制的基于局部性最少连接(Locality-Based Least Connections with Replication, LBLCR)，根据目标ip，维护一个服务器组，每次从组中挑选服务器，如果服务器不可以处理，则从所有服务器中按照最少连接挑选出一台服务器，并将其加入到目标ip的处理组服务器中。</li>\n</ol>\n<h2 id=\"4-3-参考\"><a href=\"#4-3-参考\" class=\"headerlink\" title=\"4.3 参考\"></a>4.3 参考</h2><ul>\n<li><a href=\"https://liangshuang.name/2017/11/19/lvs/\" target=\"_blank\" rel=\"noopener\">https://liangshuang.name/2017/11/19/lvs/</a></li>\n</ul>\n<h1 id=\"五-Nginx-Load-Balance\"><a href=\"#五-Nginx-Load-Balance\" class=\"headerlink\" title=\"五. Nginx Load Balance\"></a>五. Nginx Load Balance</h1><ol>\n<li>nginx负载均衡工作在7层，它会与client、upstream分别建立tcp连接，nginx需要维护这两个连接的状态。</li>\n<li>nginx的stream模块可以用于4层负载均衡，但一般很少使用。</li>\n</ol>\n<h2 id=\"5-1-基本原理\"><a href=\"#5-1-基本原理\" class=\"headerlink\" title=\"5.1 基本原理\"></a>5.1 基本原理</h2><p>nginx做7层负载均衡的基本原理如下图所示:<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png\" alt=\"image\"></p>\n<h2 id=\"5-2-负载均衡算法\"><a href=\"#5-2-负载均衡算法\" class=\"headerlink\" title=\"5.2 负载均衡算法\"></a>5.2 负载均衡算法</h2><ol>\n<li>轮询(默认)</li>\n<li>加权轮询</li>\n<li>源ip哈希</li>\n<li>响应时间</li>\n<li>url 哈希</li>\n</ol>\n"},{"title":"字节序与位序","date":"2018-11-05T11:52:07.000Z","_content":"\n# 一. 本机字节序\n1. 小端: 低位字节存在低地址。\n2. 大端: 低位字节存在高地址。\n\n# 二. 本机位序\n一般情况下，本机位序与本机的字节序一致。\n1. 小端字节序: 低位bit存在低地址。\n2. 大端字节序: 低位bit存在高地址。\n\n# 三. 网络序\n1. 网络字节序(大端)，先传送高位字节，再传送低位字节。\n2. 在传输一个字节时，先传送低位bit, 再传送高位bit。\n\n注: 指针指向变量或者数组的起始地址，即指向低地址。\n\n# 四. 代码示例\n```cpp\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main (int argc, char **argv){\n    union byte_order{\n        int a;\n        unsigned char b[4];\n    };\n    byte_order val;\n    val.a = 0x01020304;\n    printf(\"address 0x%x byte: 0x%x\\n\", &val.b[0], val.b[0]);\n    printf(\"address 0x%x byte: 0x%x\\n\", &val.b[1], val.b[1]);\n    printf(\"address 0x%x byte: 0x%x\\n\", &val.b[2], val.b[2]);\n    printf(\"address 0x%x byte: 0x%x\\n\", &val.b[3], val.b[3]);\n\n    struct  bit_order{\n        unsigned char a:4;\n        unsigned char b:4;\n    };\n    unsigned char tmp = 0x04;\n    bit_order *val1 = (bit_order*)&tmp;\n    printf(\"low bit %d\\n\", val1->a);\n    printf(\"high bit %d\\n\", val1->b);\n}\n\n//输出:\naddress 0x56074a68 byte: 0x4\naddress 0x56074a69 byte: 0x3\naddress 0x56074a6a byte: 0x2\naddress 0x56074a6b byte: 0x1\nlow bit 4\nhigh bit 0\n```\n","source":"_posts/net-byte-order.md","raw":"---\ntitle: 字节序与位序\ndate: 2018-11-05 19:52:07\ncategories:\n- 网络编程\n- 基础\ntags:\n- 网络编程\n- 数据传输顺序\n---\n\n# 一. 本机字节序\n1. 小端: 低位字节存在低地址。\n2. 大端: 低位字节存在高地址。\n\n# 二. 本机位序\n一般情况下，本机位序与本机的字节序一致。\n1. 小端字节序: 低位bit存在低地址。\n2. 大端字节序: 低位bit存在高地址。\n\n# 三. 网络序\n1. 网络字节序(大端)，先传送高位字节，再传送低位字节。\n2. 在传输一个字节时，先传送低位bit, 再传送高位bit。\n\n注: 指针指向变量或者数组的起始地址，即指向低地址。\n\n# 四. 代码示例\n```cpp\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main (int argc, char **argv){\n    union byte_order{\n        int a;\n        unsigned char b[4];\n    };\n    byte_order val;\n    val.a = 0x01020304;\n    printf(\"address 0x%x byte: 0x%x\\n\", &val.b[0], val.b[0]);\n    printf(\"address 0x%x byte: 0x%x\\n\", &val.b[1], val.b[1]);\n    printf(\"address 0x%x byte: 0x%x\\n\", &val.b[2], val.b[2]);\n    printf(\"address 0x%x byte: 0x%x\\n\", &val.b[3], val.b[3]);\n\n    struct  bit_order{\n        unsigned char a:4;\n        unsigned char b:4;\n    };\n    unsigned char tmp = 0x04;\n    bit_order *val1 = (bit_order*)&tmp;\n    printf(\"low bit %d\\n\", val1->a);\n    printf(\"high bit %d\\n\", val1->b);\n}\n\n//输出:\naddress 0x56074a68 byte: 0x4\naddress 0x56074a69 byte: 0x3\naddress 0x56074a6a byte: 0x2\naddress 0x56074a6b byte: 0x1\nlow bit 4\nhigh bit 0\n```\n","slug":"net-byte-order","published":1,"updated":"2019-05-27T01:49:32.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw5qxkq50002txs63mzr3jm0","content":"<h1 id=\"一-本机字节序\"><a href=\"#一-本机字节序\" class=\"headerlink\" title=\"一. 本机字节序\"></a>一. 本机字节序</h1><ol>\n<li>小端: 低位字节存在低地址。</li>\n<li>大端: 低位字节存在高地址。</li>\n</ol>\n<h1 id=\"二-本机位序\"><a href=\"#二-本机位序\" class=\"headerlink\" title=\"二. 本机位序\"></a>二. 本机位序</h1><p>一般情况下，本机位序与本机的字节序一致。</p>\n<ol>\n<li>小端字节序: 低位bit存在低地址。</li>\n<li>大端字节序: 低位bit存在高地址。</li>\n</ol>\n<h1 id=\"三-网络序\"><a href=\"#三-网络序\" class=\"headerlink\" title=\"三. 网络序\"></a>三. 网络序</h1><ol>\n<li>网络字节序(大端)，先传送高位字节，再传送低位字节。</li>\n<li>在传输一个字节时，先传送低位bit, 再传送高位bit。</li>\n</ol>\n<p>注: 指针指向变量或者数组的起始地址，即指向低地址。</p>\n<h1 id=\"四-代码示例\"><a href=\"#四-代码示例\" class=\"headerlink\" title=\"四. 代码示例\"></a>四. 代码示例</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">union</span> byte_order&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> b[<span class=\"number\">4</span>];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    byte_order val;</span><br><span class=\"line\">    val.a = <span class=\"number\">0x01020304</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"address 0x%x byte: 0x%x\\n\"</span>, &amp;val.b[<span class=\"number\">0</span>], val.b[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"address 0x%x byte: 0x%x\\n\"</span>, &amp;val.b[<span class=\"number\">1</span>], val.b[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"address 0x%x byte: 0x%x\\n\"</span>, &amp;val.b[<span class=\"number\">2</span>], val.b[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"address 0x%x byte: 0x%x\\n\"</span>, &amp;val.b[<span class=\"number\">3</span>], val.b[<span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span>  <span class=\"title\">bit_order</span>&#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> a:<span class=\"number\">4</span>;</span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> b:<span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> tmp = <span class=\"number\">0x04</span>;</span><br><span class=\"line\">    bit_order *val1 = (bit_order*)&amp;tmp;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"low bit %d\\n\"</span>, val1-&gt;a);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"high bit %d\\n\"</span>, val1-&gt;b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出:</span></span><br><span class=\"line\">address <span class=\"number\">0x56074a68</span> byte: <span class=\"number\">0x4</span></span><br><span class=\"line\">address <span class=\"number\">0x56074a69</span> byte: <span class=\"number\">0x3</span></span><br><span class=\"line\">address <span class=\"number\">0x56074a6a</span> byte: <span class=\"number\">0x2</span></span><br><span class=\"line\">address <span class=\"number\">0x56074a6b</span> byte: <span class=\"number\">0x1</span></span><br><span class=\"line\">low bit <span class=\"number\">4</span></span><br><span class=\"line\">high bit <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-本机字节序\"><a href=\"#一-本机字节序\" class=\"headerlink\" title=\"一. 本机字节序\"></a>一. 本机字节序</h1><ol>\n<li>小端: 低位字节存在低地址。</li>\n<li>大端: 低位字节存在高地址。</li>\n</ol>\n<h1 id=\"二-本机位序\"><a href=\"#二-本机位序\" class=\"headerlink\" title=\"二. 本机位序\"></a>二. 本机位序</h1><p>一般情况下，本机位序与本机的字节序一致。</p>\n<ol>\n<li>小端字节序: 低位bit存在低地址。</li>\n<li>大端字节序: 低位bit存在高地址。</li>\n</ol>\n<h1 id=\"三-网络序\"><a href=\"#三-网络序\" class=\"headerlink\" title=\"三. 网络序\"></a>三. 网络序</h1><ol>\n<li>网络字节序(大端)，先传送高位字节，再传送低位字节。</li>\n<li>在传输一个字节时，先传送低位bit, 再传送高位bit。</li>\n</ol>\n<p>注: 指针指向变量或者数组的起始地址，即指向低地址。</p>\n<h1 id=\"四-代码示例\"><a href=\"#四-代码示例\" class=\"headerlink\" title=\"四. 代码示例\"></a>四. 代码示例</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">union</span> byte_order&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> b[<span class=\"number\">4</span>];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    byte_order val;</span><br><span class=\"line\">    val.a = <span class=\"number\">0x01020304</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"address 0x%x byte: 0x%x\\n\"</span>, &amp;val.b[<span class=\"number\">0</span>], val.b[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"address 0x%x byte: 0x%x\\n\"</span>, &amp;val.b[<span class=\"number\">1</span>], val.b[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"address 0x%x byte: 0x%x\\n\"</span>, &amp;val.b[<span class=\"number\">2</span>], val.b[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"address 0x%x byte: 0x%x\\n\"</span>, &amp;val.b[<span class=\"number\">3</span>], val.b[<span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span>  <span class=\"title\">bit_order</span>&#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> a:<span class=\"number\">4</span>;</span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> b:<span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> tmp = <span class=\"number\">0x04</span>;</span><br><span class=\"line\">    bit_order *val1 = (bit_order*)&amp;tmp;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"low bit %d\\n\"</span>, val1-&gt;a);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"high bit %d\\n\"</span>, val1-&gt;b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出:</span></span><br><span class=\"line\">address <span class=\"number\">0x56074a68</span> byte: <span class=\"number\">0x4</span></span><br><span class=\"line\">address <span class=\"number\">0x56074a69</span> byte: <span class=\"number\">0x3</span></span><br><span class=\"line\">address <span class=\"number\">0x56074a6a</span> byte: <span class=\"number\">0x2</span></span><br><span class=\"line\">address <span class=\"number\">0x56074a6b</span> byte: <span class=\"number\">0x1</span></span><br><span class=\"line\">low bit <span class=\"number\">4</span></span><br><span class=\"line\">high bit <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n"},{"title":"水平触发与边沿触发","date":"2018-11-05T03:21:50.000Z","_content":"# 一. 基础\n## 1.1 水平触发\n1. 基本概念\n> - 读缓冲区不为空时, 读事件触发。\n> - 写缓冲区不为满时, 写事件触发。\n\n2. 处理流程\n> - accept新的连接, 监听读事件。\n> - 读事件到达, 处理读事件。\n> - 需要写入数据, 向fd中写数据, 一次无法写完, 开启写事件监听。\n> - 写事件到达, 继续写入数据, 写完后关闭写事件。\n\n3. 优缺点\n> - 不会遗漏事件, 易编程。\n> - 长连接需要写入的数据量大时, 会频繁开启关闭写事件。  \n\n## 1.2 边沿触发\n1. 基本概念\n> - 读缓冲区状态变化时, 读事件触发, 网卡接受到新数据。\n> - 写缓冲区状态变化时, 写事件触发, 网卡发出了新数据。\n\n2. 处理流程\n> - accept新的连接, 同时监听读写事件。\n> - 读事件到达, 需要一直读取数据, 直到返回EAGAIN。\n> - 写事件到达, 无数据处理则不处理, 有数据待写入则一直写入，直到写完或者返回EAGAIN。\n\n3. 优缺点\n> - 不需要频繁开启关闭事件, 效率较高。\n> - 读写事件处理不当, 可能导致事件丢失, 编程教复杂。\n\n## 1.3 选择\n1. 概述\n> - 对于读事件而言，总体而言, 采用水平触发方式较好。应用程序在读取数据时，可能会一次无法读取全部数据，边沿触发在下一次可能不会触发。如果能够保证一次读取缓存的全部数据，可以采用边沿触发，效率更高, 但同时编程复杂度也高。\n> - 对于写事件，当客户端服务端采用短连接或者采用长连接但发送的数据量比较少时(例如: Redis), 采用水平触发即可。当客户端与服务端是长连接并且数据写入的量比较大时(例如: nginx), 采用边沿触发, 因为边沿触发效率更高。\n> - 目前，linux不支持读写事件分别设置不同的触发方式，具体采用哪种方式触发，需要根据具体需求。\n\n\n2. 监听套接字事件设置\n> - 监听套接字不需要监听写事件，只需要监听读事件。\n> - 监听套接字一般采用水平触发方式。(nginx开启multi_accept时，会把监听套接字所有可读的事件全部读取，此时可以使用边沿触发。但为了保证连接不丢失，nginx仍然采用水平触发)\n\n3. 通信套接字设置\n> - redis对于与客户端通信使用的套接字默认使用水平触发。\n> - nginx对于与客户端通信使用的套接字默认采用边沿触发。\n\n\n# 二. 参考\n- https://blog.csdn.net/dongfuye/article/details/50880251\n","source":"_posts/LT-ET.md","raw":"---\ntitle: 水平触发与边沿触发\ndate: 2018-11-05 11:21:50\ncategories:\n- 网络编程\n- 基础\ntags:\n- 水平触发\n- 边沿触发\n- 网络编程\n---\n# 一. 基础\n## 1.1 水平触发\n1. 基本概念\n> - 读缓冲区不为空时, 读事件触发。\n> - 写缓冲区不为满时, 写事件触发。\n\n2. 处理流程\n> - accept新的连接, 监听读事件。\n> - 读事件到达, 处理读事件。\n> - 需要写入数据, 向fd中写数据, 一次无法写完, 开启写事件监听。\n> - 写事件到达, 继续写入数据, 写完后关闭写事件。\n\n3. 优缺点\n> - 不会遗漏事件, 易编程。\n> - 长连接需要写入的数据量大时, 会频繁开启关闭写事件。  \n\n## 1.2 边沿触发\n1. 基本概念\n> - 读缓冲区状态变化时, 读事件触发, 网卡接受到新数据。\n> - 写缓冲区状态变化时, 写事件触发, 网卡发出了新数据。\n\n2. 处理流程\n> - accept新的连接, 同时监听读写事件。\n> - 读事件到达, 需要一直读取数据, 直到返回EAGAIN。\n> - 写事件到达, 无数据处理则不处理, 有数据待写入则一直写入，直到写完或者返回EAGAIN。\n\n3. 优缺点\n> - 不需要频繁开启关闭事件, 效率较高。\n> - 读写事件处理不当, 可能导致事件丢失, 编程教复杂。\n\n## 1.3 选择\n1. 概述\n> - 对于读事件而言，总体而言, 采用水平触发方式较好。应用程序在读取数据时，可能会一次无法读取全部数据，边沿触发在下一次可能不会触发。如果能够保证一次读取缓存的全部数据，可以采用边沿触发，效率更高, 但同时编程复杂度也高。\n> - 对于写事件，当客户端服务端采用短连接或者采用长连接但发送的数据量比较少时(例如: Redis), 采用水平触发即可。当客户端与服务端是长连接并且数据写入的量比较大时(例如: nginx), 采用边沿触发, 因为边沿触发效率更高。\n> - 目前，linux不支持读写事件分别设置不同的触发方式，具体采用哪种方式触发，需要根据具体需求。\n\n\n2. 监听套接字事件设置\n> - 监听套接字不需要监听写事件，只需要监听读事件。\n> - 监听套接字一般采用水平触发方式。(nginx开启multi_accept时，会把监听套接字所有可读的事件全部读取，此时可以使用边沿触发。但为了保证连接不丢失，nginx仍然采用水平触发)\n\n3. 通信套接字设置\n> - redis对于与客户端通信使用的套接字默认使用水平触发。\n> - nginx对于与客户端通信使用的套接字默认采用边沿触发。\n\n\n# 二. 参考\n- https://blog.csdn.net/dongfuye/article/details/50880251\n","slug":"LT-ET","published":1,"updated":"2019-05-27T01:49:32.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw5qxkq90006txs6kzrxomkj","content":"<h1 id=\"一-基础\"><a href=\"#一-基础\" class=\"headerlink\" title=\"一. 基础\"></a>一. 基础</h1><h2 id=\"1-1-水平触发\"><a href=\"#1-1-水平触发\" class=\"headerlink\" title=\"1.1 水平触发\"></a>1.1 水平触发</h2><ol>\n<li><p>基本概念</p>\n<blockquote>\n<ul>\n<li>读缓冲区不为空时, 读事件触发。</li>\n<li>写缓冲区不为满时, 写事件触发。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>处理流程</p>\n<blockquote>\n<ul>\n<li>accept新的连接, 监听读事件。</li>\n<li>读事件到达, 处理读事件。</li>\n<li>需要写入数据, 向fd中写数据, 一次无法写完, 开启写事件监听。</li>\n<li>写事件到达, 继续写入数据, 写完后关闭写事件。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>优缺点</p>\n<blockquote>\n<ul>\n<li>不会遗漏事件, 易编程。</li>\n<li>长连接需要写入的数据量大时, 会频繁开启关闭写事件。  </li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"1-2-边沿触发\"><a href=\"#1-2-边沿触发\" class=\"headerlink\" title=\"1.2 边沿触发\"></a>1.2 边沿触发</h2><ol>\n<li><p>基本概念</p>\n<blockquote>\n<ul>\n<li>读缓冲区状态变化时, 读事件触发, 网卡接受到新数据。</li>\n<li>写缓冲区状态变化时, 写事件触发, 网卡发出了新数据。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>处理流程</p>\n<blockquote>\n<ul>\n<li>accept新的连接, 同时监听读写事件。</li>\n<li>读事件到达, 需要一直读取数据, 直到返回EAGAIN。</li>\n<li>写事件到达, 无数据处理则不处理, 有数据待写入则一直写入，直到写完或者返回EAGAIN。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>优缺点</p>\n<blockquote>\n<ul>\n<li>不需要频繁开启关闭事件, 效率较高。</li>\n<li>读写事件处理不当, 可能导致事件丢失, 编程教复杂。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"1-3-选择\"><a href=\"#1-3-选择\" class=\"headerlink\" title=\"1.3 选择\"></a>1.3 选择</h2><ol>\n<li>概述<blockquote>\n<ul>\n<li>对于读事件而言，总体而言, 采用水平触发方式较好。应用程序在读取数据时，可能会一次无法读取全部数据，边沿触发在下一次可能不会触发。如果能够保证一次读取缓存的全部数据，可以采用边沿触发，效率更高, 但同时编程复杂度也高。</li>\n<li>对于写事件，当客户端服务端采用短连接或者采用长连接但发送的数据量比较少时(例如: Redis), 采用水平触发即可。当客户端与服务端是长连接并且数据写入的量比较大时(例如: nginx), 采用边沿触发, 因为边沿触发效率更高。</li>\n<li>目前，linux不支持读写事件分别设置不同的触发方式，具体采用哪种方式触发，需要根据具体需求。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>监听套接字事件设置</p>\n<blockquote>\n<ul>\n<li>监听套接字不需要监听写事件，只需要监听读事件。</li>\n<li>监听套接字一般采用水平触发方式。(nginx开启multi_accept时，会把监听套接字所有可读的事件全部读取，此时可以使用边沿触发。但为了保证连接不丢失，nginx仍然采用水平触发)</li>\n</ul>\n</blockquote>\n</li>\n<li><p>通信套接字设置</p>\n<blockquote>\n<ul>\n<li>redis对于与客户端通信使用的套接字默认使用水平触发。</li>\n<li>nginx对于与客户端通信使用的套接字默认采用边沿触发。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"二-参考\"><a href=\"#二-参考\" class=\"headerlink\" title=\"二. 参考\"></a>二. 参考</h1><ul>\n<li><a href=\"https://blog.csdn.net/dongfuye/article/details/50880251\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/dongfuye/article/details/50880251</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-基础\"><a href=\"#一-基础\" class=\"headerlink\" title=\"一. 基础\"></a>一. 基础</h1><h2 id=\"1-1-水平触发\"><a href=\"#1-1-水平触发\" class=\"headerlink\" title=\"1.1 水平触发\"></a>1.1 水平触发</h2><ol>\n<li><p>基本概念</p>\n<blockquote>\n<ul>\n<li>读缓冲区不为空时, 读事件触发。</li>\n<li>写缓冲区不为满时, 写事件触发。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>处理流程</p>\n<blockquote>\n<ul>\n<li>accept新的连接, 监听读事件。</li>\n<li>读事件到达, 处理读事件。</li>\n<li>需要写入数据, 向fd中写数据, 一次无法写完, 开启写事件监听。</li>\n<li>写事件到达, 继续写入数据, 写完后关闭写事件。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>优缺点</p>\n<blockquote>\n<ul>\n<li>不会遗漏事件, 易编程。</li>\n<li>长连接需要写入的数据量大时, 会频繁开启关闭写事件。  </li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"1-2-边沿触发\"><a href=\"#1-2-边沿触发\" class=\"headerlink\" title=\"1.2 边沿触发\"></a>1.2 边沿触发</h2><ol>\n<li><p>基本概念</p>\n<blockquote>\n<ul>\n<li>读缓冲区状态变化时, 读事件触发, 网卡接受到新数据。</li>\n<li>写缓冲区状态变化时, 写事件触发, 网卡发出了新数据。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>处理流程</p>\n<blockquote>\n<ul>\n<li>accept新的连接, 同时监听读写事件。</li>\n<li>读事件到达, 需要一直读取数据, 直到返回EAGAIN。</li>\n<li>写事件到达, 无数据处理则不处理, 有数据待写入则一直写入，直到写完或者返回EAGAIN。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>优缺点</p>\n<blockquote>\n<ul>\n<li>不需要频繁开启关闭事件, 效率较高。</li>\n<li>读写事件处理不当, 可能导致事件丢失, 编程教复杂。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"1-3-选择\"><a href=\"#1-3-选择\" class=\"headerlink\" title=\"1.3 选择\"></a>1.3 选择</h2><ol>\n<li>概述<blockquote>\n<ul>\n<li>对于读事件而言，总体而言, 采用水平触发方式较好。应用程序在读取数据时，可能会一次无法读取全部数据，边沿触发在下一次可能不会触发。如果能够保证一次读取缓存的全部数据，可以采用边沿触发，效率更高, 但同时编程复杂度也高。</li>\n<li>对于写事件，当客户端服务端采用短连接或者采用长连接但发送的数据量比较少时(例如: Redis), 采用水平触发即可。当客户端与服务端是长连接并且数据写入的量比较大时(例如: nginx), 采用边沿触发, 因为边沿触发效率更高。</li>\n<li>目前，linux不支持读写事件分别设置不同的触发方式，具体采用哪种方式触发，需要根据具体需求。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>监听套接字事件设置</p>\n<blockquote>\n<ul>\n<li>监听套接字不需要监听写事件，只需要监听读事件。</li>\n<li>监听套接字一般采用水平触发方式。(nginx开启multi_accept时，会把监听套接字所有可读的事件全部读取，此时可以使用边沿触发。但为了保证连接不丢失，nginx仍然采用水平触发)</li>\n</ul>\n</blockquote>\n</li>\n<li><p>通信套接字设置</p>\n<blockquote>\n<ul>\n<li>redis对于与客户端通信使用的套接字默认使用水平触发。</li>\n<li>nginx对于与客户端通信使用的套接字默认采用边沿触发。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"二-参考\"><a href=\"#二-参考\" class=\"headerlink\" title=\"二. 参考\"></a>二. 参考</h1><ul>\n<li><a href=\"https://blog.csdn.net/dongfuye/article/details/50880251\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/dongfuye/article/details/50880251</a></li>\n</ul>\n"},{"title":"正向代理","date":"2018-11-09T03:38:34.000Z","_content":"\n# 一. 概述\n\n1. 什么是正向代理?\n> - 简单来说就是代理客户端请求的服务器。例如, 浏览器中设置代理翻墙等。\n\n2. 正向代理的主要问题?\n> - 代理服务器需要知道客户的目标服务器, 例如: 客户一会请求www.baidu.com, 一会请求www.taobao.com, 代理服务器如何获取目标服务器信息。\n\n3. 正向代理问题的解决方案?\n> - 客户端按照某种事先约定的协议通知代理服务器, 例如sock5协议\n> - 代理服务器能够直接从客户端与服务端交互的上层数据包(tcp之上)获取目标服务器信息。例如: 客户端与目标服务器按照http协议通信, 代理服务器可以直接从数据包中解析目标服务器。这种情况不适用与客户端与目标服务器加密通信的情况, 例如https。\n\n\n# 二. socks5\n## 2.1 socks5基本流程\nsock5通信的基本流程图如下,\n![image](https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/sock5/socks5%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.png)\n\n1. 如果不需要认证, 第三步和第四步则不需要。\n\n\n## 2.2 socks5总结\n1. socks5主要完成目标地址传递的功能\n> - 浏览器与sock5服务器完成tcp握手\n> - 浏览器将目标地址通过socks5协议发送给socks5服务器\n> - socks5服务器与目标地址完成tcp握手\n> - 浏览器将请求数据发送给socks5服务器, 由其进行转发, 此时可以只做4层tcp代理\n\n\n# 三. shadowsocks原理\nshadowsocks信息交换的基本结构图如下, ss_cli代表shadowsocks客户端, ss_srv代表shadowsocks服务端,\n![image](https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/shadowsocks%E4%BB%A3%E7%90%86%E7%BB%93%E6%9E%84%E5%9B%BE.png)\n\n## 3.1 第一阶段\n1. 客户端与ss_cli建立tcp连接\n2. 客户端与ss_cli协商sock认证参数, ss_cli给与响应, 默认不进行认证\n3. 客户端将目标地址发送给ss_cli, ss_cli给与响应, 默认返回成功\n\n## 3.2 第二阶段\n4. ss_cli与ss_srv建立tcp连接\n5. ss_cli将客户端发送的目标地址发送给ss_srv, 此时按照ss_cli与ss_srv协商好的数据包格式, 并不需要使用sock协议, 同时还会发送加密解密需要的随机数\n6. ss_srv与目标地址建立tcp连接\n\n## 3.3 第三阶段\n7. 客户端向ss_cli发送tcp数据包\n8. ss_cli将数据包稍作处理, 计算长度, 计算哈希值, 并将这些信息一并发送给ss_srv, 此时的数据包格式是ss_cli与ss_srv约定好的\n9. ss_srv受到数据后, 解析后发送给目标服务器\n\n## 3.4 第四阶段\n10. ss_srv收到目标服务器返回的数据后, 将数据按约定好的格式转发给ss_cli\n11. ss_cli受到数据后, 解析转发给客户\n\n## 3.5 总结\n1. 通过sock5协议, ss_cli可以知道客户端的目标服务器地址\n2. ss_cli与ss_srv可以自行定义协议, 核心是需要将客户端的目标服务器地址以及解密需要的随机变量发送给ss_srv\n3. ss_cli, ss_srv不需要也无法知道客户端与目标服务器的具体通信信息。\n4. ss_cli, ss_srv后期是tcp的代理, 不管是https还是http对其而言都是一样的。\n\n\n## 3.6 参考\n- https://www.jianshu.com/p/cbea16a096fb\n\n\n# 四. 抓包分析\n1. ss_cli: 127.0.0.1:1080\n2. ss_srv: 204.48.26.173:21500\n3. 浏览器与ss_cli同属于一个主机, 通信时延低。ss_cli与ss_srv需要通过网络传输, 时延高。数据包分析中可以利用这一点。\n\n\n## 4.1 浏览器与ss_cli通信\n1. tcp握手, 浏览器通过socks5发送目标服务器地址\n![image](https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/browser-ss_cli-1.jpg)\n\n2. 浏览器与ss_cli之间后续的通信, 此处是https协议\n![image](https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/browser-ss_cli-2.jpg)\n> - 时间突变的部分是由于ss_cli需要ss_srv将目标服务器的应答信息发送回来。\n\n## 4.2 ss_cli与ss_srv通信\n二者的通信格式是自行定义的,\n![image](https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/ss_cli-ss_srv.jpg)\n","source":"_posts/browser-proxy.md","raw":"---\ntitle: 正向代理\ndate: 2018-11-09 11:38:34\ncategories:\n- 网络编程\n- 代理\ntags:\n- 网络\n- 代理\n---\n\n# 一. 概述\n\n1. 什么是正向代理?\n> - 简单来说就是代理客户端请求的服务器。例如, 浏览器中设置代理翻墙等。\n\n2. 正向代理的主要问题?\n> - 代理服务器需要知道客户的目标服务器, 例如: 客户一会请求www.baidu.com, 一会请求www.taobao.com, 代理服务器如何获取目标服务器信息。\n\n3. 正向代理问题的解决方案?\n> - 客户端按照某种事先约定的协议通知代理服务器, 例如sock5协议\n> - 代理服务器能够直接从客户端与服务端交互的上层数据包(tcp之上)获取目标服务器信息。例如: 客户端与目标服务器按照http协议通信, 代理服务器可以直接从数据包中解析目标服务器。这种情况不适用与客户端与目标服务器加密通信的情况, 例如https。\n\n\n# 二. socks5\n## 2.1 socks5基本流程\nsock5通信的基本流程图如下,\n![image](https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/sock5/socks5%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.png)\n\n1. 如果不需要认证, 第三步和第四步则不需要。\n\n\n## 2.2 socks5总结\n1. socks5主要完成目标地址传递的功能\n> - 浏览器与sock5服务器完成tcp握手\n> - 浏览器将目标地址通过socks5协议发送给socks5服务器\n> - socks5服务器与目标地址完成tcp握手\n> - 浏览器将请求数据发送给socks5服务器, 由其进行转发, 此时可以只做4层tcp代理\n\n\n# 三. shadowsocks原理\nshadowsocks信息交换的基本结构图如下, ss_cli代表shadowsocks客户端, ss_srv代表shadowsocks服务端,\n![image](https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/shadowsocks%E4%BB%A3%E7%90%86%E7%BB%93%E6%9E%84%E5%9B%BE.png)\n\n## 3.1 第一阶段\n1. 客户端与ss_cli建立tcp连接\n2. 客户端与ss_cli协商sock认证参数, ss_cli给与响应, 默认不进行认证\n3. 客户端将目标地址发送给ss_cli, ss_cli给与响应, 默认返回成功\n\n## 3.2 第二阶段\n4. ss_cli与ss_srv建立tcp连接\n5. ss_cli将客户端发送的目标地址发送给ss_srv, 此时按照ss_cli与ss_srv协商好的数据包格式, 并不需要使用sock协议, 同时还会发送加密解密需要的随机数\n6. ss_srv与目标地址建立tcp连接\n\n## 3.3 第三阶段\n7. 客户端向ss_cli发送tcp数据包\n8. ss_cli将数据包稍作处理, 计算长度, 计算哈希值, 并将这些信息一并发送给ss_srv, 此时的数据包格式是ss_cli与ss_srv约定好的\n9. ss_srv受到数据后, 解析后发送给目标服务器\n\n## 3.4 第四阶段\n10. ss_srv收到目标服务器返回的数据后, 将数据按约定好的格式转发给ss_cli\n11. ss_cli受到数据后, 解析转发给客户\n\n## 3.5 总结\n1. 通过sock5协议, ss_cli可以知道客户端的目标服务器地址\n2. ss_cli与ss_srv可以自行定义协议, 核心是需要将客户端的目标服务器地址以及解密需要的随机变量发送给ss_srv\n3. ss_cli, ss_srv不需要也无法知道客户端与目标服务器的具体通信信息。\n4. ss_cli, ss_srv后期是tcp的代理, 不管是https还是http对其而言都是一样的。\n\n\n## 3.6 参考\n- https://www.jianshu.com/p/cbea16a096fb\n\n\n# 四. 抓包分析\n1. ss_cli: 127.0.0.1:1080\n2. ss_srv: 204.48.26.173:21500\n3. 浏览器与ss_cli同属于一个主机, 通信时延低。ss_cli与ss_srv需要通过网络传输, 时延高。数据包分析中可以利用这一点。\n\n\n## 4.1 浏览器与ss_cli通信\n1. tcp握手, 浏览器通过socks5发送目标服务器地址\n![image](https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/browser-ss_cli-1.jpg)\n\n2. 浏览器与ss_cli之间后续的通信, 此处是https协议\n![image](https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/browser-ss_cli-2.jpg)\n> - 时间突变的部分是由于ss_cli需要ss_srv将目标服务器的应答信息发送回来。\n\n## 4.2 ss_cli与ss_srv通信\n二者的通信格式是自行定义的,\n![image](https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/ss_cli-ss_srv.jpg)\n","slug":"browser-proxy","published":1,"updated":"2019-05-27T01:49:32.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw5qxkqb0007txs6bbgcl9ro","content":"<h1 id=\"一-概述\"><a href=\"#一-概述\" class=\"headerlink\" title=\"一. 概述\"></a>一. 概述</h1><ol>\n<li><p>什么是正向代理?</p>\n<blockquote>\n<ul>\n<li>简单来说就是代理客户端请求的服务器。例如, 浏览器中设置代理翻墙等。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>正向代理的主要问题?</p>\n<blockquote>\n<ul>\n<li>代理服务器需要知道客户的目标服务器, 例如: 客户一会请求<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a>, 一会请求<a href=\"http://www.taobao.com\" target=\"_blank\" rel=\"noopener\">www.taobao.com</a>, 代理服务器如何获取目标服务器信息。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>正向代理问题的解决方案?</p>\n<blockquote>\n<ul>\n<li>客户端按照某种事先约定的协议通知代理服务器, 例如sock5协议</li>\n<li>代理服务器能够直接从客户端与服务端交互的上层数据包(tcp之上)获取目标服务器信息。例如: 客户端与目标服务器按照http协议通信, 代理服务器可以直接从数据包中解析目标服务器。这种情况不适用与客户端与目标服务器加密通信的情况, 例如https。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"二-socks5\"><a href=\"#二-socks5\" class=\"headerlink\" title=\"二. socks5\"></a>二. socks5</h1><h2 id=\"2-1-socks5基本流程\"><a href=\"#2-1-socks5基本流程\" class=\"headerlink\" title=\"2.1 socks5基本流程\"></a>2.1 socks5基本流程</h2><p>sock5通信的基本流程图如下,<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/sock5/socks5%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.png\" alt=\"image\"></p>\n<ol>\n<li>如果不需要认证, 第三步和第四步则不需要。</li>\n</ol>\n<h2 id=\"2-2-socks5总结\"><a href=\"#2-2-socks5总结\" class=\"headerlink\" title=\"2.2 socks5总结\"></a>2.2 socks5总结</h2><ol>\n<li>socks5主要完成目标地址传递的功能<blockquote>\n<ul>\n<li>浏览器与sock5服务器完成tcp握手</li>\n<li>浏览器将目标地址通过socks5协议发送给socks5服务器</li>\n<li>socks5服务器与目标地址完成tcp握手</li>\n<li>浏览器将请求数据发送给socks5服务器, 由其进行转发, 此时可以只做4层tcp代理</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"三-shadowsocks原理\"><a href=\"#三-shadowsocks原理\" class=\"headerlink\" title=\"三. shadowsocks原理\"></a>三. shadowsocks原理</h1><p>shadowsocks信息交换的基本结构图如下, ss_cli代表shadowsocks客户端, ss_srv代表shadowsocks服务端,<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/shadowsocks%E4%BB%A3%E7%90%86%E7%BB%93%E6%9E%84%E5%9B%BE.png\" alt=\"image\"></p>\n<h2 id=\"3-1-第一阶段\"><a href=\"#3-1-第一阶段\" class=\"headerlink\" title=\"3.1 第一阶段\"></a>3.1 第一阶段</h2><ol>\n<li>客户端与ss_cli建立tcp连接</li>\n<li>客户端与ss_cli协商sock认证参数, ss_cli给与响应, 默认不进行认证</li>\n<li>客户端将目标地址发送给ss_cli, ss_cli给与响应, 默认返回成功</li>\n</ol>\n<h2 id=\"3-2-第二阶段\"><a href=\"#3-2-第二阶段\" class=\"headerlink\" title=\"3.2 第二阶段\"></a>3.2 第二阶段</h2><ol start=\"4\">\n<li>ss_cli与ss_srv建立tcp连接</li>\n<li>ss_cli将客户端发送的目标地址发送给ss_srv, 此时按照ss_cli与ss_srv协商好的数据包格式, 并不需要使用sock协议, 同时还会发送加密解密需要的随机数</li>\n<li>ss_srv与目标地址建立tcp连接</li>\n</ol>\n<h2 id=\"3-3-第三阶段\"><a href=\"#3-3-第三阶段\" class=\"headerlink\" title=\"3.3 第三阶段\"></a>3.3 第三阶段</h2><ol start=\"7\">\n<li>客户端向ss_cli发送tcp数据包</li>\n<li>ss_cli将数据包稍作处理, 计算长度, 计算哈希值, 并将这些信息一并发送给ss_srv, 此时的数据包格式是ss_cli与ss_srv约定好的</li>\n<li>ss_srv受到数据后, 解析后发送给目标服务器</li>\n</ol>\n<h2 id=\"3-4-第四阶段\"><a href=\"#3-4-第四阶段\" class=\"headerlink\" title=\"3.4 第四阶段\"></a>3.4 第四阶段</h2><ol start=\"10\">\n<li>ss_srv收到目标服务器返回的数据后, 将数据按约定好的格式转发给ss_cli</li>\n<li>ss_cli受到数据后, 解析转发给客户</li>\n</ol>\n<h2 id=\"3-5-总结\"><a href=\"#3-5-总结\" class=\"headerlink\" title=\"3.5 总结\"></a>3.5 总结</h2><ol>\n<li>通过sock5协议, ss_cli可以知道客户端的目标服务器地址</li>\n<li>ss_cli与ss_srv可以自行定义协议, 核心是需要将客户端的目标服务器地址以及解密需要的随机变量发送给ss_srv</li>\n<li>ss_cli, ss_srv不需要也无法知道客户端与目标服务器的具体通信信息。</li>\n<li>ss_cli, ss_srv后期是tcp的代理, 不管是https还是http对其而言都是一样的。</li>\n</ol>\n<h2 id=\"3-6-参考\"><a href=\"#3-6-参考\" class=\"headerlink\" title=\"3.6 参考\"></a>3.6 参考</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/cbea16a096fb\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/cbea16a096fb</a></li>\n</ul>\n<h1 id=\"四-抓包分析\"><a href=\"#四-抓包分析\" class=\"headerlink\" title=\"四. 抓包分析\"></a>四. 抓包分析</h1><ol>\n<li>ss_cli: 127.0.0.1:1080</li>\n<li>ss_srv: 204.48.26.173:21500</li>\n<li>浏览器与ss_cli同属于一个主机, 通信时延低。ss_cli与ss_srv需要通过网络传输, 时延高。数据包分析中可以利用这一点。</li>\n</ol>\n<h2 id=\"4-1-浏览器与ss-cli通信\"><a href=\"#4-1-浏览器与ss-cli通信\" class=\"headerlink\" title=\"4.1 浏览器与ss_cli通信\"></a>4.1 浏览器与ss_cli通信</h2><ol>\n<li><p>tcp握手, 浏览器通过socks5发送目标服务器地址<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/browser-ss_cli-1.jpg\" alt=\"image\"></p>\n</li>\n<li><p>浏览器与ss_cli之间后续的通信, 此处是https协议<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/browser-ss_cli-2.jpg\" alt=\"image\"></p>\n<blockquote>\n<ul>\n<li>时间突变的部分是由于ss_cli需要ss_srv将目标服务器的应答信息发送回来。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"4-2-ss-cli与ss-srv通信\"><a href=\"#4-2-ss-cli与ss-srv通信\" class=\"headerlink\" title=\"4.2 ss_cli与ss_srv通信\"></a>4.2 ss_cli与ss_srv通信</h2><p>二者的通信格式是自行定义的,<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/ss_cli-ss_srv.jpg\" alt=\"image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-概述\"><a href=\"#一-概述\" class=\"headerlink\" title=\"一. 概述\"></a>一. 概述</h1><ol>\n<li><p>什么是正向代理?</p>\n<blockquote>\n<ul>\n<li>简单来说就是代理客户端请求的服务器。例如, 浏览器中设置代理翻墙等。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>正向代理的主要问题?</p>\n<blockquote>\n<ul>\n<li>代理服务器需要知道客户的目标服务器, 例如: 客户一会请求<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a>, 一会请求<a href=\"http://www.taobao.com\" target=\"_blank\" rel=\"noopener\">www.taobao.com</a>, 代理服务器如何获取目标服务器信息。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>正向代理问题的解决方案?</p>\n<blockquote>\n<ul>\n<li>客户端按照某种事先约定的协议通知代理服务器, 例如sock5协议</li>\n<li>代理服务器能够直接从客户端与服务端交互的上层数据包(tcp之上)获取目标服务器信息。例如: 客户端与目标服务器按照http协议通信, 代理服务器可以直接从数据包中解析目标服务器。这种情况不适用与客户端与目标服务器加密通信的情况, 例如https。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"二-socks5\"><a href=\"#二-socks5\" class=\"headerlink\" title=\"二. socks5\"></a>二. socks5</h1><h2 id=\"2-1-socks5基本流程\"><a href=\"#2-1-socks5基本流程\" class=\"headerlink\" title=\"2.1 socks5基本流程\"></a>2.1 socks5基本流程</h2><p>sock5通信的基本流程图如下,<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/sock5/socks5%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.png\" alt=\"image\"></p>\n<ol>\n<li>如果不需要认证, 第三步和第四步则不需要。</li>\n</ol>\n<h2 id=\"2-2-socks5总结\"><a href=\"#2-2-socks5总结\" class=\"headerlink\" title=\"2.2 socks5总结\"></a>2.2 socks5总结</h2><ol>\n<li>socks5主要完成目标地址传递的功能<blockquote>\n<ul>\n<li>浏览器与sock5服务器完成tcp握手</li>\n<li>浏览器将目标地址通过socks5协议发送给socks5服务器</li>\n<li>socks5服务器与目标地址完成tcp握手</li>\n<li>浏览器将请求数据发送给socks5服务器, 由其进行转发, 此时可以只做4层tcp代理</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"三-shadowsocks原理\"><a href=\"#三-shadowsocks原理\" class=\"headerlink\" title=\"三. shadowsocks原理\"></a>三. shadowsocks原理</h1><p>shadowsocks信息交换的基本结构图如下, ss_cli代表shadowsocks客户端, ss_srv代表shadowsocks服务端,<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/shadowsocks%E4%BB%A3%E7%90%86%E7%BB%93%E6%9E%84%E5%9B%BE.png\" alt=\"image\"></p>\n<h2 id=\"3-1-第一阶段\"><a href=\"#3-1-第一阶段\" class=\"headerlink\" title=\"3.1 第一阶段\"></a>3.1 第一阶段</h2><ol>\n<li>客户端与ss_cli建立tcp连接</li>\n<li>客户端与ss_cli协商sock认证参数, ss_cli给与响应, 默认不进行认证</li>\n<li>客户端将目标地址发送给ss_cli, ss_cli给与响应, 默认返回成功</li>\n</ol>\n<h2 id=\"3-2-第二阶段\"><a href=\"#3-2-第二阶段\" class=\"headerlink\" title=\"3.2 第二阶段\"></a>3.2 第二阶段</h2><ol start=\"4\">\n<li>ss_cli与ss_srv建立tcp连接</li>\n<li>ss_cli将客户端发送的目标地址发送给ss_srv, 此时按照ss_cli与ss_srv协商好的数据包格式, 并不需要使用sock协议, 同时还会发送加密解密需要的随机数</li>\n<li>ss_srv与目标地址建立tcp连接</li>\n</ol>\n<h2 id=\"3-3-第三阶段\"><a href=\"#3-3-第三阶段\" class=\"headerlink\" title=\"3.3 第三阶段\"></a>3.3 第三阶段</h2><ol start=\"7\">\n<li>客户端向ss_cli发送tcp数据包</li>\n<li>ss_cli将数据包稍作处理, 计算长度, 计算哈希值, 并将这些信息一并发送给ss_srv, 此时的数据包格式是ss_cli与ss_srv约定好的</li>\n<li>ss_srv受到数据后, 解析后发送给目标服务器</li>\n</ol>\n<h2 id=\"3-4-第四阶段\"><a href=\"#3-4-第四阶段\" class=\"headerlink\" title=\"3.4 第四阶段\"></a>3.4 第四阶段</h2><ol start=\"10\">\n<li>ss_srv收到目标服务器返回的数据后, 将数据按约定好的格式转发给ss_cli</li>\n<li>ss_cli受到数据后, 解析转发给客户</li>\n</ol>\n<h2 id=\"3-5-总结\"><a href=\"#3-5-总结\" class=\"headerlink\" title=\"3.5 总结\"></a>3.5 总结</h2><ol>\n<li>通过sock5协议, ss_cli可以知道客户端的目标服务器地址</li>\n<li>ss_cli与ss_srv可以自行定义协议, 核心是需要将客户端的目标服务器地址以及解密需要的随机变量发送给ss_srv</li>\n<li>ss_cli, ss_srv不需要也无法知道客户端与目标服务器的具体通信信息。</li>\n<li>ss_cli, ss_srv后期是tcp的代理, 不管是https还是http对其而言都是一样的。</li>\n</ol>\n<h2 id=\"3-6-参考\"><a href=\"#3-6-参考\" class=\"headerlink\" title=\"3.6 参考\"></a>3.6 参考</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/cbea16a096fb\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/cbea16a096fb</a></li>\n</ul>\n<h1 id=\"四-抓包分析\"><a href=\"#四-抓包分析\" class=\"headerlink\" title=\"四. 抓包分析\"></a>四. 抓包分析</h1><ol>\n<li>ss_cli: 127.0.0.1:1080</li>\n<li>ss_srv: 204.48.26.173:21500</li>\n<li>浏览器与ss_cli同属于一个主机, 通信时延低。ss_cli与ss_srv需要通过网络传输, 时延高。数据包分析中可以利用这一点。</li>\n</ol>\n<h2 id=\"4-1-浏览器与ss-cli通信\"><a href=\"#4-1-浏览器与ss-cli通信\" class=\"headerlink\" title=\"4.1 浏览器与ss_cli通信\"></a>4.1 浏览器与ss_cli通信</h2><ol>\n<li><p>tcp握手, 浏览器通过socks5发送目标服务器地址<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/browser-ss_cli-1.jpg\" alt=\"image\"></p>\n</li>\n<li><p>浏览器与ss_cli之间后续的通信, 此处是https协议<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/browser-ss_cli-2.jpg\" alt=\"image\"></p>\n<blockquote>\n<ul>\n<li>时间突变的部分是由于ss_cli需要ss_srv将目标服务器的应答信息发送回来。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"4-2-ss-cli与ss-srv通信\"><a href=\"#4-2-ss-cli与ss-srv通信\" class=\"headerlink\" title=\"4.2 ss_cli与ss_srv通信\"></a>4.2 ss_cli与ss_srv通信</h2><p>二者的通信格式是自行定义的,<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/ss_cli-ss_srv.jpg\" alt=\"image\"></p>\n"},{"title":"nginx 配置存储概述","date":"2018-11-13T07:56:40.000Z","_content":"\n# 一. 基础\nnginx的一般配置如下所示:\n```cpp\n...\nwork_porcess: xx;\nevents{\n    ...\n    work_connections xx;\n}\nhttp{\n    //第一级别的配置块\n    ...\n    upstream xx{\n        //第二级别的配置块\n        ...\n    }\n    server{\n        //第二级别的配置块\n        ...\n        location /{\n            //第三级别的配置块\n            ....\n            location /{\n                //第四级别的配置块\n                ...\n            }\n        }\n    }\n    server{\n        //第二级别的配置块\n        ...\n    }\n}\n```\n1. 如何存储上述结构?\n> - 由于配置中存在嵌套, 可以使用树型结构进行存储\n2. 如何使用上述配置?\n> - 从上到下, 按层查找\n3. 配置解析核心?\n> - 对于块中嵌套块的模块存储(例如http), 核心在于要以块为单位进行分析。例如, 最外层为http块, 属于一级配置; http中的server或者upstream属于二级配置块; server中的location属于三级配置块; 依次类推, 每块都看作一个完整的结构。\n> - 由于存在块中嵌套, 内层的块有些配置需要从外层块继承, 有些配置不能继承, 故而每块的配置需要按区域划分。\n> - 二级配置块需要放到一级配置块中, 这样才能从一级配置块中找到所有的二级配置块, 以此类推。\n> - 由于配置解析是依靠各个模块完成的, 故而配置存储的树形结构中需要以模块为单位存储(也就是每个模块具有自己的存储结构, 可以放在树形结构的某个位置上)。\n\n\n# 二. nginx配置存储结构\n由于结构比较复杂, 此处分为2部分。\n1. 第一部分配置存储结构图\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A81.png)\n\n> - 图中只给出了http中的server配置, 没有画出server中的location以及location嵌套的location\n\n2. 第二部分配置存储结构图\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A82.png)\n\n\n# 三. http块存储结构\n对于http的配置存储, 应当以块为单位进行分析,\n1. 总体而言, http块按树形存储\n2. 大体上可以分为3个级别(不考虑location中的location), 每个级别的配置分为3块(main块, srv块, loc块)\n3. 第二级别的配置继承第一级别的main块配置\n4. 第三级别的配置继承第二级别的main块以及srv块配置\n5. 第四及其后续级别的配置继承前一级的main块, srv块配置\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A8-http%E6%A6%82%E5%86%B5.png)\n\n\n# 四. nginx upstream块存储\n1. upstream的配置与server类似, 属于第二级别配置块\n2. upstream的配置块中main块从第一级别的main块继承\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A83-upstream.png)\n\n\n# 五. nginx proxy存储\n1. proxy_pass出现在location块中, 属于第三或者之后级别的配置。\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A84-proxy.png)\n\n\n\n","source":"_posts/nginx-config-store-summarize.md","raw":"---\ntitle: nginx 配置存储概述\ndate: 2018-11-13 15:56:40\ncategories:\n- nginx\n- 配置解析\ntags:\n- nginx\n- 配置存储\n---\n\n# 一. 基础\nnginx的一般配置如下所示:\n```cpp\n...\nwork_porcess: xx;\nevents{\n    ...\n    work_connections xx;\n}\nhttp{\n    //第一级别的配置块\n    ...\n    upstream xx{\n        //第二级别的配置块\n        ...\n    }\n    server{\n        //第二级别的配置块\n        ...\n        location /{\n            //第三级别的配置块\n            ....\n            location /{\n                //第四级别的配置块\n                ...\n            }\n        }\n    }\n    server{\n        //第二级别的配置块\n        ...\n    }\n}\n```\n1. 如何存储上述结构?\n> - 由于配置中存在嵌套, 可以使用树型结构进行存储\n2. 如何使用上述配置?\n> - 从上到下, 按层查找\n3. 配置解析核心?\n> - 对于块中嵌套块的模块存储(例如http), 核心在于要以块为单位进行分析。例如, 最外层为http块, 属于一级配置; http中的server或者upstream属于二级配置块; server中的location属于三级配置块; 依次类推, 每块都看作一个完整的结构。\n> - 由于存在块中嵌套, 内层的块有些配置需要从外层块继承, 有些配置不能继承, 故而每块的配置需要按区域划分。\n> - 二级配置块需要放到一级配置块中, 这样才能从一级配置块中找到所有的二级配置块, 以此类推。\n> - 由于配置解析是依靠各个模块完成的, 故而配置存储的树形结构中需要以模块为单位存储(也就是每个模块具有自己的存储结构, 可以放在树形结构的某个位置上)。\n\n\n# 二. nginx配置存储结构\n由于结构比较复杂, 此处分为2部分。\n1. 第一部分配置存储结构图\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A81.png)\n\n> - 图中只给出了http中的server配置, 没有画出server中的location以及location嵌套的location\n\n2. 第二部分配置存储结构图\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A82.png)\n\n\n# 三. http块存储结构\n对于http的配置存储, 应当以块为单位进行分析,\n1. 总体而言, http块按树形存储\n2. 大体上可以分为3个级别(不考虑location中的location), 每个级别的配置分为3块(main块, srv块, loc块)\n3. 第二级别的配置继承第一级别的main块配置\n4. 第三级别的配置继承第二级别的main块以及srv块配置\n5. 第四及其后续级别的配置继承前一级的main块, srv块配置\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A8-http%E6%A6%82%E5%86%B5.png)\n\n\n# 四. nginx upstream块存储\n1. upstream的配置与server类似, 属于第二级别配置块\n2. upstream的配置块中main块从第一级别的main块继承\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A83-upstream.png)\n\n\n# 五. nginx proxy存储\n1. proxy_pass出现在location块中, 属于第三或者之后级别的配置。\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A84-proxy.png)\n\n\n\n","slug":"nginx-config-store-summarize","published":1,"updated":"2019-05-27T01:49:32.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw5qxkqc0008txs6at3dqh2z","content":"<h1 id=\"一-基础\"><a href=\"#一-基础\" class=\"headerlink\" title=\"一. 基础\"></a>一. 基础</h1><p>nginx的一般配置如下所示:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">work_porcess: xx;</span><br><span class=\"line\">events&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    work_connections xx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http&#123;</span><br><span class=\"line\">    <span class=\"comment\">//第一级别的配置块</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    upstream xx&#123;</span><br><span class=\"line\">        <span class=\"comment\">//第二级别的配置块</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">        <span class=\"comment\">//第二级别的配置块</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        location /&#123;</span><br><span class=\"line\">            <span class=\"comment\">//第三级别的配置块</span></span><br><span class=\"line\">            ....</span><br><span class=\"line\">            location /&#123;</span><br><span class=\"line\">                <span class=\"comment\">//第四级别的配置块</span></span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">        <span class=\"comment\">//第二级别的配置块</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>如何存储上述结构?<blockquote>\n<ul>\n<li>由于配置中存在嵌套, 可以使用树型结构进行存储</li>\n</ul>\n</blockquote>\n</li>\n<li>如何使用上述配置?<blockquote>\n<ul>\n<li>从上到下, 按层查找</li>\n</ul>\n</blockquote>\n</li>\n<li>配置解析核心?<blockquote>\n<ul>\n<li>对于块中嵌套块的模块存储(例如http), 核心在于要以块为单位进行分析。例如, 最外层为http块, 属于一级配置; http中的server或者upstream属于二级配置块; server中的location属于三级配置块; 依次类推, 每块都看作一个完整的结构。</li>\n<li>由于存在块中嵌套, 内层的块有些配置需要从外层块继承, 有些配置不能继承, 故而每块的配置需要按区域划分。</li>\n<li>二级配置块需要放到一级配置块中, 这样才能从一级配置块中找到所有的二级配置块, 以此类推。</li>\n<li>由于配置解析是依靠各个模块完成的, 故而配置存储的树形结构中需要以模块为单位存储(也就是每个模块具有自己的存储结构, 可以放在树形结构的某个位置上)。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"二-nginx配置存储结构\"><a href=\"#二-nginx配置存储结构\" class=\"headerlink\" title=\"二. nginx配置存储结构\"></a>二. nginx配置存储结构</h1><p>由于结构比较复杂, 此处分为2部分。</p>\n<ol>\n<li>第一部分配置存储结构图<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A81.png\" alt=\"image\"></li>\n</ol>\n<blockquote>\n<ul>\n<li>图中只给出了http中的server配置, 没有画出server中的location以及location嵌套的location</li>\n</ul>\n</blockquote>\n<ol start=\"2\">\n<li>第二部分配置存储结构图<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A82.png\" alt=\"image\"></li>\n</ol>\n<h1 id=\"三-http块存储结构\"><a href=\"#三-http块存储结构\" class=\"headerlink\" title=\"三. http块存储结构\"></a>三. http块存储结构</h1><p>对于http的配置存储, 应当以块为单位进行分析,</p>\n<ol>\n<li>总体而言, http块按树形存储</li>\n<li>大体上可以分为3个级别(不考虑location中的location), 每个级别的配置分为3块(main块, srv块, loc块)</li>\n<li>第二级别的配置继承第一级别的main块配置</li>\n<li>第三级别的配置继承第二级别的main块以及srv块配置</li>\n<li>第四及其后续级别的配置继承前一级的main块, srv块配置<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A8-http%E6%A6%82%E5%86%B5.png\" alt=\"image\"></li>\n</ol>\n<h1 id=\"四-nginx-upstream块存储\"><a href=\"#四-nginx-upstream块存储\" class=\"headerlink\" title=\"四. nginx upstream块存储\"></a>四. nginx upstream块存储</h1><ol>\n<li>upstream的配置与server类似, 属于第二级别配置块</li>\n<li>upstream的配置块中main块从第一级别的main块继承<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A83-upstream.png\" alt=\"image\"></li>\n</ol>\n<h1 id=\"五-nginx-proxy存储\"><a href=\"#五-nginx-proxy存储\" class=\"headerlink\" title=\"五. nginx proxy存储\"></a>五. nginx proxy存储</h1><ol>\n<li>proxy_pass出现在location块中, 属于第三或者之后级别的配置。<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A84-proxy.png\" alt=\"image\"></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-基础\"><a href=\"#一-基础\" class=\"headerlink\" title=\"一. 基础\"></a>一. 基础</h1><p>nginx的一般配置如下所示:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">work_porcess: xx;</span><br><span class=\"line\">events&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    work_connections xx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http&#123;</span><br><span class=\"line\">    <span class=\"comment\">//第一级别的配置块</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    upstream xx&#123;</span><br><span class=\"line\">        <span class=\"comment\">//第二级别的配置块</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">        <span class=\"comment\">//第二级别的配置块</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        location /&#123;</span><br><span class=\"line\">            <span class=\"comment\">//第三级别的配置块</span></span><br><span class=\"line\">            ....</span><br><span class=\"line\">            location /&#123;</span><br><span class=\"line\">                <span class=\"comment\">//第四级别的配置块</span></span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">        <span class=\"comment\">//第二级别的配置块</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>如何存储上述结构?<blockquote>\n<ul>\n<li>由于配置中存在嵌套, 可以使用树型结构进行存储</li>\n</ul>\n</blockquote>\n</li>\n<li>如何使用上述配置?<blockquote>\n<ul>\n<li>从上到下, 按层查找</li>\n</ul>\n</blockquote>\n</li>\n<li>配置解析核心?<blockquote>\n<ul>\n<li>对于块中嵌套块的模块存储(例如http), 核心在于要以块为单位进行分析。例如, 最外层为http块, 属于一级配置; http中的server或者upstream属于二级配置块; server中的location属于三级配置块; 依次类推, 每块都看作一个完整的结构。</li>\n<li>由于存在块中嵌套, 内层的块有些配置需要从外层块继承, 有些配置不能继承, 故而每块的配置需要按区域划分。</li>\n<li>二级配置块需要放到一级配置块中, 这样才能从一级配置块中找到所有的二级配置块, 以此类推。</li>\n<li>由于配置解析是依靠各个模块完成的, 故而配置存储的树形结构中需要以模块为单位存储(也就是每个模块具有自己的存储结构, 可以放在树形结构的某个位置上)。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"二-nginx配置存储结构\"><a href=\"#二-nginx配置存储结构\" class=\"headerlink\" title=\"二. nginx配置存储结构\"></a>二. nginx配置存储结构</h1><p>由于结构比较复杂, 此处分为2部分。</p>\n<ol>\n<li>第一部分配置存储结构图<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A81.png\" alt=\"image\"></li>\n</ol>\n<blockquote>\n<ul>\n<li>图中只给出了http中的server配置, 没有画出server中的location以及location嵌套的location</li>\n</ul>\n</blockquote>\n<ol start=\"2\">\n<li>第二部分配置存储结构图<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A82.png\" alt=\"image\"></li>\n</ol>\n<h1 id=\"三-http块存储结构\"><a href=\"#三-http块存储结构\" class=\"headerlink\" title=\"三. http块存储结构\"></a>三. http块存储结构</h1><p>对于http的配置存储, 应当以块为单位进行分析,</p>\n<ol>\n<li>总体而言, http块按树形存储</li>\n<li>大体上可以分为3个级别(不考虑location中的location), 每个级别的配置分为3块(main块, srv块, loc块)</li>\n<li>第二级别的配置继承第一级别的main块配置</li>\n<li>第三级别的配置继承第二级别的main块以及srv块配置</li>\n<li>第四及其后续级别的配置继承前一级的main块, srv块配置<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A8-http%E6%A6%82%E5%86%B5.png\" alt=\"image\"></li>\n</ol>\n<h1 id=\"四-nginx-upstream块存储\"><a href=\"#四-nginx-upstream块存储\" class=\"headerlink\" title=\"四. nginx upstream块存储\"></a>四. nginx upstream块存储</h1><ol>\n<li>upstream的配置与server类似, 属于第二级别配置块</li>\n<li>upstream的配置块中main块从第一级别的main块继承<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A83-upstream.png\" alt=\"image\"></li>\n</ol>\n<h1 id=\"五-nginx-proxy存储\"><a href=\"#五-nginx-proxy存储\" class=\"headerlink\" title=\"五. nginx proxy存储\"></a>五. nginx proxy存储</h1><ol>\n<li>proxy_pass出现在location块中, 属于第三或者之后级别的配置。<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A84-proxy.png\" alt=\"image\"></li>\n</ol>\n"},{"title":"nginx listen指令处理流程","date":"2018-11-12T08:26:59.000Z","_content":"# 一. 基础\n> - nginx源码采用1.15.5\n> - 后续部分仅讨论http中的listen配置解析以及优化流程\n\n## 1.1 概述\n1. 假设nginx http模块的配置如下\n```cpp\nhttp{\n    server {\n        listen 127.0.0.1:8000;\n        server_name www.baidu.com;\n        root html;\n        location /{\n            index index.html;\n        }\n    }\n    server {\n        listen 10.0.1.1:8000;\n        server_name www.news.baidu.com;\n        root html;\n        location /{\n            index index.html;\n        }\n    }\n    server {\n        listen 8000; #相当于0.0.0.0:8000\n        server_name www.tieba.baidu.com;\n        root html;\n        location /{\n            index index.html;\n        }\n    }\n    server {\n        listen 127.0.0.1:8000;\n        server_name www.zhidao.baidu.com;\n        location / {\n            root html;\n            index index.html;\n        }\n    }\n}\n```\n2. 端口, 地址, server的关系\n> - 端口是指一个端口号, 例如上面的8000端口\n> - 地址是ip+port, 例如127.0.0.1:8000, 10.0.1.1:8000, 0.0.0.0:8000, listen后配置的是一个地址。\n> - 每个地址可以放到多个server中, 例如上面的127.0.0.1:8000\n\n总而言之, 一个端口可以有多个地址, 每个地址可以有多个server\n\n## 1.2 存在的问题\n1. 是否需要在读取完http块中所有的server才能建立监听套接字, 绑定监听地址?\n> - 是的, 因为允许配置通配地址, 故而必须将http块中的server全部读取完后, 才能知道如何建立监听套接字。\n\n2. 一个端口可以对应多个地址, 如何建立监听套接字, 如何绑定地址?\n> - 通常情况下, 每个地址只能绑定一次(只考虑tcp协议), 这种情况下, 我们只能选择部分地址创建监听套接字, 绑定监听地址。\n> - 当配置中存在通配地址(0.0.0.0:port)时, 只需要创建一个监听套接字, 绑定这个通配地址即可, 但需要能够依据该监听套接字找到该端口配置的其他地址, 这样当客户端发送请求时, 可以根据客户端请求的地址, 找到对应地址下的相关配置。\n> - 当配置中不存在通配地址时, 需要对每个地址都创建一个监听套接字, 绑定监听地址。\n\n3. 一个地址多个server的情况下, 如何快速找到客户端请求的server?\n> - 比较合适的方案是通过hash表。\n> - 为了快速找到客户端请求的server, nginx以server_name为key, 每个server块的配置(可以理解为一个指针, 该指针指向整个server块的配置)为value, 放入到哈希表。\n> - 由于server_name中可以出现正则匹配等情况, nginx将server_name具体分为4类进行分别处理(www.baidu.com, \\*baidu.com, www.baidu\\*, ~*baidu)。\n\n## 1.3 nginx listen解析的流程\n总体而言分为2步，\n1. 将所有http模块内的配置解析完成, 将listen的相关配置暂存(主要存储监听端口以及监听地址)。\n2. 根据上一步暂存的监听端口以及监听地址, 创建监听套接字, 绑定监听地址\n\n\n# 二. 配置解析\nnginx http块解析完成后, 会存储配置文件中配置的监听端口以及监听地址, 其核心结构图如下,\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A85-%E7%9B%91%E5%90%AC%E7%AB%AF%E5%8F%A3.png)\n\n总体而言, 结构可以分为3级, 端口->地址->server\n\n## 2.1 源码\nlisten的处理流程:\n> - ngx_http_core_listen: 读取配置文件配置\n> - ngx_http_add_listen: 查看之前是否出现过当前监听的端口, 没有则新建, 否则追加\n> - ngx_http_add_address: 查看之前该端口下是否监听过该地址, 没有则新建, 否则追加。\n> - ngx_http_add_server: 查看server之前是否出现过, 没有则新建, 否则报错(重复定义)。\n\n# 三. 创建监听套接字\nnginx最终创建的监听套接字及其相关的结构图如下,\n![image](https://picturestore.nos-eastchina1.126.net/nginx/ngx%E7%9B%91%E5%90%AC%E7%BB%93%E6%9E%84%E5%9B%BE.png)\n> - 每个ngx_listening_t结构对应一个监听套接字, 绑定一个监听地址\n> - 每个ngx_listening_t结构后面需要存储地址信息, 地址可能不止一个,  因为这个监听套接字可能绑定的是通配地址, 这个端口下的其他地址都会放在这个监听套接字下。例如, 1.1节的配置中, 只会创建一个ngx_listening_t结构, 其他地址的配置都会放到这个通配地址下。\n> - 每个监听地址可能对应多个域名(配置文件中的server_name), 需要将这些域名放到哈希表中, 以供后续使用\n\n总体而言, 结构分为3级, 监听套接字->监听地址->server\n\n## 3.1 源码\n读取完http块后, 需要创建监听套接字绑定监听地址, 处理函数ngx_http_optimize_servers, 该函数的处理流程:\n> - 遍历所有监听端口, 针对每个监听端口, 执行以下3步\n> - 对该端口下所有监听地址排序(listen后配置bind的放在前面, 通配地址放在后面)\n> - 遍历该端口下的所有地址, 将每个地址配置的所有server, 放到该地址的哈希表中。\n> - 为该端口建立监听套接字, 绑定监听地址。\n\n\n# 四. 监听套接字的使用\n1. 假设此处我们使用epoll作为事件处理模块\n2. epoll在增加事件时, 用户可以使用epoll_event中的data字段, 当事件发生时, 该字段也会带回。\n3. nginx中的epoll_event指向的是ngx_connection_t结构, 事件发生时, 调用ngx_connection_t结构中的读写事件, 负责具体处理事件, 参见下图。\n```cpp\n//c is ngx_connection_t\nrev = c->read;\nrev->hadler(rev);\nwev = c->write;\nwev->handler(wev);\n```\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%20epoll%E6%A1%86%E6%9E%B6%E5%9B%BE.png)\n\n4. 每个监听套接字对应一个ngx_connection_t, 该结构的读事件回调函数为ngx_event_accept, 当用户发起tcp握手时, 通过ngx_event_accept接受客户端的连接请求。\n> - ngx_event_accept会接受客户端请求, 初始化一个新的ngx_connection_t结构, 并将其加入到epoll中进行监听, 最后会调用ngx_connection_t对应的ngx_listening_t的处理函数(http块对应ngx_http_init_connection, mail块ngx_mail_init_connection, stream块对应ngx_stream_init_connection)\n\n# 五. 总结\n1. nginx在读取listen相关的配置时, 将结构分为3级, 端口->地址->server, 各级都是一对多的关系。\n2. nginx在创建监听套接字时, 将结构分为3级, 监听套接字->地址->server, 各级都是一对多的关系。\n\n","source":"_posts/nginx-listen-socket.md","raw":"---\ntitle: nginx listen指令处理流程\ndate: 2018-11-12 16:26:59\ncategories:\n- nginx\n- 配置解析\ntags:\n- epoll\n- nginx\n- 网络编程\n---\n# 一. 基础\n> - nginx源码采用1.15.5\n> - 后续部分仅讨论http中的listen配置解析以及优化流程\n\n## 1.1 概述\n1. 假设nginx http模块的配置如下\n```cpp\nhttp{\n    server {\n        listen 127.0.0.1:8000;\n        server_name www.baidu.com;\n        root html;\n        location /{\n            index index.html;\n        }\n    }\n    server {\n        listen 10.0.1.1:8000;\n        server_name www.news.baidu.com;\n        root html;\n        location /{\n            index index.html;\n        }\n    }\n    server {\n        listen 8000; #相当于0.0.0.0:8000\n        server_name www.tieba.baidu.com;\n        root html;\n        location /{\n            index index.html;\n        }\n    }\n    server {\n        listen 127.0.0.1:8000;\n        server_name www.zhidao.baidu.com;\n        location / {\n            root html;\n            index index.html;\n        }\n    }\n}\n```\n2. 端口, 地址, server的关系\n> - 端口是指一个端口号, 例如上面的8000端口\n> - 地址是ip+port, 例如127.0.0.1:8000, 10.0.1.1:8000, 0.0.0.0:8000, listen后配置的是一个地址。\n> - 每个地址可以放到多个server中, 例如上面的127.0.0.1:8000\n\n总而言之, 一个端口可以有多个地址, 每个地址可以有多个server\n\n## 1.2 存在的问题\n1. 是否需要在读取完http块中所有的server才能建立监听套接字, 绑定监听地址?\n> - 是的, 因为允许配置通配地址, 故而必须将http块中的server全部读取完后, 才能知道如何建立监听套接字。\n\n2. 一个端口可以对应多个地址, 如何建立监听套接字, 如何绑定地址?\n> - 通常情况下, 每个地址只能绑定一次(只考虑tcp协议), 这种情况下, 我们只能选择部分地址创建监听套接字, 绑定监听地址。\n> - 当配置中存在通配地址(0.0.0.0:port)时, 只需要创建一个监听套接字, 绑定这个通配地址即可, 但需要能够依据该监听套接字找到该端口配置的其他地址, 这样当客户端发送请求时, 可以根据客户端请求的地址, 找到对应地址下的相关配置。\n> - 当配置中不存在通配地址时, 需要对每个地址都创建一个监听套接字, 绑定监听地址。\n\n3. 一个地址多个server的情况下, 如何快速找到客户端请求的server?\n> - 比较合适的方案是通过hash表。\n> - 为了快速找到客户端请求的server, nginx以server_name为key, 每个server块的配置(可以理解为一个指针, 该指针指向整个server块的配置)为value, 放入到哈希表。\n> - 由于server_name中可以出现正则匹配等情况, nginx将server_name具体分为4类进行分别处理(www.baidu.com, \\*baidu.com, www.baidu\\*, ~*baidu)。\n\n## 1.3 nginx listen解析的流程\n总体而言分为2步，\n1. 将所有http模块内的配置解析完成, 将listen的相关配置暂存(主要存储监听端口以及监听地址)。\n2. 根据上一步暂存的监听端口以及监听地址, 创建监听套接字, 绑定监听地址\n\n\n# 二. 配置解析\nnginx http块解析完成后, 会存储配置文件中配置的监听端口以及监听地址, 其核心结构图如下,\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A85-%E7%9B%91%E5%90%AC%E7%AB%AF%E5%8F%A3.png)\n\n总体而言, 结构可以分为3级, 端口->地址->server\n\n## 2.1 源码\nlisten的处理流程:\n> - ngx_http_core_listen: 读取配置文件配置\n> - ngx_http_add_listen: 查看之前是否出现过当前监听的端口, 没有则新建, 否则追加\n> - ngx_http_add_address: 查看之前该端口下是否监听过该地址, 没有则新建, 否则追加。\n> - ngx_http_add_server: 查看server之前是否出现过, 没有则新建, 否则报错(重复定义)。\n\n# 三. 创建监听套接字\nnginx最终创建的监听套接字及其相关的结构图如下,\n![image](https://picturestore.nos-eastchina1.126.net/nginx/ngx%E7%9B%91%E5%90%AC%E7%BB%93%E6%9E%84%E5%9B%BE.png)\n> - 每个ngx_listening_t结构对应一个监听套接字, 绑定一个监听地址\n> - 每个ngx_listening_t结构后面需要存储地址信息, 地址可能不止一个,  因为这个监听套接字可能绑定的是通配地址, 这个端口下的其他地址都会放在这个监听套接字下。例如, 1.1节的配置中, 只会创建一个ngx_listening_t结构, 其他地址的配置都会放到这个通配地址下。\n> - 每个监听地址可能对应多个域名(配置文件中的server_name), 需要将这些域名放到哈希表中, 以供后续使用\n\n总体而言, 结构分为3级, 监听套接字->监听地址->server\n\n## 3.1 源码\n读取完http块后, 需要创建监听套接字绑定监听地址, 处理函数ngx_http_optimize_servers, 该函数的处理流程:\n> - 遍历所有监听端口, 针对每个监听端口, 执行以下3步\n> - 对该端口下所有监听地址排序(listen后配置bind的放在前面, 通配地址放在后面)\n> - 遍历该端口下的所有地址, 将每个地址配置的所有server, 放到该地址的哈希表中。\n> - 为该端口建立监听套接字, 绑定监听地址。\n\n\n# 四. 监听套接字的使用\n1. 假设此处我们使用epoll作为事件处理模块\n2. epoll在增加事件时, 用户可以使用epoll_event中的data字段, 当事件发生时, 该字段也会带回。\n3. nginx中的epoll_event指向的是ngx_connection_t结构, 事件发生时, 调用ngx_connection_t结构中的读写事件, 负责具体处理事件, 参见下图。\n```cpp\n//c is ngx_connection_t\nrev = c->read;\nrev->hadler(rev);\nwev = c->write;\nwev->handler(wev);\n```\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%20epoll%E6%A1%86%E6%9E%B6%E5%9B%BE.png)\n\n4. 每个监听套接字对应一个ngx_connection_t, 该结构的读事件回调函数为ngx_event_accept, 当用户发起tcp握手时, 通过ngx_event_accept接受客户端的连接请求。\n> - ngx_event_accept会接受客户端请求, 初始化一个新的ngx_connection_t结构, 并将其加入到epoll中进行监听, 最后会调用ngx_connection_t对应的ngx_listening_t的处理函数(http块对应ngx_http_init_connection, mail块ngx_mail_init_connection, stream块对应ngx_stream_init_connection)\n\n# 五. 总结\n1. nginx在读取listen相关的配置时, 将结构分为3级, 端口->地址->server, 各级都是一对多的关系。\n2. nginx在创建监听套接字时, 将结构分为3级, 监听套接字->地址->server, 各级都是一对多的关系。\n\n","slug":"nginx-listen-socket","published":1,"updated":"2019-05-27T01:49:32.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw5qxkqd000btxs6o3329vyr","content":"<h1 id=\"一-基础\"><a href=\"#一-基础\" class=\"headerlink\" title=\"一. 基础\"></a>一. 基础</h1><blockquote>\n<ul>\n<li>nginx源码采用1.15.5</li>\n<li>后续部分仅讨论http中的listen配置解析以及优化流程</li>\n</ul>\n</blockquote>\n<h2 id=\"1-1-概述\"><a href=\"#1-1-概述\" class=\"headerlink\" title=\"1.1 概述\"></a>1.1 概述</h2><ol>\n<li><p>假设nginx http模块的配置如下</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8000</span>;</span><br><span class=\"line\">        server_name www.baidu.com;</span><br><span class=\"line\">        root html;</span><br><span class=\"line\">        location /&#123;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen <span class=\"number\">10.0</span><span class=\"number\">.1</span><span class=\"number\">.1</span>:<span class=\"number\">8000</span>;</span><br><span class=\"line\">        server_name www.news.baidu.com;</span><br><span class=\"line\">        root html;</span><br><span class=\"line\">        location /&#123;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen <span class=\"number\">8000</span>; #相当于<span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>:<span class=\"number\">8000</span></span><br><span class=\"line\">        server_name www.tieba.baidu.com;</span><br><span class=\"line\">        root html;</span><br><span class=\"line\">        location /&#123;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8000</span>;</span><br><span class=\"line\">        server_name www.zhidao.baidu.com;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root html;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>端口, 地址, server的关系</p>\n<blockquote>\n<ul>\n<li>端口是指一个端口号, 例如上面的8000端口</li>\n<li>地址是ip+port, 例如127.0.0.1:8000, 10.0.1.1:8000, 0.0.0.0:8000, listen后配置的是一个地址。</li>\n<li>每个地址可以放到多个server中, 例如上面的127.0.0.1:8000</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<p>总而言之, 一个端口可以有多个地址, 每个地址可以有多个server</p>\n<h2 id=\"1-2-存在的问题\"><a href=\"#1-2-存在的问题\" class=\"headerlink\" title=\"1.2 存在的问题\"></a>1.2 存在的问题</h2><ol>\n<li><p>是否需要在读取完http块中所有的server才能建立监听套接字, 绑定监听地址?</p>\n<blockquote>\n<ul>\n<li>是的, 因为允许配置通配地址, 故而必须将http块中的server全部读取完后, 才能知道如何建立监听套接字。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>一个端口可以对应多个地址, 如何建立监听套接字, 如何绑定地址?</p>\n<blockquote>\n<ul>\n<li>通常情况下, 每个地址只能绑定一次(只考虑tcp协议), 这种情况下, 我们只能选择部分地址创建监听套接字, 绑定监听地址。</li>\n<li>当配置中存在通配地址(0.0.0.0:port)时, 只需要创建一个监听套接字, 绑定这个通配地址即可, 但需要能够依据该监听套接字找到该端口配置的其他地址, 这样当客户端发送请求时, 可以根据客户端请求的地址, 找到对应地址下的相关配置。</li>\n<li>当配置中不存在通配地址时, 需要对每个地址都创建一个监听套接字, 绑定监听地址。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>一个地址多个server的情况下, 如何快速找到客户端请求的server?</p>\n<blockquote>\n<ul>\n<li>比较合适的方案是通过hash表。</li>\n<li>为了快速找到客户端请求的server, nginx以server_name为key, 每个server块的配置(可以理解为一个指针, 该指针指向整个server块的配置)为value, 放入到哈希表。</li>\n<li>由于server_name中可以出现正则匹配等情况, nginx将server_name具体分为4类进行分别处理(<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a>, *baidu.com, <a href=\"http://www.baidu\\*\" target=\"_blank\" rel=\"noopener\">www.baidu\\*</a>, ~*baidu)。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"1-3-nginx-listen解析的流程\"><a href=\"#1-3-nginx-listen解析的流程\" class=\"headerlink\" title=\"1.3 nginx listen解析的流程\"></a>1.3 nginx listen解析的流程</h2><p>总体而言分为2步，</p>\n<ol>\n<li>将所有http模块内的配置解析完成, 将listen的相关配置暂存(主要存储监听端口以及监听地址)。</li>\n<li>根据上一步暂存的监听端口以及监听地址, 创建监听套接字, 绑定监听地址</li>\n</ol>\n<h1 id=\"二-配置解析\"><a href=\"#二-配置解析\" class=\"headerlink\" title=\"二. 配置解析\"></a>二. 配置解析</h1><p>nginx http块解析完成后, 会存储配置文件中配置的监听端口以及监听地址, 其核心结构图如下,<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A85-%E7%9B%91%E5%90%AC%E7%AB%AF%E5%8F%A3.png\" alt=\"image\"></p>\n<p>总体而言, 结构可以分为3级, 端口-&gt;地址-&gt;server</p>\n<h2 id=\"2-1-源码\"><a href=\"#2-1-源码\" class=\"headerlink\" title=\"2.1 源码\"></a>2.1 源码</h2><p>listen的处理流程:</p>\n<blockquote>\n<ul>\n<li>ngx_http_core_listen: 读取配置文件配置</li>\n<li>ngx_http_add_listen: 查看之前是否出现过当前监听的端口, 没有则新建, 否则追加</li>\n<li>ngx_http_add_address: 查看之前该端口下是否监听过该地址, 没有则新建, 否则追加。</li>\n<li>ngx_http_add_server: 查看server之前是否出现过, 没有则新建, 否则报错(重复定义)。</li>\n</ul>\n</blockquote>\n<h1 id=\"三-创建监听套接字\"><a href=\"#三-创建监听套接字\" class=\"headerlink\" title=\"三. 创建监听套接字\"></a>三. 创建监听套接字</h1><p>nginx最终创建的监听套接字及其相关的结构图如下,<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/ngx%E7%9B%91%E5%90%AC%E7%BB%93%E6%9E%84%E5%9B%BE.png\" alt=\"image\"></p>\n<blockquote>\n<ul>\n<li>每个ngx_listening_t结构对应一个监听套接字, 绑定一个监听地址</li>\n<li>每个ngx_listening_t结构后面需要存储地址信息, 地址可能不止一个,  因为这个监听套接字可能绑定的是通配地址, 这个端口下的其他地址都会放在这个监听套接字下。例如, 1.1节的配置中, 只会创建一个ngx_listening_t结构, 其他地址的配置都会放到这个通配地址下。</li>\n<li>每个监听地址可能对应多个域名(配置文件中的server_name), 需要将这些域名放到哈希表中, 以供后续使用</li>\n</ul>\n</blockquote>\n<p>总体而言, 结构分为3级, 监听套接字-&gt;监听地址-&gt;server</p>\n<h2 id=\"3-1-源码\"><a href=\"#3-1-源码\" class=\"headerlink\" title=\"3.1 源码\"></a>3.1 源码</h2><p>读取完http块后, 需要创建监听套接字绑定监听地址, 处理函数ngx_http_optimize_servers, 该函数的处理流程:</p>\n<blockquote>\n<ul>\n<li>遍历所有监听端口, 针对每个监听端口, 执行以下3步</li>\n<li>对该端口下所有监听地址排序(listen后配置bind的放在前面, 通配地址放在后面)</li>\n<li>遍历该端口下的所有地址, 将每个地址配置的所有server, 放到该地址的哈希表中。</li>\n<li>为该端口建立监听套接字, 绑定监听地址。</li>\n</ul>\n</blockquote>\n<h1 id=\"四-监听套接字的使用\"><a href=\"#四-监听套接字的使用\" class=\"headerlink\" title=\"四. 监听套接字的使用\"></a>四. 监听套接字的使用</h1><ol>\n<li>假设此处我们使用epoll作为事件处理模块</li>\n<li>epoll在增加事件时, 用户可以使用epoll_event中的data字段, 当事件发生时, 该字段也会带回。</li>\n<li>nginx中的epoll_event指向的是ngx_connection_t结构, 事件发生时, 调用ngx_connection_t结构中的读写事件, 负责具体处理事件, 参见下图。<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//c is ngx_connection_t</span></span><br><span class=\"line\">rev = c-&gt;read;</span><br><span class=\"line\">rev-&gt;hadler(rev);</span><br><span class=\"line\">wev = c-&gt;write;</span><br><span class=\"line\">wev-&gt;handler(wev);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%20epoll%E6%A1%86%E6%9E%B6%E5%9B%BE.png\" alt=\"image\"></p>\n<ol start=\"4\">\n<li>每个监听套接字对应一个ngx_connection_t, 该结构的读事件回调函数为ngx_event_accept, 当用户发起tcp握手时, 通过ngx_event_accept接受客户端的连接请求。<blockquote>\n<ul>\n<li>ngx_event_accept会接受客户端请求, 初始化一个新的ngx_connection_t结构, 并将其加入到epoll中进行监听, 最后会调用ngx_connection_t对应的ngx_listening_t的处理函数(http块对应ngx_http_init_connection, mail块ngx_mail_init_connection, stream块对应ngx_stream_init_connection)</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"五-总结\"><a href=\"#五-总结\" class=\"headerlink\" title=\"五. 总结\"></a>五. 总结</h1><ol>\n<li>nginx在读取listen相关的配置时, 将结构分为3级, 端口-&gt;地址-&gt;server, 各级都是一对多的关系。</li>\n<li>nginx在创建监听套接字时, 将结构分为3级, 监听套接字-&gt;地址-&gt;server, 各级都是一对多的关系。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-基础\"><a href=\"#一-基础\" class=\"headerlink\" title=\"一. 基础\"></a>一. 基础</h1><blockquote>\n<ul>\n<li>nginx源码采用1.15.5</li>\n<li>后续部分仅讨论http中的listen配置解析以及优化流程</li>\n</ul>\n</blockquote>\n<h2 id=\"1-1-概述\"><a href=\"#1-1-概述\" class=\"headerlink\" title=\"1.1 概述\"></a>1.1 概述</h2><ol>\n<li><p>假设nginx http模块的配置如下</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8000</span>;</span><br><span class=\"line\">        server_name www.baidu.com;</span><br><span class=\"line\">        root html;</span><br><span class=\"line\">        location /&#123;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen <span class=\"number\">10.0</span><span class=\"number\">.1</span><span class=\"number\">.1</span>:<span class=\"number\">8000</span>;</span><br><span class=\"line\">        server_name www.news.baidu.com;</span><br><span class=\"line\">        root html;</span><br><span class=\"line\">        location /&#123;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen <span class=\"number\">8000</span>; #相当于<span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>:<span class=\"number\">8000</span></span><br><span class=\"line\">        server_name www.tieba.baidu.com;</span><br><span class=\"line\">        root html;</span><br><span class=\"line\">        location /&#123;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8000</span>;</span><br><span class=\"line\">        server_name www.zhidao.baidu.com;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root html;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>端口, 地址, server的关系</p>\n<blockquote>\n<ul>\n<li>端口是指一个端口号, 例如上面的8000端口</li>\n<li>地址是ip+port, 例如127.0.0.1:8000, 10.0.1.1:8000, 0.0.0.0:8000, listen后配置的是一个地址。</li>\n<li>每个地址可以放到多个server中, 例如上面的127.0.0.1:8000</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<p>总而言之, 一个端口可以有多个地址, 每个地址可以有多个server</p>\n<h2 id=\"1-2-存在的问题\"><a href=\"#1-2-存在的问题\" class=\"headerlink\" title=\"1.2 存在的问题\"></a>1.2 存在的问题</h2><ol>\n<li><p>是否需要在读取完http块中所有的server才能建立监听套接字, 绑定监听地址?</p>\n<blockquote>\n<ul>\n<li>是的, 因为允许配置通配地址, 故而必须将http块中的server全部读取完后, 才能知道如何建立监听套接字。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>一个端口可以对应多个地址, 如何建立监听套接字, 如何绑定地址?</p>\n<blockquote>\n<ul>\n<li>通常情况下, 每个地址只能绑定一次(只考虑tcp协议), 这种情况下, 我们只能选择部分地址创建监听套接字, 绑定监听地址。</li>\n<li>当配置中存在通配地址(0.0.0.0:port)时, 只需要创建一个监听套接字, 绑定这个通配地址即可, 但需要能够依据该监听套接字找到该端口配置的其他地址, 这样当客户端发送请求时, 可以根据客户端请求的地址, 找到对应地址下的相关配置。</li>\n<li>当配置中不存在通配地址时, 需要对每个地址都创建一个监听套接字, 绑定监听地址。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>一个地址多个server的情况下, 如何快速找到客户端请求的server?</p>\n<blockquote>\n<ul>\n<li>比较合适的方案是通过hash表。</li>\n<li>为了快速找到客户端请求的server, nginx以server_name为key, 每个server块的配置(可以理解为一个指针, 该指针指向整个server块的配置)为value, 放入到哈希表。</li>\n<li>由于server_name中可以出现正则匹配等情况, nginx将server_name具体分为4类进行分别处理(<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a>, *baidu.com, <a href=\"http://www.baidu\\*\" target=\"_blank\" rel=\"noopener\">www.baidu\\*</a>, ~*baidu)。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"1-3-nginx-listen解析的流程\"><a href=\"#1-3-nginx-listen解析的流程\" class=\"headerlink\" title=\"1.3 nginx listen解析的流程\"></a>1.3 nginx listen解析的流程</h2><p>总体而言分为2步，</p>\n<ol>\n<li>将所有http模块内的配置解析完成, 将listen的相关配置暂存(主要存储监听端口以及监听地址)。</li>\n<li>根据上一步暂存的监听端口以及监听地址, 创建监听套接字, 绑定监听地址</li>\n</ol>\n<h1 id=\"二-配置解析\"><a href=\"#二-配置解析\" class=\"headerlink\" title=\"二. 配置解析\"></a>二. 配置解析</h1><p>nginx http块解析完成后, 会存储配置文件中配置的监听端口以及监听地址, 其核心结构图如下,<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A85-%E7%9B%91%E5%90%AC%E7%AB%AF%E5%8F%A3.png\" alt=\"image\"></p>\n<p>总体而言, 结构可以分为3级, 端口-&gt;地址-&gt;server</p>\n<h2 id=\"2-1-源码\"><a href=\"#2-1-源码\" class=\"headerlink\" title=\"2.1 源码\"></a>2.1 源码</h2><p>listen的处理流程:</p>\n<blockquote>\n<ul>\n<li>ngx_http_core_listen: 读取配置文件配置</li>\n<li>ngx_http_add_listen: 查看之前是否出现过当前监听的端口, 没有则新建, 否则追加</li>\n<li>ngx_http_add_address: 查看之前该端口下是否监听过该地址, 没有则新建, 否则追加。</li>\n<li>ngx_http_add_server: 查看server之前是否出现过, 没有则新建, 否则报错(重复定义)。</li>\n</ul>\n</blockquote>\n<h1 id=\"三-创建监听套接字\"><a href=\"#三-创建监听套接字\" class=\"headerlink\" title=\"三. 创建监听套接字\"></a>三. 创建监听套接字</h1><p>nginx最终创建的监听套接字及其相关的结构图如下,<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/ngx%E7%9B%91%E5%90%AC%E7%BB%93%E6%9E%84%E5%9B%BE.png\" alt=\"image\"></p>\n<blockquote>\n<ul>\n<li>每个ngx_listening_t结构对应一个监听套接字, 绑定一个监听地址</li>\n<li>每个ngx_listening_t结构后面需要存储地址信息, 地址可能不止一个,  因为这个监听套接字可能绑定的是通配地址, 这个端口下的其他地址都会放在这个监听套接字下。例如, 1.1节的配置中, 只会创建一个ngx_listening_t结构, 其他地址的配置都会放到这个通配地址下。</li>\n<li>每个监听地址可能对应多个域名(配置文件中的server_name), 需要将这些域名放到哈希表中, 以供后续使用</li>\n</ul>\n</blockquote>\n<p>总体而言, 结构分为3级, 监听套接字-&gt;监听地址-&gt;server</p>\n<h2 id=\"3-1-源码\"><a href=\"#3-1-源码\" class=\"headerlink\" title=\"3.1 源码\"></a>3.1 源码</h2><p>读取完http块后, 需要创建监听套接字绑定监听地址, 处理函数ngx_http_optimize_servers, 该函数的处理流程:</p>\n<blockquote>\n<ul>\n<li>遍历所有监听端口, 针对每个监听端口, 执行以下3步</li>\n<li>对该端口下所有监听地址排序(listen后配置bind的放在前面, 通配地址放在后面)</li>\n<li>遍历该端口下的所有地址, 将每个地址配置的所有server, 放到该地址的哈希表中。</li>\n<li>为该端口建立监听套接字, 绑定监听地址。</li>\n</ul>\n</blockquote>\n<h1 id=\"四-监听套接字的使用\"><a href=\"#四-监听套接字的使用\" class=\"headerlink\" title=\"四. 监听套接字的使用\"></a>四. 监听套接字的使用</h1><ol>\n<li>假设此处我们使用epoll作为事件处理模块</li>\n<li>epoll在增加事件时, 用户可以使用epoll_event中的data字段, 当事件发生时, 该字段也会带回。</li>\n<li>nginx中的epoll_event指向的是ngx_connection_t结构, 事件发生时, 调用ngx_connection_t结构中的读写事件, 负责具体处理事件, 参见下图。<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//c is ngx_connection_t</span></span><br><span class=\"line\">rev = c-&gt;read;</span><br><span class=\"line\">rev-&gt;hadler(rev);</span><br><span class=\"line\">wev = c-&gt;write;</span><br><span class=\"line\">wev-&gt;handler(wev);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%20epoll%E6%A1%86%E6%9E%B6%E5%9B%BE.png\" alt=\"image\"></p>\n<ol start=\"4\">\n<li>每个监听套接字对应一个ngx_connection_t, 该结构的读事件回调函数为ngx_event_accept, 当用户发起tcp握手时, 通过ngx_event_accept接受客户端的连接请求。<blockquote>\n<ul>\n<li>ngx_event_accept会接受客户端请求, 初始化一个新的ngx_connection_t结构, 并将其加入到epoll中进行监听, 最后会调用ngx_connection_t对应的ngx_listening_t的处理函数(http块对应ngx_http_init_connection, mail块ngx_mail_init_connection, stream块对应ngx_stream_init_connection)</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"五-总结\"><a href=\"#五-总结\" class=\"headerlink\" title=\"五. 总结\"></a>五. 总结</h1><ol>\n<li>nginx在读取listen相关的配置时, 将结构分为3级, 端口-&gt;地址-&gt;server, 各级都是一对多的关系。</li>\n<li>nginx在创建监听套接字时, 将结构分为3级, 监听套接字-&gt;地址-&gt;server, 各级都是一对多的关系。</li>\n</ol>\n"},{"title":"swoole_server_introduce","date":"2019-05-27T02:19:08.000Z","_content":"\n# 一. 基础知识\n## 1.1 swoole\nswoole是面向生产环境的php异步网络通信引擎, php开发人员可以利用swoole开发出高性能的server服务。swoole的server部分, 内容很多, 也涉及很多的知识点, 本文仅对其server进行简单的概述, 具体的实现细节在后续的文章中再进行详细介绍。\n\n## 1.2 网络编程\n1. 网络通信是指在一台(或者多台)机器上启动一个(或者多个)进程, 监听一个(或者多个)端口, 按照某种协议(可以是标准协议http, dns; 也可以是自行定义的协议)与客户端交换信息。\n2. 目前的网络编程多是在tcp, udp或者更上层的协议之上进行编程。swoole的server部分是基于tcp以及udp协议的。\n3. 利用udp进行编程较为简单, 本文主要介绍tcp协议之上的网络编程\n4. TCP网络编程主要涉及4种事件,\n- 连接建立: 主要是指客户端发起连接(connect)以及服务端接受连接(accept)\n- 消息到达: 服务端接受到客户端发送的数据, 该事件是TCP网络编程最重要的事件, 服务端对于该类事件进行处理时, 可以采用阻塞式或者非阻塞式, 除此之外, 服务端还需要考虑分包, 应用层缓冲区等问题\n- 消息发送成功: 发送成功是指应用层将数据成功发送到内核的套接字发送缓冲区中, 并不是指客户端成功接受数据。对于低流量的服务而言, 数据通常一次性即可发送完, 并不需要关心此类事件。如果一次性不能将全部数据发送到内核缓冲区, 则需要关心消息是否成功发送(阻塞式编程在系统调用(write, writev, send等)返回后即是发送成功, 非阻塞式编程则需要考虑实际写入的数据是否与预期一致)\n- 连接断开: 需要考虑客户端断开连接(read返回0)以及服务端断开连接(close, shutdown)\n\n## 1.3 进程间通信\n1. 进程之间的通信有无名管道(pipe), 有名管道(fifo), 信号, 信号量, 套接字, 共享内存等方式\n2. swoole中采用unix域套接字用于多进程之间的通信(指swoole内部进程之间)\n\n## 1.4 socketpair\n1. socketpair用于创建一个套接字对, 类似于pipe, 不同的是pipe是单向通信, 双向通信需要创建两次, socketpair调用一次即可实现双向通信, 除此之外, 由于使用的是套接字, 还可以定义数据交换的方式\n2. socketpair系统调用\n```cpp\nint socketpair(int domain, int type, int protocol, int sv[2]);\n//domain表示协议簇\n//type表示类型\n//protocol表示协议, SOCK_STREAM表示流协议(类似tcp), SOCK_DGRAM表示数据报协议(类似udp)\n//sv用于存储建立的套接字对, 也就是两个套接字文件描述符\n//成功返回0, 否则返回-1, 可以从errno获取错误信息\n```\n- 调用成功后sv[0], sv[1]分别存储一个文件描述符\n- 向sv[0]中写入, 可以从sv[1]中读取\n- 向sv[1]中写入, 可以从sv[0]中读取\n- 进程调用socketpair后, fork子进程, 子进程会默认继承sv[0], sv[1]这两个文件描述符, 进而可以实现父子进程间通信。例如, 父进程向sv[0]中写入, 子进程从sv[1]中读取; 子进程向sv[1]中写入, 父进程从sv[0]中读取。\n\n## 1.5 守护进程(daemon)\n1. 守护进程是一种特殊的后台进程, 它脱离于终端, 用于周期性的执行某种任务\n2. 进程组\n- 每个进程都属于一个进程组\n- 每个进程组都有一个进程组号, 也就是该组组长的进程号(PID)\n- 一个进程只能为自己或者其子进程设置进程组号\n3. 会话\n- 一个会话可以包含多个进程组, 这些进程组中最多只能有一个前台进程组(也可以没有)\n- setsid可以创建一个新的会话, 该进程不能是进程组的组长。setsid调用完成后, 该进程成为这个会话的首进程(领头进程), 同时变成一个新的进程组的组长, 如果该进程之前有控制终端, 则该进程与终端的联系被断开\n- 用户通过终端登录或者网络登录, 会创建一个新的会话\n- 一个会话最多只能有一个控制终端\n4. 创建守护进程的方式\n- fork子进程后, 父进程退出, 子进程执行setsid即可成为守护进程。这种方式下, 子进程是会话的领头进程, 可以重新打开终端, 此时可以再次fork, fork产生的子进程无法再打开终端。第二次fork并不是必须的, 只是为了防止子进程再次打开终端\n- linux提供了daemon函数用于创建守护进程\n\n## 1.6 swoole tcp server示例\n```php\n<?php\n//创建server\n$serv = new Swoole\\Server('0.0.0.0', 9501, SWOOLE_PROCESS, SWOOLE_SOCK_TCP);\n//设置server的参数\n$serv->set(array(\n    'reactor_num' => 2, //reactor thread num\n    'worker_num' => 3,  //worker process num\n));\n\n//设置事件回调\n$serv->on('connect', function ($serv, $fd){\n    echo \"Client:Connect.\\n\";\n});\n$serv->on('receive', function ($serv, $fd, $reactor_id, $data) {\n    $serv->send($fd, 'Swoole: '.$data);\n    $serv->close($fd);\n});\n$serv->on('close', function ($serv, $fd) {\n    echo \"Client: Close.\\n\";\n});\n\n//启动server\n$serv->start();\n```\n- 上述代码在cli模式下执行时, 经过词法分析, 语法分析生成opcode, 进而交由zend虚拟机执行\n- zend虚拟机在执行到$serv->start()时, 启动swoole server\n- 上述代码中设置的事件回调是在worker进程中执行\n\n# 二. swoole server\n## 2.1 base模式\n1. 说明\n- base模式采用多进程模型, 这种模型与nginx一致, 每个进程只有一个线程, 主进程负责管理工作进程, 工作进程负责监听端口, 接受连接, 处理请求以及关闭连接\n- 多个进程同时监听端口, 会有惊群问题, 目前swoole并没有解决\n- linux 内核3.9及其后续版本提供了新的套接字参数SO_REUSEPORT, 该参数允许多个进程绑定到同一个端口, 内核在接受到新的连接请求时, 会唤醒其中一个进行处理, 内核层面也会做负载均衡, 可以解决上述的惊群问题\n- base模式下, reactor_number参数并没有作用, 因为每个进程只有一个线程\n- 如果worker进程数设置为1, 则不会fork出worker进程, 主进程直接处理请求\n\n2. 启动过程\n- php代码执行到$serv->start()时, 主进程进入int swServer_start(swServer *serv)函数, 该函数负责启动server\n- 在函数swServer_start中会调用swReactorProcess_start, 这个函数会fork出多个worker进程\n- 主进程和worker进程各自进入自己的事件循环, 处理各类事件\n\n## 2.2 process模式\n1. 说明\n- 这种模式为多进程多线程, 有主进程, manager进程, worker进程, task_worker进程\n- 主进程下有多个线程, 主线程负责接受连接, 之后交给react线程处理请求。 react线程负责接收数据包, 并将数据转发给worker进程进行处理, 之后处理worker进程返回的数据\n- manager进程, 该进程为单线程, 主要负责管理worker进程, 类似于nginx中的主进程, 当worker进程异常退出时, manager进程负责重新fork出一个worker进程\n- worker进程, 该进程为单线程, 负责具体处理请求\n- task_worker进程, 用于处理比较耗时的任务, 默认不开启\n- worker进程与主进程中的react线程使用域套接字进行通信, worker进程之间不进行通信\n\n2. 启动过程\n- swoole server启动入口: swServer_start函数,\n```\n//php 代码中$serv->start(); 会调用函数, 进行server start\nint swServer_start(swServer *serv);\n\n// 该函数首先进行必要的参数检查\nstatic int swServer_start_check(swServer *serv);\n// 其中有,\nif (serv->worker_num < serv->reactor_num)\n{\n    serv->reactor_num = serv->worker_num;\n}//也就是说reactor_num <= worker_num\n\n//之后执行factory start, 也就是swFactoryProcess_start函数, 该函数会fork出manager进程, manager进程进而fork出worker进程以及task_worker进程\nif (factory->start(factory) < 0)\n{\n    return SW_ERR;\n}\n\n//然后主进程的主线程生成reactor线程\nif (serv->factory_mode == SW_MODE_BASE)\n{\n    ret = swReactorProcess_start(serv);\n}\nelse\n{\n    ret = swReactorThread_start(serv);\n}\n```\n- 如果设置了daemon模式, 在必要的参数检查完后, 先将自己变为守护进程再fork manager进程, 进而创建reactor线程\n\n- 主进程先fork出manager进程, manager进程负责fork出worker进程以及task_worker进程。worker进程之后进入int swWorker_loop(swServer *serv, int worker_id), 也就是进入自己的事件循环, task_worker也是一样, 进入自己的事件循环。\n```\nstatic int swFactoryProcess_start(swFactory *factory);\n//swFactoryProcess_start会调用swManager_start生成manager进程\nint swManager_start(swServer *serv);\n// manager进程会fork出worker进程以及task_worker进程\n```\n- 主进程pthread_create出react线程, 主线程和react线程各自进入自己的事件循环, reactor线程执行static int swReactorThread_loop(swThreadParam *param), 等待处理事件\n```\n//主线程执行swReactorThread_start, 创建出reactor线程\nint swReactorThread_start(swServer *serv);\n```\n\n3. 结构图\nswoole process模式结构如下图所示,\n![swoole_server](https://picturestore.nos-eastchina1.126.net/swoole/swoole%20process%20%E7%BB%93%E6%9E%84%E5%9B%BE.jpg)\n- 上图并没有考虑task_worker进程, 在默认情况下, task_worker进程数为0\n\n# 三. 请求处理流程(process模式)\n## 3.1 reactor线程与worker进程之间的通信\n1. swoole master进程与worker进程之间的通信如下图所示,\n![image](https://picturestore.nos-eastchina1.126.net/swoole/swoole%20process%20ipc.png)\n- swoole使用SOCK_DGRAM, 而不是SOCK_STREAM, 这里是因为每个reactor线程负责处理多个请求, reactor接收到请求后会将信息转发给worker进程, 由worker进程负责处理,如果使用SOCK_STREAM, worker进程无法对tcp进行分包, 进而处理请求\n- swFactoryProcess_start函数中会根据worker进程数创建对应个数的套接字对, 用于reactor线程与worker进程通信(swPipeUnsock_create函数)\n\n2. 假设reactor线程有2个, worker进程有3个, 则reactor与worker之间的通信如下图所示,\n![image](https://picturestore.nos-eastchina1.126.net/swoole/swoole%20process%20ipc%E5%AE%9E%E4%BE%8B.png)\n- 每个reactor线程负责监听几个worker进程, 每个worker进程只有一个reactor线程监听(reactor_num<=worker_num)。swoole默认使用worker_process_id % reactor_num对worker进程进行分配, 交给对应的reactor线程进行监听\n- reactor线程收到某个worker进程的数据后会进行处理, 值得注意的是, 这个reactor线程可能并不是发送请求的那个reactor线程。\n\n3. reactor线程与worker进程通信的数据包\n```c\n//包头\ntypedef struct _swDataHead\n{\n    int fd;\n    uint32_t len;\n    int16_t from_id;\n    uint8_t type;\n    uint8_t flags;\n    uint16_t from_fd;\n#ifdef SW_BUFFER_RECV_TIME\n    double time;\n#endif\n} swDataHead;\n\n//reactor线程向worker进程发送的数据, 也就是worker进程收到的数据包\ntypedef struct\n{\n    swDataHead info;\n    char data[SW_IPC_BUFFER_SIZE];\n} swEventData;\n\n//worker进程向reactor线程发送的数据, 也就是reactor线程收到的数据包\ntypedef struct\n{\n    swDataHead info;\n    char data[0];\n} swPipeBuffer;\n```\n\n## 3.2 请求处理\n1. master进程中的主线程负责监听端口(listen), 接受连接(accept, 产生一个fd), 接受连接后将请求分配给reactor线程, 默认通过fd % reactor_num进行分配, 之后通过epoll_ctl将fd加入到对应reactor线程中(如果对应的reactor线程正在执行epoll_wait, 主线程会阻塞), 刚加入时监听写事件, 如果直接监听读事件, 可能会立刻被触发, 而监听写事件可以允许reactor线程进行一些初始化操作\n```\n//主线程执行epoll_ctl将fd(新接受的连接)加入到reactor线程的监听队列中\nepoll_ctl(epfd, fd, ...);\n//对应的reactor线程如果正在执行\nepoll_wait(epfd, ...);\n```\n- 这种情况主线程会被阻塞(两个线程同时操作epfd)\n- 如果reactor线程没有正在执行epoll_wait, 主线程则不会被阻塞, 执行成功后直接返回\n\n2. reactor线程中fd的写事件被触发, reactor线程负责处理, 发现是首次加入, 没有数据可写, 则开启读事件监听\n\n3. reactor线程读取到用户的请求数据, **一个请求的数据接收完后**, 将数据转发给worker进程, 默认是通过fd % worker_num进行分配\n- reactor发送给worker进程的数据包, 会包含一个头部, 头部中记录了reactor的信息\n- 如果发送的数据过大, 则需要将数据进行分片, 限于篇幅, reactor的分片, 后续再进行详细讲述\n- 可能存在多个reactor线程同时向同一个worker进程发送数据的情况, 故而swoole采用SOCK_DGRAM模式与worker进程进行通信, 通过每个数据包的包头, worker进程可以区分出是由哪个reactor线程发送的数据\n\n4. worker进程收到reactor发送的数据包后, 进行处理, 处理完成后, 将数据发送给主进程\n- worker进程发送给主进程的数据包, 也会包含一个头部, 当reactor线程收到数据包后, 能够知道对应的reactor线程, 请求的fd等信息\n\n5. 主进程收到worker进程发送的数据包, 这个会触发某个reactor线程进行处理\n- 这个reactor线程并不一定是之前发送请求给worker进程的那个reactor线程\n- 主进程的每个reactor线程都负责监听worker进程发送的数据包, 每个worker发送的数据包只会由一个reactor线程进行监听, 故而只会触发一个reactor线程\n\n6. reactor线程处理worker进程发送的数据包, 如果是直接发送数据给客户端, 则可以直接发送, 如果需要改变这个这个连接的监听状态(例如close), 则需要先找到监听这个连接的reactor, 进而改变这个连接的监听状态\n- reactor处理线程与reactor监听线程可能并不是同一个线程\n- reactor监听线程负责监听客户端发送的数据, 进而转发给worker进程\n- reactor处理线程负责监听worker进程发送给主进程的数据, 进而将数据发送给客户端\n\n# 四. gdb调试\n## 4.1 process模式启动\n```\n//fork manager进程\n#0  0x00007ffff67dae64 in fork () from /lib64/libc.so.6\n#1  0x00007ffff553888a in swoole_fork () at /root/code/swoole-src/src/core/base.c:186\n#2  0x00007ffff556afb8 in swManager_start (serv=serv@entry=0x1353f60) at /root/code/swoole-src/src/server/manager.cc:164\n#3  0x00007ffff5571dde in swFactoryProcess_start (factory=0x1353ff8) at /root/code/swoole-src/src/server/process.c:198\n#4  0x00007ffff556ef8b in swServer_start (serv=0x1353f60) at /root/code/swoole-src/src/server/master.cc:651\n#5  0x00007ffff55dc808 in zim_swoole_server_start (execute_data=<optimized out>, return_value=0x7fffffffac50)\n    at /root/code/swoole-src/swoole_server.cc:2946\n#6  0x00000000007bb068 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () at /root/php-7.3.3/Zend/zend_vm_execute.h:980\n#7  execute_ex (ex=0x7ffff7f850a8) at /root/php-7.3.3/Zend/zend_vm_execute.h:55485\n#8  0x00000000007bbf58 in zend_execute (op_array=op_array@entry=0x7ffff5e7b340, return_value=return_value@entry=0x7ffff5e1d030)\n    at /root/php-7.3.3/Zend/zend_vm_execute.h:60881\n#9  0x0000000000737554 in zend_execute_scripts (type=type@entry=8, retval=0x7ffff5e1d030, retval@entry=0x0,\n    file_count=file_count@entry=3) at /root/php-7.3.3/Zend/zend.c:1568\n#10 0x00000000006db4d0 in php_execute_script (primary_file=primary_file@entry=0x7fffffffd050) at /root/php-7.3.3/main/main.c:2630\n#11 0x00000000007be2f5 in do_cli (argc=2, argv=0x1165cd0) at /root/php-7.3.3/sapi/cli/php_cli.c:997\n#12 0x000000000043fc1f in main (argc=2, argv=0x1165cd0) at /root/php-7.3.3/sapi/cli/php_cli.c:1389\n\n\n// pthread_create reactor线程\n#0  0x00007ffff552e960 in pthread_create@plt () from /usr/local/lib/php/extensions/no-debug-non-zts-20180731/swoole.so\n#1  0x00007ffff5576959 in swReactorThread_start (serv=0x1353f60) at /root/code/swoole-src/src/server/reactor_thread.c:883\n#2  0x00007ffff556f006 in swServer_start (serv=0x1353f60) at /root/code/swoole-src/src/server/master.cc:670\n#3  0x00007ffff55dc808 in zim_swoole_server_start (execute_data=<optimized out>, return_value=0x7fffffffac50)\n    at /root/code/swoole-src/swoole_server.cc:2946\n#4  0x00000000007bb068 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () at /root/php-7.3.3/Zend/zend_vm_execute.h:980\n#5  execute_ex (ex=0x7fffffffab10) at /root/php-7.3.3/Zend/zend_vm_execute.h:55485\n#6  0x00000000007bbf58 in zend_execute (op_array=op_array@entry=0x7ffff5e7b340, return_value=return_value@entry=0x7ffff5e1d030)\n    at /root/php-7.3.3/Zend/zend_vm_execute.h:60881\n#7  0x0000000000737554 in zend_execute_scripts (type=type@entry=8, retval=0x7ffff5e1d030, retval@entry=0x0,\n    file_count=file_count@entry=3) at /root/php-7.3.3/Zend/zend.c:1568\n#8  0x00000000006db4d0 in php_execute_script (primary_file=primary_file@entry=0x7fffffffd050) at /root/php-7.3.3/main/main.c:2630\n#9  0x00000000007be2f5 in do_cli (argc=2, argv=0x1165cd0) at /root/php-7.3.3/sapi/cli/php_cli.c:997\n#10 0x000000000043fc1f in main (argc=2, argv=0x1165cd0) at /root/php-7.3.3/sapi/cli/php_cli.c:1389\n```\n\n## 4.2 base模式启动\n```\n//base 模式下的启动\n#0  0x00007ffff67dae64 in fork () from /lib64/libc.so.6\n#1  0x00007ffff553888a in swoole_fork () at /root/code/swoole-src/src/core/base.c:186\n#2  0x00007ffff5558557 in swProcessPool_spawn (pool=pool@entry=0x7ffff2d2a308, worker=0x7ffff2d2a778)\n    at /root/code/swoole-src/src/network/process_pool.c:392\n#3  0x00007ffff5558710 in swProcessPool_start (pool=0x7ffff2d2a308) at /root/code/swoole-src/src/network/process_pool.c:227\n#4  0x00007ffff55741cf in swReactorProcess_start (serv=0x1353f60) at /root/code/swoole-src/src/server/reactor_process.cc:176\n#5  0x00007ffff556f21d in swServer_start (serv=0x1353f60) at /root/code/swoole-src/src/server/master.cc:666\n#6  0x00007ffff55dc808 in zim_swoole_server_start (execute_data=<optimized out>, return_value=0x7fffffffac50)\n    at /root/code/swoole-src/swoole_server.cc:2946\n#7  0x00000000007bb068 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () at /root/php-7.3.3/Zend/zend_vm_execute.h:980\n#8  execute_ex (ex=0x7ffff2d2a308) at /root/php-7.3.3/Zend/zend_vm_execute.h:55485\n#9  0x00000000007bbf58 in zend_execute (op_array=op_array@entry=0x7ffff5e7b340, return_value=return_value@entry=0x7ffff5e1d030)\n    at /root/php-7.3.3/Zend/zend_vm_execute.h:60881\n#10 0x0000000000737554 in zend_execute_scripts (type=type@entry=8, retval=0x7ffff5e1d030, retval@entry=0x0,\n    file_count=file_count@entry=3) at /root/php-7.3.3/Zend/zend.c:1568\n#11 0x00000000006db4d0 in php_execute_script (primary_file=primary_file@entry=0x7fffffffd050) at /root/php-7.3.3/main/main.c:2630\n#12 0x00000000007be2f5 in do_cli (argc=2, argv=0x1165cd0) at /root/php-7.3.3/sapi/cli/php_cli.c:997\n#13 0x000000000043fc1f in main (argc=2, argv=0x1165cd0) at /root/php-7.3.3/sapi/cli/php_cli.c:1389\n```\n\n# 五. 参考\n- UNIX网络编程\n- UNIX环境高级编程\n- https://wiki.swoole.com/\n- https://www.cnblogs.com/welhzh/p/3772164.html\n- https://www.cnblogs.com/JohnABC/p/4079669.html\n","source":"_posts/swoole-server-introduce.md","raw":"---\ntitle: swoole_server_introduce\ndate: 2019-05-27 10:19:08\ncategories:\n- swoole\n- server\ntags:\n- server\n- swoole\n---\n\n# 一. 基础知识\n## 1.1 swoole\nswoole是面向生产环境的php异步网络通信引擎, php开发人员可以利用swoole开发出高性能的server服务。swoole的server部分, 内容很多, 也涉及很多的知识点, 本文仅对其server进行简单的概述, 具体的实现细节在后续的文章中再进行详细介绍。\n\n## 1.2 网络编程\n1. 网络通信是指在一台(或者多台)机器上启动一个(或者多个)进程, 监听一个(或者多个)端口, 按照某种协议(可以是标准协议http, dns; 也可以是自行定义的协议)与客户端交换信息。\n2. 目前的网络编程多是在tcp, udp或者更上层的协议之上进行编程。swoole的server部分是基于tcp以及udp协议的。\n3. 利用udp进行编程较为简单, 本文主要介绍tcp协议之上的网络编程\n4. TCP网络编程主要涉及4种事件,\n- 连接建立: 主要是指客户端发起连接(connect)以及服务端接受连接(accept)\n- 消息到达: 服务端接受到客户端发送的数据, 该事件是TCP网络编程最重要的事件, 服务端对于该类事件进行处理时, 可以采用阻塞式或者非阻塞式, 除此之外, 服务端还需要考虑分包, 应用层缓冲区等问题\n- 消息发送成功: 发送成功是指应用层将数据成功发送到内核的套接字发送缓冲区中, 并不是指客户端成功接受数据。对于低流量的服务而言, 数据通常一次性即可发送完, 并不需要关心此类事件。如果一次性不能将全部数据发送到内核缓冲区, 则需要关心消息是否成功发送(阻塞式编程在系统调用(write, writev, send等)返回后即是发送成功, 非阻塞式编程则需要考虑实际写入的数据是否与预期一致)\n- 连接断开: 需要考虑客户端断开连接(read返回0)以及服务端断开连接(close, shutdown)\n\n## 1.3 进程间通信\n1. 进程之间的通信有无名管道(pipe), 有名管道(fifo), 信号, 信号量, 套接字, 共享内存等方式\n2. swoole中采用unix域套接字用于多进程之间的通信(指swoole内部进程之间)\n\n## 1.4 socketpair\n1. socketpair用于创建一个套接字对, 类似于pipe, 不同的是pipe是单向通信, 双向通信需要创建两次, socketpair调用一次即可实现双向通信, 除此之外, 由于使用的是套接字, 还可以定义数据交换的方式\n2. socketpair系统调用\n```cpp\nint socketpair(int domain, int type, int protocol, int sv[2]);\n//domain表示协议簇\n//type表示类型\n//protocol表示协议, SOCK_STREAM表示流协议(类似tcp), SOCK_DGRAM表示数据报协议(类似udp)\n//sv用于存储建立的套接字对, 也就是两个套接字文件描述符\n//成功返回0, 否则返回-1, 可以从errno获取错误信息\n```\n- 调用成功后sv[0], sv[1]分别存储一个文件描述符\n- 向sv[0]中写入, 可以从sv[1]中读取\n- 向sv[1]中写入, 可以从sv[0]中读取\n- 进程调用socketpair后, fork子进程, 子进程会默认继承sv[0], sv[1]这两个文件描述符, 进而可以实现父子进程间通信。例如, 父进程向sv[0]中写入, 子进程从sv[1]中读取; 子进程向sv[1]中写入, 父进程从sv[0]中读取。\n\n## 1.5 守护进程(daemon)\n1. 守护进程是一种特殊的后台进程, 它脱离于终端, 用于周期性的执行某种任务\n2. 进程组\n- 每个进程都属于一个进程组\n- 每个进程组都有一个进程组号, 也就是该组组长的进程号(PID)\n- 一个进程只能为自己或者其子进程设置进程组号\n3. 会话\n- 一个会话可以包含多个进程组, 这些进程组中最多只能有一个前台进程组(也可以没有)\n- setsid可以创建一个新的会话, 该进程不能是进程组的组长。setsid调用完成后, 该进程成为这个会话的首进程(领头进程), 同时变成一个新的进程组的组长, 如果该进程之前有控制终端, 则该进程与终端的联系被断开\n- 用户通过终端登录或者网络登录, 会创建一个新的会话\n- 一个会话最多只能有一个控制终端\n4. 创建守护进程的方式\n- fork子进程后, 父进程退出, 子进程执行setsid即可成为守护进程。这种方式下, 子进程是会话的领头进程, 可以重新打开终端, 此时可以再次fork, fork产生的子进程无法再打开终端。第二次fork并不是必须的, 只是为了防止子进程再次打开终端\n- linux提供了daemon函数用于创建守护进程\n\n## 1.6 swoole tcp server示例\n```php\n<?php\n//创建server\n$serv = new Swoole\\Server('0.0.0.0', 9501, SWOOLE_PROCESS, SWOOLE_SOCK_TCP);\n//设置server的参数\n$serv->set(array(\n    'reactor_num' => 2, //reactor thread num\n    'worker_num' => 3,  //worker process num\n));\n\n//设置事件回调\n$serv->on('connect', function ($serv, $fd){\n    echo \"Client:Connect.\\n\";\n});\n$serv->on('receive', function ($serv, $fd, $reactor_id, $data) {\n    $serv->send($fd, 'Swoole: '.$data);\n    $serv->close($fd);\n});\n$serv->on('close', function ($serv, $fd) {\n    echo \"Client: Close.\\n\";\n});\n\n//启动server\n$serv->start();\n```\n- 上述代码在cli模式下执行时, 经过词法分析, 语法分析生成opcode, 进而交由zend虚拟机执行\n- zend虚拟机在执行到$serv->start()时, 启动swoole server\n- 上述代码中设置的事件回调是在worker进程中执行\n\n# 二. swoole server\n## 2.1 base模式\n1. 说明\n- base模式采用多进程模型, 这种模型与nginx一致, 每个进程只有一个线程, 主进程负责管理工作进程, 工作进程负责监听端口, 接受连接, 处理请求以及关闭连接\n- 多个进程同时监听端口, 会有惊群问题, 目前swoole并没有解决\n- linux 内核3.9及其后续版本提供了新的套接字参数SO_REUSEPORT, 该参数允许多个进程绑定到同一个端口, 内核在接受到新的连接请求时, 会唤醒其中一个进行处理, 内核层面也会做负载均衡, 可以解决上述的惊群问题\n- base模式下, reactor_number参数并没有作用, 因为每个进程只有一个线程\n- 如果worker进程数设置为1, 则不会fork出worker进程, 主进程直接处理请求\n\n2. 启动过程\n- php代码执行到$serv->start()时, 主进程进入int swServer_start(swServer *serv)函数, 该函数负责启动server\n- 在函数swServer_start中会调用swReactorProcess_start, 这个函数会fork出多个worker进程\n- 主进程和worker进程各自进入自己的事件循环, 处理各类事件\n\n## 2.2 process模式\n1. 说明\n- 这种模式为多进程多线程, 有主进程, manager进程, worker进程, task_worker进程\n- 主进程下有多个线程, 主线程负责接受连接, 之后交给react线程处理请求。 react线程负责接收数据包, 并将数据转发给worker进程进行处理, 之后处理worker进程返回的数据\n- manager进程, 该进程为单线程, 主要负责管理worker进程, 类似于nginx中的主进程, 当worker进程异常退出时, manager进程负责重新fork出一个worker进程\n- worker进程, 该进程为单线程, 负责具体处理请求\n- task_worker进程, 用于处理比较耗时的任务, 默认不开启\n- worker进程与主进程中的react线程使用域套接字进行通信, worker进程之间不进行通信\n\n2. 启动过程\n- swoole server启动入口: swServer_start函数,\n```\n//php 代码中$serv->start(); 会调用函数, 进行server start\nint swServer_start(swServer *serv);\n\n// 该函数首先进行必要的参数检查\nstatic int swServer_start_check(swServer *serv);\n// 其中有,\nif (serv->worker_num < serv->reactor_num)\n{\n    serv->reactor_num = serv->worker_num;\n}//也就是说reactor_num <= worker_num\n\n//之后执行factory start, 也就是swFactoryProcess_start函数, 该函数会fork出manager进程, manager进程进而fork出worker进程以及task_worker进程\nif (factory->start(factory) < 0)\n{\n    return SW_ERR;\n}\n\n//然后主进程的主线程生成reactor线程\nif (serv->factory_mode == SW_MODE_BASE)\n{\n    ret = swReactorProcess_start(serv);\n}\nelse\n{\n    ret = swReactorThread_start(serv);\n}\n```\n- 如果设置了daemon模式, 在必要的参数检查完后, 先将自己变为守护进程再fork manager进程, 进而创建reactor线程\n\n- 主进程先fork出manager进程, manager进程负责fork出worker进程以及task_worker进程。worker进程之后进入int swWorker_loop(swServer *serv, int worker_id), 也就是进入自己的事件循环, task_worker也是一样, 进入自己的事件循环。\n```\nstatic int swFactoryProcess_start(swFactory *factory);\n//swFactoryProcess_start会调用swManager_start生成manager进程\nint swManager_start(swServer *serv);\n// manager进程会fork出worker进程以及task_worker进程\n```\n- 主进程pthread_create出react线程, 主线程和react线程各自进入自己的事件循环, reactor线程执行static int swReactorThread_loop(swThreadParam *param), 等待处理事件\n```\n//主线程执行swReactorThread_start, 创建出reactor线程\nint swReactorThread_start(swServer *serv);\n```\n\n3. 结构图\nswoole process模式结构如下图所示,\n![swoole_server](https://picturestore.nos-eastchina1.126.net/swoole/swoole%20process%20%E7%BB%93%E6%9E%84%E5%9B%BE.jpg)\n- 上图并没有考虑task_worker进程, 在默认情况下, task_worker进程数为0\n\n# 三. 请求处理流程(process模式)\n## 3.1 reactor线程与worker进程之间的通信\n1. swoole master进程与worker进程之间的通信如下图所示,\n![image](https://picturestore.nos-eastchina1.126.net/swoole/swoole%20process%20ipc.png)\n- swoole使用SOCK_DGRAM, 而不是SOCK_STREAM, 这里是因为每个reactor线程负责处理多个请求, reactor接收到请求后会将信息转发给worker进程, 由worker进程负责处理,如果使用SOCK_STREAM, worker进程无法对tcp进行分包, 进而处理请求\n- swFactoryProcess_start函数中会根据worker进程数创建对应个数的套接字对, 用于reactor线程与worker进程通信(swPipeUnsock_create函数)\n\n2. 假设reactor线程有2个, worker进程有3个, 则reactor与worker之间的通信如下图所示,\n![image](https://picturestore.nos-eastchina1.126.net/swoole/swoole%20process%20ipc%E5%AE%9E%E4%BE%8B.png)\n- 每个reactor线程负责监听几个worker进程, 每个worker进程只有一个reactor线程监听(reactor_num<=worker_num)。swoole默认使用worker_process_id % reactor_num对worker进程进行分配, 交给对应的reactor线程进行监听\n- reactor线程收到某个worker进程的数据后会进行处理, 值得注意的是, 这个reactor线程可能并不是发送请求的那个reactor线程。\n\n3. reactor线程与worker进程通信的数据包\n```c\n//包头\ntypedef struct _swDataHead\n{\n    int fd;\n    uint32_t len;\n    int16_t from_id;\n    uint8_t type;\n    uint8_t flags;\n    uint16_t from_fd;\n#ifdef SW_BUFFER_RECV_TIME\n    double time;\n#endif\n} swDataHead;\n\n//reactor线程向worker进程发送的数据, 也就是worker进程收到的数据包\ntypedef struct\n{\n    swDataHead info;\n    char data[SW_IPC_BUFFER_SIZE];\n} swEventData;\n\n//worker进程向reactor线程发送的数据, 也就是reactor线程收到的数据包\ntypedef struct\n{\n    swDataHead info;\n    char data[0];\n} swPipeBuffer;\n```\n\n## 3.2 请求处理\n1. master进程中的主线程负责监听端口(listen), 接受连接(accept, 产生一个fd), 接受连接后将请求分配给reactor线程, 默认通过fd % reactor_num进行分配, 之后通过epoll_ctl将fd加入到对应reactor线程中(如果对应的reactor线程正在执行epoll_wait, 主线程会阻塞), 刚加入时监听写事件, 如果直接监听读事件, 可能会立刻被触发, 而监听写事件可以允许reactor线程进行一些初始化操作\n```\n//主线程执行epoll_ctl将fd(新接受的连接)加入到reactor线程的监听队列中\nepoll_ctl(epfd, fd, ...);\n//对应的reactor线程如果正在执行\nepoll_wait(epfd, ...);\n```\n- 这种情况主线程会被阻塞(两个线程同时操作epfd)\n- 如果reactor线程没有正在执行epoll_wait, 主线程则不会被阻塞, 执行成功后直接返回\n\n2. reactor线程中fd的写事件被触发, reactor线程负责处理, 发现是首次加入, 没有数据可写, 则开启读事件监听\n\n3. reactor线程读取到用户的请求数据, **一个请求的数据接收完后**, 将数据转发给worker进程, 默认是通过fd % worker_num进行分配\n- reactor发送给worker进程的数据包, 会包含一个头部, 头部中记录了reactor的信息\n- 如果发送的数据过大, 则需要将数据进行分片, 限于篇幅, reactor的分片, 后续再进行详细讲述\n- 可能存在多个reactor线程同时向同一个worker进程发送数据的情况, 故而swoole采用SOCK_DGRAM模式与worker进程进行通信, 通过每个数据包的包头, worker进程可以区分出是由哪个reactor线程发送的数据\n\n4. worker进程收到reactor发送的数据包后, 进行处理, 处理完成后, 将数据发送给主进程\n- worker进程发送给主进程的数据包, 也会包含一个头部, 当reactor线程收到数据包后, 能够知道对应的reactor线程, 请求的fd等信息\n\n5. 主进程收到worker进程发送的数据包, 这个会触发某个reactor线程进行处理\n- 这个reactor线程并不一定是之前发送请求给worker进程的那个reactor线程\n- 主进程的每个reactor线程都负责监听worker进程发送的数据包, 每个worker发送的数据包只会由一个reactor线程进行监听, 故而只会触发一个reactor线程\n\n6. reactor线程处理worker进程发送的数据包, 如果是直接发送数据给客户端, 则可以直接发送, 如果需要改变这个这个连接的监听状态(例如close), 则需要先找到监听这个连接的reactor, 进而改变这个连接的监听状态\n- reactor处理线程与reactor监听线程可能并不是同一个线程\n- reactor监听线程负责监听客户端发送的数据, 进而转发给worker进程\n- reactor处理线程负责监听worker进程发送给主进程的数据, 进而将数据发送给客户端\n\n# 四. gdb调试\n## 4.1 process模式启动\n```\n//fork manager进程\n#0  0x00007ffff67dae64 in fork () from /lib64/libc.so.6\n#1  0x00007ffff553888a in swoole_fork () at /root/code/swoole-src/src/core/base.c:186\n#2  0x00007ffff556afb8 in swManager_start (serv=serv@entry=0x1353f60) at /root/code/swoole-src/src/server/manager.cc:164\n#3  0x00007ffff5571dde in swFactoryProcess_start (factory=0x1353ff8) at /root/code/swoole-src/src/server/process.c:198\n#4  0x00007ffff556ef8b in swServer_start (serv=0x1353f60) at /root/code/swoole-src/src/server/master.cc:651\n#5  0x00007ffff55dc808 in zim_swoole_server_start (execute_data=<optimized out>, return_value=0x7fffffffac50)\n    at /root/code/swoole-src/swoole_server.cc:2946\n#6  0x00000000007bb068 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () at /root/php-7.3.3/Zend/zend_vm_execute.h:980\n#7  execute_ex (ex=0x7ffff7f850a8) at /root/php-7.3.3/Zend/zend_vm_execute.h:55485\n#8  0x00000000007bbf58 in zend_execute (op_array=op_array@entry=0x7ffff5e7b340, return_value=return_value@entry=0x7ffff5e1d030)\n    at /root/php-7.3.3/Zend/zend_vm_execute.h:60881\n#9  0x0000000000737554 in zend_execute_scripts (type=type@entry=8, retval=0x7ffff5e1d030, retval@entry=0x0,\n    file_count=file_count@entry=3) at /root/php-7.3.3/Zend/zend.c:1568\n#10 0x00000000006db4d0 in php_execute_script (primary_file=primary_file@entry=0x7fffffffd050) at /root/php-7.3.3/main/main.c:2630\n#11 0x00000000007be2f5 in do_cli (argc=2, argv=0x1165cd0) at /root/php-7.3.3/sapi/cli/php_cli.c:997\n#12 0x000000000043fc1f in main (argc=2, argv=0x1165cd0) at /root/php-7.3.3/sapi/cli/php_cli.c:1389\n\n\n// pthread_create reactor线程\n#0  0x00007ffff552e960 in pthread_create@plt () from /usr/local/lib/php/extensions/no-debug-non-zts-20180731/swoole.so\n#1  0x00007ffff5576959 in swReactorThread_start (serv=0x1353f60) at /root/code/swoole-src/src/server/reactor_thread.c:883\n#2  0x00007ffff556f006 in swServer_start (serv=0x1353f60) at /root/code/swoole-src/src/server/master.cc:670\n#3  0x00007ffff55dc808 in zim_swoole_server_start (execute_data=<optimized out>, return_value=0x7fffffffac50)\n    at /root/code/swoole-src/swoole_server.cc:2946\n#4  0x00000000007bb068 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () at /root/php-7.3.3/Zend/zend_vm_execute.h:980\n#5  execute_ex (ex=0x7fffffffab10) at /root/php-7.3.3/Zend/zend_vm_execute.h:55485\n#6  0x00000000007bbf58 in zend_execute (op_array=op_array@entry=0x7ffff5e7b340, return_value=return_value@entry=0x7ffff5e1d030)\n    at /root/php-7.3.3/Zend/zend_vm_execute.h:60881\n#7  0x0000000000737554 in zend_execute_scripts (type=type@entry=8, retval=0x7ffff5e1d030, retval@entry=0x0,\n    file_count=file_count@entry=3) at /root/php-7.3.3/Zend/zend.c:1568\n#8  0x00000000006db4d0 in php_execute_script (primary_file=primary_file@entry=0x7fffffffd050) at /root/php-7.3.3/main/main.c:2630\n#9  0x00000000007be2f5 in do_cli (argc=2, argv=0x1165cd0) at /root/php-7.3.3/sapi/cli/php_cli.c:997\n#10 0x000000000043fc1f in main (argc=2, argv=0x1165cd0) at /root/php-7.3.3/sapi/cli/php_cli.c:1389\n```\n\n## 4.2 base模式启动\n```\n//base 模式下的启动\n#0  0x00007ffff67dae64 in fork () from /lib64/libc.so.6\n#1  0x00007ffff553888a in swoole_fork () at /root/code/swoole-src/src/core/base.c:186\n#2  0x00007ffff5558557 in swProcessPool_spawn (pool=pool@entry=0x7ffff2d2a308, worker=0x7ffff2d2a778)\n    at /root/code/swoole-src/src/network/process_pool.c:392\n#3  0x00007ffff5558710 in swProcessPool_start (pool=0x7ffff2d2a308) at /root/code/swoole-src/src/network/process_pool.c:227\n#4  0x00007ffff55741cf in swReactorProcess_start (serv=0x1353f60) at /root/code/swoole-src/src/server/reactor_process.cc:176\n#5  0x00007ffff556f21d in swServer_start (serv=0x1353f60) at /root/code/swoole-src/src/server/master.cc:666\n#6  0x00007ffff55dc808 in zim_swoole_server_start (execute_data=<optimized out>, return_value=0x7fffffffac50)\n    at /root/code/swoole-src/swoole_server.cc:2946\n#7  0x00000000007bb068 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () at /root/php-7.3.3/Zend/zend_vm_execute.h:980\n#8  execute_ex (ex=0x7ffff2d2a308) at /root/php-7.3.3/Zend/zend_vm_execute.h:55485\n#9  0x00000000007bbf58 in zend_execute (op_array=op_array@entry=0x7ffff5e7b340, return_value=return_value@entry=0x7ffff5e1d030)\n    at /root/php-7.3.3/Zend/zend_vm_execute.h:60881\n#10 0x0000000000737554 in zend_execute_scripts (type=type@entry=8, retval=0x7ffff5e1d030, retval@entry=0x0,\n    file_count=file_count@entry=3) at /root/php-7.3.3/Zend/zend.c:1568\n#11 0x00000000006db4d0 in php_execute_script (primary_file=primary_file@entry=0x7fffffffd050) at /root/php-7.3.3/main/main.c:2630\n#12 0x00000000007be2f5 in do_cli (argc=2, argv=0x1165cd0) at /root/php-7.3.3/sapi/cli/php_cli.c:997\n#13 0x000000000043fc1f in main (argc=2, argv=0x1165cd0) at /root/php-7.3.3/sapi/cli/php_cli.c:1389\n```\n\n# 五. 参考\n- UNIX网络编程\n- UNIX环境高级编程\n- https://wiki.swoole.com/\n- https://www.cnblogs.com/welhzh/p/3772164.html\n- https://www.cnblogs.com/JohnABC/p/4079669.html\n","slug":"swoole-server-introduce","published":1,"updated":"2019-05-27T02:21:55.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw5qxkqg000ctxs6iijihk7w","content":"<h1 id=\"一-基础知识\"><a href=\"#一-基础知识\" class=\"headerlink\" title=\"一. 基础知识\"></a>一. 基础知识</h1><h2 id=\"1-1-swoole\"><a href=\"#1-1-swoole\" class=\"headerlink\" title=\"1.1 swoole\"></a>1.1 swoole</h2><p>swoole是面向生产环境的php异步网络通信引擎, php开发人员可以利用swoole开发出高性能的server服务。swoole的server部分, 内容很多, 也涉及很多的知识点, 本文仅对其server进行简单的概述, 具体的实现细节在后续的文章中再进行详细介绍。</p>\n<h2 id=\"1-2-网络编程\"><a href=\"#1-2-网络编程\" class=\"headerlink\" title=\"1.2 网络编程\"></a>1.2 网络编程</h2><ol>\n<li>网络通信是指在一台(或者多台)机器上启动一个(或者多个)进程, 监听一个(或者多个)端口, 按照某种协议(可以是标准协议http, dns; 也可以是自行定义的协议)与客户端交换信息。</li>\n<li>目前的网络编程多是在tcp, udp或者更上层的协议之上进行编程。swoole的server部分是基于tcp以及udp协议的。</li>\n<li>利用udp进行编程较为简单, 本文主要介绍tcp协议之上的网络编程</li>\n<li>TCP网络编程主要涉及4种事件,</li>\n</ol>\n<ul>\n<li>连接建立: 主要是指客户端发起连接(connect)以及服务端接受连接(accept)</li>\n<li>消息到达: 服务端接受到客户端发送的数据, 该事件是TCP网络编程最重要的事件, 服务端对于该类事件进行处理时, 可以采用阻塞式或者非阻塞式, 除此之外, 服务端还需要考虑分包, 应用层缓冲区等问题</li>\n<li>消息发送成功: 发送成功是指应用层将数据成功发送到内核的套接字发送缓冲区中, 并不是指客户端成功接受数据。对于低流量的服务而言, 数据通常一次性即可发送完, 并不需要关心此类事件。如果一次性不能将全部数据发送到内核缓冲区, 则需要关心消息是否成功发送(阻塞式编程在系统调用(write, writev, send等)返回后即是发送成功, 非阻塞式编程则需要考虑实际写入的数据是否与预期一致)</li>\n<li>连接断开: 需要考虑客户端断开连接(read返回0)以及服务端断开连接(close, shutdown)</li>\n</ul>\n<h2 id=\"1-3-进程间通信\"><a href=\"#1-3-进程间通信\" class=\"headerlink\" title=\"1.3 进程间通信\"></a>1.3 进程间通信</h2><ol>\n<li>进程之间的通信有无名管道(pipe), 有名管道(fifo), 信号, 信号量, 套接字, 共享内存等方式</li>\n<li>swoole中采用unix域套接字用于多进程之间的通信(指swoole内部进程之间)</li>\n</ol>\n<h2 id=\"1-4-socketpair\"><a href=\"#1-4-socketpair\" class=\"headerlink\" title=\"1.4 socketpair\"></a>1.4 socketpair</h2><ol>\n<li>socketpair用于创建一个套接字对, 类似于pipe, 不同的是pipe是单向通信, 双向通信需要创建两次, socketpair调用一次即可实现双向通信, 除此之外, 由于使用的是套接字, 还可以定义数据交换的方式</li>\n<li>socketpair系统调用<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">socketpair</span><span class=\"params\">(<span class=\"keyword\">int</span> domain, <span class=\"keyword\">int</span> type, <span class=\"keyword\">int</span> protocol, <span class=\"keyword\">int</span> sv[<span class=\"number\">2</span>])</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//domain表示协议簇</span></span><br><span class=\"line\"><span class=\"comment\">//type表示类型</span></span><br><span class=\"line\"><span class=\"comment\">//protocol表示协议, SOCK_STREAM表示流协议(类似tcp), SOCK_DGRAM表示数据报协议(类似udp)</span></span><br><span class=\"line\"><span class=\"comment\">//sv用于存储建立的套接字对, 也就是两个套接字文件描述符</span></span><br><span class=\"line\"><span class=\"comment\">//成功返回0, 否则返回-1, 可以从errno获取错误信息</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>调用成功后sv[0], sv[1]分别存储一个文件描述符</li>\n<li>向sv[0]中写入, 可以从sv[1]中读取</li>\n<li>向sv[1]中写入, 可以从sv[0]中读取</li>\n<li>进程调用socketpair后, fork子进程, 子进程会默认继承sv[0], sv[1]这两个文件描述符, 进而可以实现父子进程间通信。例如, 父进程向sv[0]中写入, 子进程从sv[1]中读取; 子进程向sv[1]中写入, 父进程从sv[0]中读取。</li>\n</ul>\n<h2 id=\"1-5-守护进程-daemon\"><a href=\"#1-5-守护进程-daemon\" class=\"headerlink\" title=\"1.5 守护进程(daemon)\"></a>1.5 守护进程(daemon)</h2><ol>\n<li>守护进程是一种特殊的后台进程, 它脱离于终端, 用于周期性的执行某种任务</li>\n<li>进程组</li>\n</ol>\n<ul>\n<li>每个进程都属于一个进程组</li>\n<li>每个进程组都有一个进程组号, 也就是该组组长的进程号(PID)</li>\n<li>一个进程只能为自己或者其子进程设置进程组号</li>\n</ul>\n<ol start=\"3\">\n<li>会话</li>\n</ol>\n<ul>\n<li>一个会话可以包含多个进程组, 这些进程组中最多只能有一个前台进程组(也可以没有)</li>\n<li>setsid可以创建一个新的会话, 该进程不能是进程组的组长。setsid调用完成后, 该进程成为这个会话的首进程(领头进程), 同时变成一个新的进程组的组长, 如果该进程之前有控制终端, 则该进程与终端的联系被断开</li>\n<li>用户通过终端登录或者网络登录, 会创建一个新的会话</li>\n<li>一个会话最多只能有一个控制终端</li>\n</ul>\n<ol start=\"4\">\n<li>创建守护进程的方式</li>\n</ol>\n<ul>\n<li>fork子进程后, 父进程退出, 子进程执行setsid即可成为守护进程。这种方式下, 子进程是会话的领头进程, 可以重新打开终端, 此时可以再次fork, fork产生的子进程无法再打开终端。第二次fork并不是必须的, 只是为了防止子进程再次打开终端</li>\n<li>linux提供了daemon函数用于创建守护进程</li>\n</ul>\n<h2 id=\"1-6-swoole-tcp-server示例\"><a href=\"#1-6-swoole-tcp-server示例\" class=\"headerlink\" title=\"1.6 swoole tcp server示例\"></a>1.6 swoole tcp server示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//创建server</span></span><br><span class=\"line\">$serv = <span class=\"keyword\">new</span> Swoole\\Server(<span class=\"string\">'0.0.0.0'</span>, <span class=\"number\">9501</span>, SWOOLE_PROCESS, SWOOLE_SOCK_TCP);</span><br><span class=\"line\"><span class=\"comment\">//设置server的参数</span></span><br><span class=\"line\">$serv-&gt;set(<span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"string\">'reactor_num'</span> =&gt; <span class=\"number\">2</span>, <span class=\"comment\">//reactor thread num</span></span><br><span class=\"line\">    <span class=\"string\">'worker_num'</span> =&gt; <span class=\"number\">3</span>,  <span class=\"comment\">//worker process num</span></span><br><span class=\"line\">));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置事件回调</span></span><br><span class=\"line\">$serv-&gt;on(<span class=\"string\">'connect'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($serv, $fd)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"Client:Connect.\\n\"</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$serv-&gt;on(<span class=\"string\">'receive'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($serv, $fd, $reactor_id, $data)</span> </span>&#123;</span><br><span class=\"line\">    $serv-&gt;send($fd, <span class=\"string\">'Swoole: '</span>.$data);</span><br><span class=\"line\">    $serv-&gt;close($fd);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$serv-&gt;on(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($serv, $fd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"Client: Close.\\n\"</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//启动server</span></span><br><span class=\"line\">$serv-&gt;start();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>上述代码在cli模式下执行时, 经过词法分析, 语法分析生成opcode, 进而交由zend虚拟机执行</li>\n<li>zend虚拟机在执行到$serv-&gt;start()时, 启动swoole server</li>\n<li>上述代码中设置的事件回调是在worker进程中执行</li>\n</ul>\n<h1 id=\"二-swoole-server\"><a href=\"#二-swoole-server\" class=\"headerlink\" title=\"二. swoole server\"></a>二. swoole server</h1><h2 id=\"2-1-base模式\"><a href=\"#2-1-base模式\" class=\"headerlink\" title=\"2.1 base模式\"></a>2.1 base模式</h2><ol>\n<li>说明</li>\n</ol>\n<ul>\n<li>base模式采用多进程模型, 这种模型与nginx一致, 每个进程只有一个线程, 主进程负责管理工作进程, 工作进程负责监听端口, 接受连接, 处理请求以及关闭连接</li>\n<li>多个进程同时监听端口, 会有惊群问题, 目前swoole并没有解决</li>\n<li>linux 内核3.9及其后续版本提供了新的套接字参数SO_REUSEPORT, 该参数允许多个进程绑定到同一个端口, 内核在接受到新的连接请求时, 会唤醒其中一个进行处理, 内核层面也会做负载均衡, 可以解决上述的惊群问题</li>\n<li>base模式下, reactor_number参数并没有作用, 因为每个进程只有一个线程</li>\n<li>如果worker进程数设置为1, 则不会fork出worker进程, 主进程直接处理请求</li>\n</ul>\n<ol start=\"2\">\n<li>启动过程</li>\n</ol>\n<ul>\n<li>php代码执行到$serv-&gt;start()时, 主进程进入int swServer_start(swServer *serv)函数, 该函数负责启动server</li>\n<li>在函数swServer_start中会调用swReactorProcess_start, 这个函数会fork出多个worker进程</li>\n<li>主进程和worker进程各自进入自己的事件循环, 处理各类事件</li>\n</ul>\n<h2 id=\"2-2-process模式\"><a href=\"#2-2-process模式\" class=\"headerlink\" title=\"2.2 process模式\"></a>2.2 process模式</h2><ol>\n<li>说明</li>\n</ol>\n<ul>\n<li>这种模式为多进程多线程, 有主进程, manager进程, worker进程, task_worker进程</li>\n<li>主进程下有多个线程, 主线程负责接受连接, 之后交给react线程处理请求。 react线程负责接收数据包, 并将数据转发给worker进程进行处理, 之后处理worker进程返回的数据</li>\n<li>manager进程, 该进程为单线程, 主要负责管理worker进程, 类似于nginx中的主进程, 当worker进程异常退出时, manager进程负责重新fork出一个worker进程</li>\n<li>worker进程, 该进程为单线程, 负责具体处理请求</li>\n<li>task_worker进程, 用于处理比较耗时的任务, 默认不开启</li>\n<li>worker进程与主进程中的react线程使用域套接字进行通信, worker进程之间不进行通信</li>\n</ul>\n<ol start=\"2\">\n<li>启动过程</li>\n</ol>\n<ul>\n<li><p>swoole server启动入口: swServer_start函数,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//php 代码中$serv-&gt;start(); 会调用函数, 进行server start</span><br><span class=\"line\">int swServer_start(swServer *serv);</span><br><span class=\"line\"></span><br><span class=\"line\">// 该函数首先进行必要的参数检查</span><br><span class=\"line\">static int swServer_start_check(swServer *serv);</span><br><span class=\"line\">// 其中有,</span><br><span class=\"line\">if (serv-&gt;worker_num &lt; serv-&gt;reactor_num)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    serv-&gt;reactor_num = serv-&gt;worker_num;</span><br><span class=\"line\">&#125;//也就是说reactor_num &lt;= worker_num</span><br><span class=\"line\"></span><br><span class=\"line\">//之后执行factory start, 也就是swFactoryProcess_start函数, 该函数会fork出manager进程, manager进程进而fork出worker进程以及task_worker进程</span><br><span class=\"line\">if (factory-&gt;start(factory) &lt; 0)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return SW_ERR;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//然后主进程的主线程生成reactor线程</span><br><span class=\"line\">if (serv-&gt;factory_mode == SW_MODE_BASE)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ret = swReactorProcess_start(serv);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ret = swReactorThread_start(serv);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果设置了daemon模式, 在必要的参数检查完后, 先将自己变为守护进程再fork manager进程, 进而创建reactor线程</p>\n</li>\n<li><p>主进程先fork出manager进程, manager进程负责fork出worker进程以及task_worker进程。worker进程之后进入int swWorker_loop(swServer *serv, int worker_id), 也就是进入自己的事件循环, task_worker也是一样, 进入自己的事件循环。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static int swFactoryProcess_start(swFactory *factory);</span><br><span class=\"line\">//swFactoryProcess_start会调用swManager_start生成manager进程</span><br><span class=\"line\">int swManager_start(swServer *serv);</span><br><span class=\"line\">// manager进程会fork出worker进程以及task_worker进程</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>主进程pthread_create出react线程, 主线程和react线程各自进入自己的事件循环, reactor线程执行static int swReactorThread_loop(swThreadParam *param), 等待处理事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//主线程执行swReactorThread_start, 创建出reactor线程</span><br><span class=\"line\">int swReactorThread_start(swServer *serv);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"3\">\n<li>结构图<br>swoole process模式结构如下图所示,<br><img src=\"https://picturestore.nos-eastchina1.126.net/swoole/swoole%20process%20%E7%BB%93%E6%9E%84%E5%9B%BE.jpg\" alt=\"swoole_server\"></li>\n</ol>\n<ul>\n<li>上图并没有考虑task_worker进程, 在默认情况下, task_worker进程数为0</li>\n</ul>\n<h1 id=\"三-请求处理流程-process模式\"><a href=\"#三-请求处理流程-process模式\" class=\"headerlink\" title=\"三. 请求处理流程(process模式)\"></a>三. 请求处理流程(process模式)</h1><h2 id=\"3-1-reactor线程与worker进程之间的通信\"><a href=\"#3-1-reactor线程与worker进程之间的通信\" class=\"headerlink\" title=\"3.1 reactor线程与worker进程之间的通信\"></a>3.1 reactor线程与worker进程之间的通信</h2><ol>\n<li>swoole master进程与worker进程之间的通信如下图所示,<br><img src=\"https://picturestore.nos-eastchina1.126.net/swoole/swoole%20process%20ipc.png\" alt=\"image\"></li>\n</ol>\n<ul>\n<li>swoole使用SOCK_DGRAM, 而不是SOCK_STREAM, 这里是因为每个reactor线程负责处理多个请求, reactor接收到请求后会将信息转发给worker进程, 由worker进程负责处理,如果使用SOCK_STREAM, worker进程无法对tcp进行分包, 进而处理请求</li>\n<li>swFactoryProcess_start函数中会根据worker进程数创建对应个数的套接字对, 用于reactor线程与worker进程通信(swPipeUnsock_create函数)</li>\n</ul>\n<ol start=\"2\">\n<li>假设reactor线程有2个, worker进程有3个, 则reactor与worker之间的通信如下图所示,<br><img src=\"https://picturestore.nos-eastchina1.126.net/swoole/swoole%20process%20ipc%E5%AE%9E%E4%BE%8B.png\" alt=\"image\"></li>\n</ol>\n<ul>\n<li>每个reactor线程负责监听几个worker进程, 每个worker进程只有一个reactor线程监听(reactor_num&lt;=worker_num)。swoole默认使用worker_process_id % reactor_num对worker进程进行分配, 交给对应的reactor线程进行监听</li>\n<li>reactor线程收到某个worker进程的数据后会进行处理, 值得注意的是, 这个reactor线程可能并不是发送请求的那个reactor线程。</li>\n</ul>\n<ol start=\"3\">\n<li>reactor线程与worker进程通信的数据包<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//包头</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">swDataHead</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> fd;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> len;</span><br><span class=\"line\">    <span class=\"keyword\">int16_t</span> from_id;</span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> type;</span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> flags;</span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span> from_fd;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> SW_BUFFER_RECV_TIME</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> time;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125; swDataHead;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//reactor线程向worker进程发送的数据, 也就是worker进程收到的数据包</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    swDataHead info;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> data[SW_IPC_BUFFER_SIZE];</span><br><span class=\"line\">&#125; swEventData;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//worker进程向reactor线程发送的数据, 也就是reactor线程收到的数据包</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    swDataHead info;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> data[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125; swPipeBuffer;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"3-2-请求处理\"><a href=\"#3-2-请求处理\" class=\"headerlink\" title=\"3.2 请求处理\"></a>3.2 请求处理</h2><ol>\n<li>master进程中的主线程负责监听端口(listen), 接受连接(accept, 产生一个fd), 接受连接后将请求分配给reactor线程, 默认通过fd % reactor_num进行分配, 之后通过epoll_ctl将fd加入到对应reactor线程中(如果对应的reactor线程正在执行epoll_wait, 主线程会阻塞), 刚加入时监听写事件, 如果直接监听读事件, 可能会立刻被触发, 而监听写事件可以允许reactor线程进行一些初始化操作<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//主线程执行epoll_ctl将fd(新接受的连接)加入到reactor线程的监听队列中</span><br><span class=\"line\">epoll_ctl(epfd, fd, ...);</span><br><span class=\"line\">//对应的reactor线程如果正在执行</span><br><span class=\"line\">epoll_wait(epfd, ...);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>这种情况主线程会被阻塞(两个线程同时操作epfd)</li>\n<li>如果reactor线程没有正在执行epoll_wait, 主线程则不会被阻塞, 执行成功后直接返回</li>\n</ul>\n<ol start=\"2\">\n<li><p>reactor线程中fd的写事件被触发, reactor线程负责处理, 发现是首次加入, 没有数据可写, 则开启读事件监听</p>\n</li>\n<li><p>reactor线程读取到用户的请求数据, <strong>一个请求的数据接收完后</strong>, 将数据转发给worker进程, 默认是通过fd % worker_num进行分配</p>\n</li>\n</ol>\n<ul>\n<li>reactor发送给worker进程的数据包, 会包含一个头部, 头部中记录了reactor的信息</li>\n<li>如果发送的数据过大, 则需要将数据进行分片, 限于篇幅, reactor的分片, 后续再进行详细讲述</li>\n<li>可能存在多个reactor线程同时向同一个worker进程发送数据的情况, 故而swoole采用SOCK_DGRAM模式与worker进程进行通信, 通过每个数据包的包头, worker进程可以区分出是由哪个reactor线程发送的数据</li>\n</ul>\n<ol start=\"4\">\n<li>worker进程收到reactor发送的数据包后, 进行处理, 处理完成后, 将数据发送给主进程</li>\n</ol>\n<ul>\n<li>worker进程发送给主进程的数据包, 也会包含一个头部, 当reactor线程收到数据包后, 能够知道对应的reactor线程, 请求的fd等信息</li>\n</ul>\n<ol start=\"5\">\n<li>主进程收到worker进程发送的数据包, 这个会触发某个reactor线程进行处理</li>\n</ol>\n<ul>\n<li>这个reactor线程并不一定是之前发送请求给worker进程的那个reactor线程</li>\n<li>主进程的每个reactor线程都负责监听worker进程发送的数据包, 每个worker发送的数据包只会由一个reactor线程进行监听, 故而只会触发一个reactor线程</li>\n</ul>\n<ol start=\"6\">\n<li>reactor线程处理worker进程发送的数据包, 如果是直接发送数据给客户端, 则可以直接发送, 如果需要改变这个这个连接的监听状态(例如close), 则需要先找到监听这个连接的reactor, 进而改变这个连接的监听状态</li>\n</ol>\n<ul>\n<li>reactor处理线程与reactor监听线程可能并不是同一个线程</li>\n<li>reactor监听线程负责监听客户端发送的数据, 进而转发给worker进程</li>\n<li>reactor处理线程负责监听worker进程发送给主进程的数据, 进而将数据发送给客户端</li>\n</ul>\n<h1 id=\"四-gdb调试\"><a href=\"#四-gdb调试\" class=\"headerlink\" title=\"四. gdb调试\"></a>四. gdb调试</h1><h2 id=\"4-1-process模式启动\"><a href=\"#4-1-process模式启动\" class=\"headerlink\" title=\"4.1 process模式启动\"></a>4.1 process模式启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//fork manager进程</span><br><span class=\"line\">#0  0x00007ffff67dae64 in fork () from /lib64/libc.so.6</span><br><span class=\"line\">#1  0x00007ffff553888a in swoole_fork () at /root/code/swoole-src/src/core/base.c:186</span><br><span class=\"line\">#2  0x00007ffff556afb8 in swManager_start (serv=serv@entry=0x1353f60) at /root/code/swoole-src/src/server/manager.cc:164</span><br><span class=\"line\">#3  0x00007ffff5571dde in swFactoryProcess_start (factory=0x1353ff8) at /root/code/swoole-src/src/server/process.c:198</span><br><span class=\"line\">#4  0x00007ffff556ef8b in swServer_start (serv=0x1353f60) at /root/code/swoole-src/src/server/master.cc:651</span><br><span class=\"line\">#5  0x00007ffff55dc808 in zim_swoole_server_start (execute_data=&lt;optimized out&gt;, return_value=0x7fffffffac50)</span><br><span class=\"line\">    at /root/code/swoole-src/swoole_server.cc:2946</span><br><span class=\"line\">#6  0x00000000007bb068 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () at /root/php-7.3.3/Zend/zend_vm_execute.h:980</span><br><span class=\"line\">#7  execute_ex (ex=0x7ffff7f850a8) at /root/php-7.3.3/Zend/zend_vm_execute.h:55485</span><br><span class=\"line\">#8  0x00000000007bbf58 in zend_execute (op_array=op_array@entry=0x7ffff5e7b340, return_value=return_value@entry=0x7ffff5e1d030)</span><br><span class=\"line\">    at /root/php-7.3.3/Zend/zend_vm_execute.h:60881</span><br><span class=\"line\">#9  0x0000000000737554 in zend_execute_scripts (type=type@entry=8, retval=0x7ffff5e1d030, retval@entry=0x0,</span><br><span class=\"line\">    file_count=file_count@entry=3) at /root/php-7.3.3/Zend/zend.c:1568</span><br><span class=\"line\">#10 0x00000000006db4d0 in php_execute_script (primary_file=primary_file@entry=0x7fffffffd050) at /root/php-7.3.3/main/main.c:2630</span><br><span class=\"line\">#11 0x00000000007be2f5 in do_cli (argc=2, argv=0x1165cd0) at /root/php-7.3.3/sapi/cli/php_cli.c:997</span><br><span class=\"line\">#12 0x000000000043fc1f in main (argc=2, argv=0x1165cd0) at /root/php-7.3.3/sapi/cli/php_cli.c:1389</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// pthread_create reactor线程</span><br><span class=\"line\">#0  0x00007ffff552e960 in pthread_create@plt () from /usr/local/lib/php/extensions/no-debug-non-zts-20180731/swoole.so</span><br><span class=\"line\">#1  0x00007ffff5576959 in swReactorThread_start (serv=0x1353f60) at /root/code/swoole-src/src/server/reactor_thread.c:883</span><br><span class=\"line\">#2  0x00007ffff556f006 in swServer_start (serv=0x1353f60) at /root/code/swoole-src/src/server/master.cc:670</span><br><span class=\"line\">#3  0x00007ffff55dc808 in zim_swoole_server_start (execute_data=&lt;optimized out&gt;, return_value=0x7fffffffac50)</span><br><span class=\"line\">    at /root/code/swoole-src/swoole_server.cc:2946</span><br><span class=\"line\">#4  0x00000000007bb068 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () at /root/php-7.3.3/Zend/zend_vm_execute.h:980</span><br><span class=\"line\">#5  execute_ex (ex=0x7fffffffab10) at /root/php-7.3.3/Zend/zend_vm_execute.h:55485</span><br><span class=\"line\">#6  0x00000000007bbf58 in zend_execute (op_array=op_array@entry=0x7ffff5e7b340, return_value=return_value@entry=0x7ffff5e1d030)</span><br><span class=\"line\">    at /root/php-7.3.3/Zend/zend_vm_execute.h:60881</span><br><span class=\"line\">#7  0x0000000000737554 in zend_execute_scripts (type=type@entry=8, retval=0x7ffff5e1d030, retval@entry=0x0,</span><br><span class=\"line\">    file_count=file_count@entry=3) at /root/php-7.3.3/Zend/zend.c:1568</span><br><span class=\"line\">#8  0x00000000006db4d0 in php_execute_script (primary_file=primary_file@entry=0x7fffffffd050) at /root/php-7.3.3/main/main.c:2630</span><br><span class=\"line\">#9  0x00000000007be2f5 in do_cli (argc=2, argv=0x1165cd0) at /root/php-7.3.3/sapi/cli/php_cli.c:997</span><br><span class=\"line\">#10 0x000000000043fc1f in main (argc=2, argv=0x1165cd0) at /root/php-7.3.3/sapi/cli/php_cli.c:1389</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-base模式启动\"><a href=\"#4-2-base模式启动\" class=\"headerlink\" title=\"4.2 base模式启动\"></a>4.2 base模式启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//base 模式下的启动</span><br><span class=\"line\">#0  0x00007ffff67dae64 in fork () from /lib64/libc.so.6</span><br><span class=\"line\">#1  0x00007ffff553888a in swoole_fork () at /root/code/swoole-src/src/core/base.c:186</span><br><span class=\"line\">#2  0x00007ffff5558557 in swProcessPool_spawn (pool=pool@entry=0x7ffff2d2a308, worker=0x7ffff2d2a778)</span><br><span class=\"line\">    at /root/code/swoole-src/src/network/process_pool.c:392</span><br><span class=\"line\">#3  0x00007ffff5558710 in swProcessPool_start (pool=0x7ffff2d2a308) at /root/code/swoole-src/src/network/process_pool.c:227</span><br><span class=\"line\">#4  0x00007ffff55741cf in swReactorProcess_start (serv=0x1353f60) at /root/code/swoole-src/src/server/reactor_process.cc:176</span><br><span class=\"line\">#5  0x00007ffff556f21d in swServer_start (serv=0x1353f60) at /root/code/swoole-src/src/server/master.cc:666</span><br><span class=\"line\">#6  0x00007ffff55dc808 in zim_swoole_server_start (execute_data=&lt;optimized out&gt;, return_value=0x7fffffffac50)</span><br><span class=\"line\">    at /root/code/swoole-src/swoole_server.cc:2946</span><br><span class=\"line\">#7  0x00000000007bb068 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () at /root/php-7.3.3/Zend/zend_vm_execute.h:980</span><br><span class=\"line\">#8  execute_ex (ex=0x7ffff2d2a308) at /root/php-7.3.3/Zend/zend_vm_execute.h:55485</span><br><span class=\"line\">#9  0x00000000007bbf58 in zend_execute (op_array=op_array@entry=0x7ffff5e7b340, return_value=return_value@entry=0x7ffff5e1d030)</span><br><span class=\"line\">    at /root/php-7.3.3/Zend/zend_vm_execute.h:60881</span><br><span class=\"line\">#10 0x0000000000737554 in zend_execute_scripts (type=type@entry=8, retval=0x7ffff5e1d030, retval@entry=0x0,</span><br><span class=\"line\">    file_count=file_count@entry=3) at /root/php-7.3.3/Zend/zend.c:1568</span><br><span class=\"line\">#11 0x00000000006db4d0 in php_execute_script (primary_file=primary_file@entry=0x7fffffffd050) at /root/php-7.3.3/main/main.c:2630</span><br><span class=\"line\">#12 0x00000000007be2f5 in do_cli (argc=2, argv=0x1165cd0) at /root/php-7.3.3/sapi/cli/php_cli.c:997</span><br><span class=\"line\">#13 0x000000000043fc1f in main (argc=2, argv=0x1165cd0) at /root/php-7.3.3/sapi/cli/php_cli.c:1389</span><br></pre></td></tr></table></figure>\n<h1 id=\"五-参考\"><a href=\"#五-参考\" class=\"headerlink\" title=\"五. 参考\"></a>五. 参考</h1><ul>\n<li>UNIX网络编程</li>\n<li>UNIX环境高级编程</li>\n<li><a href=\"https://wiki.swoole.com/\" target=\"_blank\" rel=\"noopener\">https://wiki.swoole.com/</a></li>\n<li><a href=\"https://www.cnblogs.com/welhzh/p/3772164.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/welhzh/p/3772164.html</a></li>\n<li><a href=\"https://www.cnblogs.com/JohnABC/p/4079669.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/JohnABC/p/4079669.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-基础知识\"><a href=\"#一-基础知识\" class=\"headerlink\" title=\"一. 基础知识\"></a>一. 基础知识</h1><h2 id=\"1-1-swoole\"><a href=\"#1-1-swoole\" class=\"headerlink\" title=\"1.1 swoole\"></a>1.1 swoole</h2><p>swoole是面向生产环境的php异步网络通信引擎, php开发人员可以利用swoole开发出高性能的server服务。swoole的server部分, 内容很多, 也涉及很多的知识点, 本文仅对其server进行简单的概述, 具体的实现细节在后续的文章中再进行详细介绍。</p>\n<h2 id=\"1-2-网络编程\"><a href=\"#1-2-网络编程\" class=\"headerlink\" title=\"1.2 网络编程\"></a>1.2 网络编程</h2><ol>\n<li>网络通信是指在一台(或者多台)机器上启动一个(或者多个)进程, 监听一个(或者多个)端口, 按照某种协议(可以是标准协议http, dns; 也可以是自行定义的协议)与客户端交换信息。</li>\n<li>目前的网络编程多是在tcp, udp或者更上层的协议之上进行编程。swoole的server部分是基于tcp以及udp协议的。</li>\n<li>利用udp进行编程较为简单, 本文主要介绍tcp协议之上的网络编程</li>\n<li>TCP网络编程主要涉及4种事件,</li>\n</ol>\n<ul>\n<li>连接建立: 主要是指客户端发起连接(connect)以及服务端接受连接(accept)</li>\n<li>消息到达: 服务端接受到客户端发送的数据, 该事件是TCP网络编程最重要的事件, 服务端对于该类事件进行处理时, 可以采用阻塞式或者非阻塞式, 除此之外, 服务端还需要考虑分包, 应用层缓冲区等问题</li>\n<li>消息发送成功: 发送成功是指应用层将数据成功发送到内核的套接字发送缓冲区中, 并不是指客户端成功接受数据。对于低流量的服务而言, 数据通常一次性即可发送完, 并不需要关心此类事件。如果一次性不能将全部数据发送到内核缓冲区, 则需要关心消息是否成功发送(阻塞式编程在系统调用(write, writev, send等)返回后即是发送成功, 非阻塞式编程则需要考虑实际写入的数据是否与预期一致)</li>\n<li>连接断开: 需要考虑客户端断开连接(read返回0)以及服务端断开连接(close, shutdown)</li>\n</ul>\n<h2 id=\"1-3-进程间通信\"><a href=\"#1-3-进程间通信\" class=\"headerlink\" title=\"1.3 进程间通信\"></a>1.3 进程间通信</h2><ol>\n<li>进程之间的通信有无名管道(pipe), 有名管道(fifo), 信号, 信号量, 套接字, 共享内存等方式</li>\n<li>swoole中采用unix域套接字用于多进程之间的通信(指swoole内部进程之间)</li>\n</ol>\n<h2 id=\"1-4-socketpair\"><a href=\"#1-4-socketpair\" class=\"headerlink\" title=\"1.4 socketpair\"></a>1.4 socketpair</h2><ol>\n<li>socketpair用于创建一个套接字对, 类似于pipe, 不同的是pipe是单向通信, 双向通信需要创建两次, socketpair调用一次即可实现双向通信, 除此之外, 由于使用的是套接字, 还可以定义数据交换的方式</li>\n<li>socketpair系统调用<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">socketpair</span><span class=\"params\">(<span class=\"keyword\">int</span> domain, <span class=\"keyword\">int</span> type, <span class=\"keyword\">int</span> protocol, <span class=\"keyword\">int</span> sv[<span class=\"number\">2</span>])</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//domain表示协议簇</span></span><br><span class=\"line\"><span class=\"comment\">//type表示类型</span></span><br><span class=\"line\"><span class=\"comment\">//protocol表示协议, SOCK_STREAM表示流协议(类似tcp), SOCK_DGRAM表示数据报协议(类似udp)</span></span><br><span class=\"line\"><span class=\"comment\">//sv用于存储建立的套接字对, 也就是两个套接字文件描述符</span></span><br><span class=\"line\"><span class=\"comment\">//成功返回0, 否则返回-1, 可以从errno获取错误信息</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>调用成功后sv[0], sv[1]分别存储一个文件描述符</li>\n<li>向sv[0]中写入, 可以从sv[1]中读取</li>\n<li>向sv[1]中写入, 可以从sv[0]中读取</li>\n<li>进程调用socketpair后, fork子进程, 子进程会默认继承sv[0], sv[1]这两个文件描述符, 进而可以实现父子进程间通信。例如, 父进程向sv[0]中写入, 子进程从sv[1]中读取; 子进程向sv[1]中写入, 父进程从sv[0]中读取。</li>\n</ul>\n<h2 id=\"1-5-守护进程-daemon\"><a href=\"#1-5-守护进程-daemon\" class=\"headerlink\" title=\"1.5 守护进程(daemon)\"></a>1.5 守护进程(daemon)</h2><ol>\n<li>守护进程是一种特殊的后台进程, 它脱离于终端, 用于周期性的执行某种任务</li>\n<li>进程组</li>\n</ol>\n<ul>\n<li>每个进程都属于一个进程组</li>\n<li>每个进程组都有一个进程组号, 也就是该组组长的进程号(PID)</li>\n<li>一个进程只能为自己或者其子进程设置进程组号</li>\n</ul>\n<ol start=\"3\">\n<li>会话</li>\n</ol>\n<ul>\n<li>一个会话可以包含多个进程组, 这些进程组中最多只能有一个前台进程组(也可以没有)</li>\n<li>setsid可以创建一个新的会话, 该进程不能是进程组的组长。setsid调用完成后, 该进程成为这个会话的首进程(领头进程), 同时变成一个新的进程组的组长, 如果该进程之前有控制终端, 则该进程与终端的联系被断开</li>\n<li>用户通过终端登录或者网络登录, 会创建一个新的会话</li>\n<li>一个会话最多只能有一个控制终端</li>\n</ul>\n<ol start=\"4\">\n<li>创建守护进程的方式</li>\n</ol>\n<ul>\n<li>fork子进程后, 父进程退出, 子进程执行setsid即可成为守护进程。这种方式下, 子进程是会话的领头进程, 可以重新打开终端, 此时可以再次fork, fork产生的子进程无法再打开终端。第二次fork并不是必须的, 只是为了防止子进程再次打开终端</li>\n<li>linux提供了daemon函数用于创建守护进程</li>\n</ul>\n<h2 id=\"1-6-swoole-tcp-server示例\"><a href=\"#1-6-swoole-tcp-server示例\" class=\"headerlink\" title=\"1.6 swoole tcp server示例\"></a>1.6 swoole tcp server示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//创建server</span></span><br><span class=\"line\">$serv = <span class=\"keyword\">new</span> Swoole\\Server(<span class=\"string\">'0.0.0.0'</span>, <span class=\"number\">9501</span>, SWOOLE_PROCESS, SWOOLE_SOCK_TCP);</span><br><span class=\"line\"><span class=\"comment\">//设置server的参数</span></span><br><span class=\"line\">$serv-&gt;set(<span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"string\">'reactor_num'</span> =&gt; <span class=\"number\">2</span>, <span class=\"comment\">//reactor thread num</span></span><br><span class=\"line\">    <span class=\"string\">'worker_num'</span> =&gt; <span class=\"number\">3</span>,  <span class=\"comment\">//worker process num</span></span><br><span class=\"line\">));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置事件回调</span></span><br><span class=\"line\">$serv-&gt;on(<span class=\"string\">'connect'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($serv, $fd)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"Client:Connect.\\n\"</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$serv-&gt;on(<span class=\"string\">'receive'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($serv, $fd, $reactor_id, $data)</span> </span>&#123;</span><br><span class=\"line\">    $serv-&gt;send($fd, <span class=\"string\">'Swoole: '</span>.$data);</span><br><span class=\"line\">    $serv-&gt;close($fd);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$serv-&gt;on(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($serv, $fd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"Client: Close.\\n\"</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//启动server</span></span><br><span class=\"line\">$serv-&gt;start();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>上述代码在cli模式下执行时, 经过词法分析, 语法分析生成opcode, 进而交由zend虚拟机执行</li>\n<li>zend虚拟机在执行到$serv-&gt;start()时, 启动swoole server</li>\n<li>上述代码中设置的事件回调是在worker进程中执行</li>\n</ul>\n<h1 id=\"二-swoole-server\"><a href=\"#二-swoole-server\" class=\"headerlink\" title=\"二. swoole server\"></a>二. swoole server</h1><h2 id=\"2-1-base模式\"><a href=\"#2-1-base模式\" class=\"headerlink\" title=\"2.1 base模式\"></a>2.1 base模式</h2><ol>\n<li>说明</li>\n</ol>\n<ul>\n<li>base模式采用多进程模型, 这种模型与nginx一致, 每个进程只有一个线程, 主进程负责管理工作进程, 工作进程负责监听端口, 接受连接, 处理请求以及关闭连接</li>\n<li>多个进程同时监听端口, 会有惊群问题, 目前swoole并没有解决</li>\n<li>linux 内核3.9及其后续版本提供了新的套接字参数SO_REUSEPORT, 该参数允许多个进程绑定到同一个端口, 内核在接受到新的连接请求时, 会唤醒其中一个进行处理, 内核层面也会做负载均衡, 可以解决上述的惊群问题</li>\n<li>base模式下, reactor_number参数并没有作用, 因为每个进程只有一个线程</li>\n<li>如果worker进程数设置为1, 则不会fork出worker进程, 主进程直接处理请求</li>\n</ul>\n<ol start=\"2\">\n<li>启动过程</li>\n</ol>\n<ul>\n<li>php代码执行到$serv-&gt;start()时, 主进程进入int swServer_start(swServer *serv)函数, 该函数负责启动server</li>\n<li>在函数swServer_start中会调用swReactorProcess_start, 这个函数会fork出多个worker进程</li>\n<li>主进程和worker进程各自进入自己的事件循环, 处理各类事件</li>\n</ul>\n<h2 id=\"2-2-process模式\"><a href=\"#2-2-process模式\" class=\"headerlink\" title=\"2.2 process模式\"></a>2.2 process模式</h2><ol>\n<li>说明</li>\n</ol>\n<ul>\n<li>这种模式为多进程多线程, 有主进程, manager进程, worker进程, task_worker进程</li>\n<li>主进程下有多个线程, 主线程负责接受连接, 之后交给react线程处理请求。 react线程负责接收数据包, 并将数据转发给worker进程进行处理, 之后处理worker进程返回的数据</li>\n<li>manager进程, 该进程为单线程, 主要负责管理worker进程, 类似于nginx中的主进程, 当worker进程异常退出时, manager进程负责重新fork出一个worker进程</li>\n<li>worker进程, 该进程为单线程, 负责具体处理请求</li>\n<li>task_worker进程, 用于处理比较耗时的任务, 默认不开启</li>\n<li>worker进程与主进程中的react线程使用域套接字进行通信, worker进程之间不进行通信</li>\n</ul>\n<ol start=\"2\">\n<li>启动过程</li>\n</ol>\n<ul>\n<li><p>swoole server启动入口: swServer_start函数,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//php 代码中$serv-&gt;start(); 会调用函数, 进行server start</span><br><span class=\"line\">int swServer_start(swServer *serv);</span><br><span class=\"line\"></span><br><span class=\"line\">// 该函数首先进行必要的参数检查</span><br><span class=\"line\">static int swServer_start_check(swServer *serv);</span><br><span class=\"line\">// 其中有,</span><br><span class=\"line\">if (serv-&gt;worker_num &lt; serv-&gt;reactor_num)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    serv-&gt;reactor_num = serv-&gt;worker_num;</span><br><span class=\"line\">&#125;//也就是说reactor_num &lt;= worker_num</span><br><span class=\"line\"></span><br><span class=\"line\">//之后执行factory start, 也就是swFactoryProcess_start函数, 该函数会fork出manager进程, manager进程进而fork出worker进程以及task_worker进程</span><br><span class=\"line\">if (factory-&gt;start(factory) &lt; 0)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return SW_ERR;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//然后主进程的主线程生成reactor线程</span><br><span class=\"line\">if (serv-&gt;factory_mode == SW_MODE_BASE)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ret = swReactorProcess_start(serv);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ret = swReactorThread_start(serv);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果设置了daemon模式, 在必要的参数检查完后, 先将自己变为守护进程再fork manager进程, 进而创建reactor线程</p>\n</li>\n<li><p>主进程先fork出manager进程, manager进程负责fork出worker进程以及task_worker进程。worker进程之后进入int swWorker_loop(swServer *serv, int worker_id), 也就是进入自己的事件循环, task_worker也是一样, 进入自己的事件循环。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static int swFactoryProcess_start(swFactory *factory);</span><br><span class=\"line\">//swFactoryProcess_start会调用swManager_start生成manager进程</span><br><span class=\"line\">int swManager_start(swServer *serv);</span><br><span class=\"line\">// manager进程会fork出worker进程以及task_worker进程</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>主进程pthread_create出react线程, 主线程和react线程各自进入自己的事件循环, reactor线程执行static int swReactorThread_loop(swThreadParam *param), 等待处理事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//主线程执行swReactorThread_start, 创建出reactor线程</span><br><span class=\"line\">int swReactorThread_start(swServer *serv);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"3\">\n<li>结构图<br>swoole process模式结构如下图所示,<br><img src=\"https://picturestore.nos-eastchina1.126.net/swoole/swoole%20process%20%E7%BB%93%E6%9E%84%E5%9B%BE.jpg\" alt=\"swoole_server\"></li>\n</ol>\n<ul>\n<li>上图并没有考虑task_worker进程, 在默认情况下, task_worker进程数为0</li>\n</ul>\n<h1 id=\"三-请求处理流程-process模式\"><a href=\"#三-请求处理流程-process模式\" class=\"headerlink\" title=\"三. 请求处理流程(process模式)\"></a>三. 请求处理流程(process模式)</h1><h2 id=\"3-1-reactor线程与worker进程之间的通信\"><a href=\"#3-1-reactor线程与worker进程之间的通信\" class=\"headerlink\" title=\"3.1 reactor线程与worker进程之间的通信\"></a>3.1 reactor线程与worker进程之间的通信</h2><ol>\n<li>swoole master进程与worker进程之间的通信如下图所示,<br><img src=\"https://picturestore.nos-eastchina1.126.net/swoole/swoole%20process%20ipc.png\" alt=\"image\"></li>\n</ol>\n<ul>\n<li>swoole使用SOCK_DGRAM, 而不是SOCK_STREAM, 这里是因为每个reactor线程负责处理多个请求, reactor接收到请求后会将信息转发给worker进程, 由worker进程负责处理,如果使用SOCK_STREAM, worker进程无法对tcp进行分包, 进而处理请求</li>\n<li>swFactoryProcess_start函数中会根据worker进程数创建对应个数的套接字对, 用于reactor线程与worker进程通信(swPipeUnsock_create函数)</li>\n</ul>\n<ol start=\"2\">\n<li>假设reactor线程有2个, worker进程有3个, 则reactor与worker之间的通信如下图所示,<br><img src=\"https://picturestore.nos-eastchina1.126.net/swoole/swoole%20process%20ipc%E5%AE%9E%E4%BE%8B.png\" alt=\"image\"></li>\n</ol>\n<ul>\n<li>每个reactor线程负责监听几个worker进程, 每个worker进程只有一个reactor线程监听(reactor_num&lt;=worker_num)。swoole默认使用worker_process_id % reactor_num对worker进程进行分配, 交给对应的reactor线程进行监听</li>\n<li>reactor线程收到某个worker进程的数据后会进行处理, 值得注意的是, 这个reactor线程可能并不是发送请求的那个reactor线程。</li>\n</ul>\n<ol start=\"3\">\n<li>reactor线程与worker进程通信的数据包<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//包头</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">swDataHead</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> fd;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> len;</span><br><span class=\"line\">    <span class=\"keyword\">int16_t</span> from_id;</span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> type;</span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> flags;</span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span> from_fd;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> SW_BUFFER_RECV_TIME</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> time;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125; swDataHead;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//reactor线程向worker进程发送的数据, 也就是worker进程收到的数据包</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    swDataHead info;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> data[SW_IPC_BUFFER_SIZE];</span><br><span class=\"line\">&#125; swEventData;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//worker进程向reactor线程发送的数据, 也就是reactor线程收到的数据包</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    swDataHead info;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> data[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125; swPipeBuffer;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"3-2-请求处理\"><a href=\"#3-2-请求处理\" class=\"headerlink\" title=\"3.2 请求处理\"></a>3.2 请求处理</h2><ol>\n<li>master进程中的主线程负责监听端口(listen), 接受连接(accept, 产生一个fd), 接受连接后将请求分配给reactor线程, 默认通过fd % reactor_num进行分配, 之后通过epoll_ctl将fd加入到对应reactor线程中(如果对应的reactor线程正在执行epoll_wait, 主线程会阻塞), 刚加入时监听写事件, 如果直接监听读事件, 可能会立刻被触发, 而监听写事件可以允许reactor线程进行一些初始化操作<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//主线程执行epoll_ctl将fd(新接受的连接)加入到reactor线程的监听队列中</span><br><span class=\"line\">epoll_ctl(epfd, fd, ...);</span><br><span class=\"line\">//对应的reactor线程如果正在执行</span><br><span class=\"line\">epoll_wait(epfd, ...);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>这种情况主线程会被阻塞(两个线程同时操作epfd)</li>\n<li>如果reactor线程没有正在执行epoll_wait, 主线程则不会被阻塞, 执行成功后直接返回</li>\n</ul>\n<ol start=\"2\">\n<li><p>reactor线程中fd的写事件被触发, reactor线程负责处理, 发现是首次加入, 没有数据可写, 则开启读事件监听</p>\n</li>\n<li><p>reactor线程读取到用户的请求数据, <strong>一个请求的数据接收完后</strong>, 将数据转发给worker进程, 默认是通过fd % worker_num进行分配</p>\n</li>\n</ol>\n<ul>\n<li>reactor发送给worker进程的数据包, 会包含一个头部, 头部中记录了reactor的信息</li>\n<li>如果发送的数据过大, 则需要将数据进行分片, 限于篇幅, reactor的分片, 后续再进行详细讲述</li>\n<li>可能存在多个reactor线程同时向同一个worker进程发送数据的情况, 故而swoole采用SOCK_DGRAM模式与worker进程进行通信, 通过每个数据包的包头, worker进程可以区分出是由哪个reactor线程发送的数据</li>\n</ul>\n<ol start=\"4\">\n<li>worker进程收到reactor发送的数据包后, 进行处理, 处理完成后, 将数据发送给主进程</li>\n</ol>\n<ul>\n<li>worker进程发送给主进程的数据包, 也会包含一个头部, 当reactor线程收到数据包后, 能够知道对应的reactor线程, 请求的fd等信息</li>\n</ul>\n<ol start=\"5\">\n<li>主进程收到worker进程发送的数据包, 这个会触发某个reactor线程进行处理</li>\n</ol>\n<ul>\n<li>这个reactor线程并不一定是之前发送请求给worker进程的那个reactor线程</li>\n<li>主进程的每个reactor线程都负责监听worker进程发送的数据包, 每个worker发送的数据包只会由一个reactor线程进行监听, 故而只会触发一个reactor线程</li>\n</ul>\n<ol start=\"6\">\n<li>reactor线程处理worker进程发送的数据包, 如果是直接发送数据给客户端, 则可以直接发送, 如果需要改变这个这个连接的监听状态(例如close), 则需要先找到监听这个连接的reactor, 进而改变这个连接的监听状态</li>\n</ol>\n<ul>\n<li>reactor处理线程与reactor监听线程可能并不是同一个线程</li>\n<li>reactor监听线程负责监听客户端发送的数据, 进而转发给worker进程</li>\n<li>reactor处理线程负责监听worker进程发送给主进程的数据, 进而将数据发送给客户端</li>\n</ul>\n<h1 id=\"四-gdb调试\"><a href=\"#四-gdb调试\" class=\"headerlink\" title=\"四. gdb调试\"></a>四. gdb调试</h1><h2 id=\"4-1-process模式启动\"><a href=\"#4-1-process模式启动\" class=\"headerlink\" title=\"4.1 process模式启动\"></a>4.1 process模式启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//fork manager进程</span><br><span class=\"line\">#0  0x00007ffff67dae64 in fork () from /lib64/libc.so.6</span><br><span class=\"line\">#1  0x00007ffff553888a in swoole_fork () at /root/code/swoole-src/src/core/base.c:186</span><br><span class=\"line\">#2  0x00007ffff556afb8 in swManager_start (serv=serv@entry=0x1353f60) at /root/code/swoole-src/src/server/manager.cc:164</span><br><span class=\"line\">#3  0x00007ffff5571dde in swFactoryProcess_start (factory=0x1353ff8) at /root/code/swoole-src/src/server/process.c:198</span><br><span class=\"line\">#4  0x00007ffff556ef8b in swServer_start (serv=0x1353f60) at /root/code/swoole-src/src/server/master.cc:651</span><br><span class=\"line\">#5  0x00007ffff55dc808 in zim_swoole_server_start (execute_data=&lt;optimized out&gt;, return_value=0x7fffffffac50)</span><br><span class=\"line\">    at /root/code/swoole-src/swoole_server.cc:2946</span><br><span class=\"line\">#6  0x00000000007bb068 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () at /root/php-7.3.3/Zend/zend_vm_execute.h:980</span><br><span class=\"line\">#7  execute_ex (ex=0x7ffff7f850a8) at /root/php-7.3.3/Zend/zend_vm_execute.h:55485</span><br><span class=\"line\">#8  0x00000000007bbf58 in zend_execute (op_array=op_array@entry=0x7ffff5e7b340, return_value=return_value@entry=0x7ffff5e1d030)</span><br><span class=\"line\">    at /root/php-7.3.3/Zend/zend_vm_execute.h:60881</span><br><span class=\"line\">#9  0x0000000000737554 in zend_execute_scripts (type=type@entry=8, retval=0x7ffff5e1d030, retval@entry=0x0,</span><br><span class=\"line\">    file_count=file_count@entry=3) at /root/php-7.3.3/Zend/zend.c:1568</span><br><span class=\"line\">#10 0x00000000006db4d0 in php_execute_script (primary_file=primary_file@entry=0x7fffffffd050) at /root/php-7.3.3/main/main.c:2630</span><br><span class=\"line\">#11 0x00000000007be2f5 in do_cli (argc=2, argv=0x1165cd0) at /root/php-7.3.3/sapi/cli/php_cli.c:997</span><br><span class=\"line\">#12 0x000000000043fc1f in main (argc=2, argv=0x1165cd0) at /root/php-7.3.3/sapi/cli/php_cli.c:1389</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// pthread_create reactor线程</span><br><span class=\"line\">#0  0x00007ffff552e960 in pthread_create@plt () from /usr/local/lib/php/extensions/no-debug-non-zts-20180731/swoole.so</span><br><span class=\"line\">#1  0x00007ffff5576959 in swReactorThread_start (serv=0x1353f60) at /root/code/swoole-src/src/server/reactor_thread.c:883</span><br><span class=\"line\">#2  0x00007ffff556f006 in swServer_start (serv=0x1353f60) at /root/code/swoole-src/src/server/master.cc:670</span><br><span class=\"line\">#3  0x00007ffff55dc808 in zim_swoole_server_start (execute_data=&lt;optimized out&gt;, return_value=0x7fffffffac50)</span><br><span class=\"line\">    at /root/code/swoole-src/swoole_server.cc:2946</span><br><span class=\"line\">#4  0x00000000007bb068 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () at /root/php-7.3.3/Zend/zend_vm_execute.h:980</span><br><span class=\"line\">#5  execute_ex (ex=0x7fffffffab10) at /root/php-7.3.3/Zend/zend_vm_execute.h:55485</span><br><span class=\"line\">#6  0x00000000007bbf58 in zend_execute (op_array=op_array@entry=0x7ffff5e7b340, return_value=return_value@entry=0x7ffff5e1d030)</span><br><span class=\"line\">    at /root/php-7.3.3/Zend/zend_vm_execute.h:60881</span><br><span class=\"line\">#7  0x0000000000737554 in zend_execute_scripts (type=type@entry=8, retval=0x7ffff5e1d030, retval@entry=0x0,</span><br><span class=\"line\">    file_count=file_count@entry=3) at /root/php-7.3.3/Zend/zend.c:1568</span><br><span class=\"line\">#8  0x00000000006db4d0 in php_execute_script (primary_file=primary_file@entry=0x7fffffffd050) at /root/php-7.3.3/main/main.c:2630</span><br><span class=\"line\">#9  0x00000000007be2f5 in do_cli (argc=2, argv=0x1165cd0) at /root/php-7.3.3/sapi/cli/php_cli.c:997</span><br><span class=\"line\">#10 0x000000000043fc1f in main (argc=2, argv=0x1165cd0) at /root/php-7.3.3/sapi/cli/php_cli.c:1389</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-base模式启动\"><a href=\"#4-2-base模式启动\" class=\"headerlink\" title=\"4.2 base模式启动\"></a>4.2 base模式启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//base 模式下的启动</span><br><span class=\"line\">#0  0x00007ffff67dae64 in fork () from /lib64/libc.so.6</span><br><span class=\"line\">#1  0x00007ffff553888a in swoole_fork () at /root/code/swoole-src/src/core/base.c:186</span><br><span class=\"line\">#2  0x00007ffff5558557 in swProcessPool_spawn (pool=pool@entry=0x7ffff2d2a308, worker=0x7ffff2d2a778)</span><br><span class=\"line\">    at /root/code/swoole-src/src/network/process_pool.c:392</span><br><span class=\"line\">#3  0x00007ffff5558710 in swProcessPool_start (pool=0x7ffff2d2a308) at /root/code/swoole-src/src/network/process_pool.c:227</span><br><span class=\"line\">#4  0x00007ffff55741cf in swReactorProcess_start (serv=0x1353f60) at /root/code/swoole-src/src/server/reactor_process.cc:176</span><br><span class=\"line\">#5  0x00007ffff556f21d in swServer_start (serv=0x1353f60) at /root/code/swoole-src/src/server/master.cc:666</span><br><span class=\"line\">#6  0x00007ffff55dc808 in zim_swoole_server_start (execute_data=&lt;optimized out&gt;, return_value=0x7fffffffac50)</span><br><span class=\"line\">    at /root/code/swoole-src/swoole_server.cc:2946</span><br><span class=\"line\">#7  0x00000000007bb068 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () at /root/php-7.3.3/Zend/zend_vm_execute.h:980</span><br><span class=\"line\">#8  execute_ex (ex=0x7ffff2d2a308) at /root/php-7.3.3/Zend/zend_vm_execute.h:55485</span><br><span class=\"line\">#9  0x00000000007bbf58 in zend_execute (op_array=op_array@entry=0x7ffff5e7b340, return_value=return_value@entry=0x7ffff5e1d030)</span><br><span class=\"line\">    at /root/php-7.3.3/Zend/zend_vm_execute.h:60881</span><br><span class=\"line\">#10 0x0000000000737554 in zend_execute_scripts (type=type@entry=8, retval=0x7ffff5e1d030, retval@entry=0x0,</span><br><span class=\"line\">    file_count=file_count@entry=3) at /root/php-7.3.3/Zend/zend.c:1568</span><br><span class=\"line\">#11 0x00000000006db4d0 in php_execute_script (primary_file=primary_file@entry=0x7fffffffd050) at /root/php-7.3.3/main/main.c:2630</span><br><span class=\"line\">#12 0x00000000007be2f5 in do_cli (argc=2, argv=0x1165cd0) at /root/php-7.3.3/sapi/cli/php_cli.c:997</span><br><span class=\"line\">#13 0x000000000043fc1f in main (argc=2, argv=0x1165cd0) at /root/php-7.3.3/sapi/cli/php_cli.c:1389</span><br></pre></td></tr></table></figure>\n<h1 id=\"五-参考\"><a href=\"#五-参考\" class=\"headerlink\" title=\"五. 参考\"></a>五. 参考</h1><ul>\n<li>UNIX网络编程</li>\n<li>UNIX环境高级编程</li>\n<li><a href=\"https://wiki.swoole.com/\" target=\"_blank\" rel=\"noopener\">https://wiki.swoole.com/</a></li>\n<li><a href=\"https://www.cnblogs.com/welhzh/p/3772164.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/welhzh/p/3772164.html</a></li>\n<li><a href=\"https://www.cnblogs.com/JohnABC/p/4079669.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/JohnABC/p/4079669.html</a></li>\n</ul>\n"},{"title":"nginx内存管理","date":"2018-10-31T05:48:37.000Z","_content":"\n# 一. 概述\n1. 应用程序的内存可以简单分为堆内存，栈内存。对于栈内存而言，在函数编译时，编译器会插入移动栈当前指针位置的代码，实现栈空间的自管理。而对于堆内存，通常需要程序员进行管理。我们通常说的内存管理亦是只堆空间内存管理。\n\n\n2. 对于内存，我们的使用可以简化为3步，申请内存、使用内存、释放内存。申请内存，使用内存通常需要程序员显示操作，释放内存却并不一定需要程序员显示操作，目前很多的高级语言提供了垃圾回收机制，可以自行选择时机释放内存，例如: Go、Java已经实现垃圾回收, C语言目前尚未实现垃圾回收，C++中可以通过智能指针达到垃圾回收的目的。\n\n\n3. 除了语言层面的内存管理外，有时我们需要在程序中自行管理内存，总体而言，对于内存管理，我认为主要是解决以下问题:\n- 用户申请内存时，如何快速查找到满足用户需求的内存块？ \n- 用户释放内存时，如何避免内存碎片化？\n\n> 无论是语言层面实现的内存管理还是应用程序自行实现的内存管理，大都将内存按照大小分为几种，每种采用不同的管理模式。常见的分类是按照2的整数次幂分，将不同种类的内存通过链表链接，查询时，从相应大小的链表中寻找，如果找不到，则可以考虑从更大块内存中，拿取一块，将其分为多个小点的内存。当然，对于特别大的内存，语言层面的内存管理可以直接调用内存管理相关的系统调用，应用层面的内存管理则可以直接使用语言层面的内存管理。\n\n4. nginx内存管理整体可以分为2个部分，\n- 第一部分是常规的内存池，用于进程平时所需的内存管理；\n- 第二部分是共享内存的管理。总体而言，共享内存教内存池要复杂的多。\n\n\n# 二. nginx内存池管理\n## 2.1 说明\n1. 本部分使用的nginx版本为1.15.3\n2. 具体源码参见src/core/ngx_palloc.c文件\n\n\n## 2.2 nginx实现\n### 2.2.1 使用流程\nnginx内存池的使用较为简单,可以分为3步，\n- 调用ngx_create_pool函数获取ngx_pool_t指针。\n```cpp\n//size代表ngx_pool_t一块的大小\nngx_pool_t* ngx_create_pool(size_t size, ngx_log_t *log)\n```\n\n- 调用ngx_palloc申请内存使用\n```cpp\n//从pool中申请size大小的内存\nvoid* ngx_palloc(ngx_pool_t *pool, size_t size)\n```\n\n- 释放内存(可以释放大块内存或者释放整个内存池)\n```cpp\n//释放从pool中申请的大块内存\nngx_int_t ngx_pfree(ngx_pool_t *pool, void *p)\n//释放整个内存池\nvoid ngx_destroy_pool(ngx_pool_t *pool)\n```\n\n### 2.2.2 具体实现\n1. 如下图所示，nginx将内存分为2种，一种是小内存，一种是大内存，当申请的空间大于pool->max时，我们认为是大内存空间，否则是小内存空间。\n```cpp\n//创建内存池的参数size减去头部管理结构ngx_pool_t的大小\npool->max = size - sizeof(ngx_pool_t);\n```\n![image](https://picturestore.nos-eastchina1.126.net/nginx/%E5%86%85%E5%AD%98%E6%B1%A0.png)\n\n2. 对于小块内存空间, nginx首先查看当前内存块待分配的空间中，是否能够满足用户需求，如果可以，则直接将这部分内存返回。如果不能满足用户需求，则需要重新申请一个内存块，申请的内存块与当前块空间大小相同，将新申请的内存块通过链表链接到上一个内存块，从新的内存块中分配用户所需的内存。\n\n> 小块内存并不释放，用户申请后直接使用，即使后期不再使用也不需要释放该内存。由于用户有时并不知道自己使用的内存块是大是小，此时也可以调用ngx_pfree函数释放该空间，该函数会从大空间链表中查找内存，找到则释放内存。对于小内存而言，并未做任何处理。\n\n\n\n3. 对于大块内存, nginx会将这些内存放到链表中存储，通过pool->large进行管理。值得注意的是，用户管理大内存的ngx_pool_large_t结构是从本内存池的小块内存中申请而来，也就意味着无法释放这些内存，nginx则是直接复用ngx_pool_large_t结构体。当用户需要申请大内存空间时，利用c函数库malloc申请空间，然后将其挂载某个ngx_pool_large_t结构体上。nginx在需要一个新的ngx_pool_large_t结构时，会首先pool->large链表的前3个元素中，查看是否有可用的,如果有则直接使用，否则新建ngx_pool_large_t结构。\n\n\n# 三. nginx共享内存管理\n## 3.1 说明\n1. 本部分使用的nginx版本是1.15.3\n2. 本部分源码详见src/core/ngx_slab.c, src/core/ngx_shmtx.c\n3. nginx共享内存内容相对较多，本文仅做简单概述。\n\n\n## 3.2 直接使用共享内存\n### 3.2.1 基础\n1. nginx中需要创建互斥锁，用于后面多进程同步使用。除此之外，nginx可能需要一些统计信息，例如设置(stat_stub),对于这些变量，我们并不需要特意管理，只需要开辟共享空间后，直接使用即可。\n2. 设置stat_stub后所需的统计信息，亦是放到共享内存中，我们此处仅以nginx中的互斥锁进行说明。\n\n### 3.2.2 nginx互斥锁的实现\n1. nginx互斥锁，有两种方案，当系统支持原子操作时，采用原子操作，不支持时采用文件锁。本节源码见ngx_event_module_init函数。\n2. 下图为文件锁实现互斥锁的示意图。\n![image](https://picturestore.nos-eastchina1.126.net/nginx/ngxin%E6%96%87%E4%BB%B6%E9%94%81%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%BA%92%E6%96%A5%E9%94%81.png)\n3. 下图为原子操作实现互斥锁的示意图。\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0%E4%BA%92%E6%96%A5%E9%94%81.png)\n\n4. 问题\n\n> 1. reload时，新启动的master向老的master发送信号后直接退出，旧的master,重新加载配置(ngx_init_cycle函数), 新创建工作进程, 新的工作进程与旧的工作进程使用的锁是相同的。\n> 2. 平滑升级时, 旧的master会创建新的master, 新的master会继承旧的master监听的端口(通过环境变量传递监听套接字对应的fd)，新的进程并没有重新绑定监听端口。可能存在新老worker同时监听某个端口的情况，此时操作系统会保证只会有一个进程处理该事件(虽然epoll_wait都会被唤醒)。\n\n\n## 3.3 通过slab管理共享内存\n1. nginx允许各个模块开辟共享空间以供使用,例如ngx_http_limit_conn_module模块。\n2. nginx共享内存管理的基本思想有:\n\n> 1. 将内存按照页进行分配，每页的大小相同, 此处设为page_size。\n> 2. 将内存块按照2的整数次幂进行划分, 最小为8bit, 最大为page_size/2。例如，假设每页大小为4Kb, 则将内存分为8, 16, 32, 64, 128, 256, 512, 1024, 2048共9种，每种对应一个slot, 此时slots数组的大小n即为9。申请小块内存(申请内存大小size <= page_size/2)时，直接给用户这9种中的一种，例如，需要30bit时，找大小为32的内存块提供给用户。\n> 3. 每个页只会划分一种类型的内存块。例如，某次申请内存时，现有内存无法满足要求，此时会使用一个新的页，则这个新页此后只会分配这种大小的内存。\n> 4. 通过双向链表将所有空闲的页连接。图中ngx_slab_pool_t中的free变量即使用来链接空闲页的。\n> 5. 通过slots数组将所有小块内存所使用的页链接起来。\n> 6. 对于大于等于页面大小的空间请求，计算所需页数，找到连续的空闲页，将空闲页的首页地址返回给客户使用，通过每页的管理结构ngx_slab_page_t进行标识。\n> 7. 所有页面只会有3中状态，空闲、未满、已满。空闲，未满都是通过双向链表进行整合，已满页面则不存在与任何页面，当空间被释放时，会将其加入到某个链表。\n\n\n3. nginx共享内存的基本结构图如下:\n\n![image](https://picturestore.nos-eastchina1.126.net/nginx/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%9B%BE.png)\n\n- 在上图中，除了最右侧的ngx_slab_pool_t接口开始的一段内存位于共享内存区外，其他内存都不是共享内存。\n- 共享内存最终是从page中分配而来。\n\n\n","source":"_posts/nginx_memory_manage.md","raw":"---\ntitle: nginx内存管理\ndate: 2018-10-31 13:48:37\ncategories:\n- nginx\n- 内存管理\ntags:\n- nginx\n---\n\n# 一. 概述\n1. 应用程序的内存可以简单分为堆内存，栈内存。对于栈内存而言，在函数编译时，编译器会插入移动栈当前指针位置的代码，实现栈空间的自管理。而对于堆内存，通常需要程序员进行管理。我们通常说的内存管理亦是只堆空间内存管理。\n\n\n2. 对于内存，我们的使用可以简化为3步，申请内存、使用内存、释放内存。申请内存，使用内存通常需要程序员显示操作，释放内存却并不一定需要程序员显示操作，目前很多的高级语言提供了垃圾回收机制，可以自行选择时机释放内存，例如: Go、Java已经实现垃圾回收, C语言目前尚未实现垃圾回收，C++中可以通过智能指针达到垃圾回收的目的。\n\n\n3. 除了语言层面的内存管理外，有时我们需要在程序中自行管理内存，总体而言，对于内存管理，我认为主要是解决以下问题:\n- 用户申请内存时，如何快速查找到满足用户需求的内存块？ \n- 用户释放内存时，如何避免内存碎片化？\n\n> 无论是语言层面实现的内存管理还是应用程序自行实现的内存管理，大都将内存按照大小分为几种，每种采用不同的管理模式。常见的分类是按照2的整数次幂分，将不同种类的内存通过链表链接，查询时，从相应大小的链表中寻找，如果找不到，则可以考虑从更大块内存中，拿取一块，将其分为多个小点的内存。当然，对于特别大的内存，语言层面的内存管理可以直接调用内存管理相关的系统调用，应用层面的内存管理则可以直接使用语言层面的内存管理。\n\n4. nginx内存管理整体可以分为2个部分，\n- 第一部分是常规的内存池，用于进程平时所需的内存管理；\n- 第二部分是共享内存的管理。总体而言，共享内存教内存池要复杂的多。\n\n\n# 二. nginx内存池管理\n## 2.1 说明\n1. 本部分使用的nginx版本为1.15.3\n2. 具体源码参见src/core/ngx_palloc.c文件\n\n\n## 2.2 nginx实现\n### 2.2.1 使用流程\nnginx内存池的使用较为简单,可以分为3步，\n- 调用ngx_create_pool函数获取ngx_pool_t指针。\n```cpp\n//size代表ngx_pool_t一块的大小\nngx_pool_t* ngx_create_pool(size_t size, ngx_log_t *log)\n```\n\n- 调用ngx_palloc申请内存使用\n```cpp\n//从pool中申请size大小的内存\nvoid* ngx_palloc(ngx_pool_t *pool, size_t size)\n```\n\n- 释放内存(可以释放大块内存或者释放整个内存池)\n```cpp\n//释放从pool中申请的大块内存\nngx_int_t ngx_pfree(ngx_pool_t *pool, void *p)\n//释放整个内存池\nvoid ngx_destroy_pool(ngx_pool_t *pool)\n```\n\n### 2.2.2 具体实现\n1. 如下图所示，nginx将内存分为2种，一种是小内存，一种是大内存，当申请的空间大于pool->max时，我们认为是大内存空间，否则是小内存空间。\n```cpp\n//创建内存池的参数size减去头部管理结构ngx_pool_t的大小\npool->max = size - sizeof(ngx_pool_t);\n```\n![image](https://picturestore.nos-eastchina1.126.net/nginx/%E5%86%85%E5%AD%98%E6%B1%A0.png)\n\n2. 对于小块内存空间, nginx首先查看当前内存块待分配的空间中，是否能够满足用户需求，如果可以，则直接将这部分内存返回。如果不能满足用户需求，则需要重新申请一个内存块，申请的内存块与当前块空间大小相同，将新申请的内存块通过链表链接到上一个内存块，从新的内存块中分配用户所需的内存。\n\n> 小块内存并不释放，用户申请后直接使用，即使后期不再使用也不需要释放该内存。由于用户有时并不知道自己使用的内存块是大是小，此时也可以调用ngx_pfree函数释放该空间，该函数会从大空间链表中查找内存，找到则释放内存。对于小内存而言，并未做任何处理。\n\n\n\n3. 对于大块内存, nginx会将这些内存放到链表中存储，通过pool->large进行管理。值得注意的是，用户管理大内存的ngx_pool_large_t结构是从本内存池的小块内存中申请而来，也就意味着无法释放这些内存，nginx则是直接复用ngx_pool_large_t结构体。当用户需要申请大内存空间时，利用c函数库malloc申请空间，然后将其挂载某个ngx_pool_large_t结构体上。nginx在需要一个新的ngx_pool_large_t结构时，会首先pool->large链表的前3个元素中，查看是否有可用的,如果有则直接使用，否则新建ngx_pool_large_t结构。\n\n\n# 三. nginx共享内存管理\n## 3.1 说明\n1. 本部分使用的nginx版本是1.15.3\n2. 本部分源码详见src/core/ngx_slab.c, src/core/ngx_shmtx.c\n3. nginx共享内存内容相对较多，本文仅做简单概述。\n\n\n## 3.2 直接使用共享内存\n### 3.2.1 基础\n1. nginx中需要创建互斥锁，用于后面多进程同步使用。除此之外，nginx可能需要一些统计信息，例如设置(stat_stub),对于这些变量，我们并不需要特意管理，只需要开辟共享空间后，直接使用即可。\n2. 设置stat_stub后所需的统计信息，亦是放到共享内存中，我们此处仅以nginx中的互斥锁进行说明。\n\n### 3.2.2 nginx互斥锁的实现\n1. nginx互斥锁，有两种方案，当系统支持原子操作时，采用原子操作，不支持时采用文件锁。本节源码见ngx_event_module_init函数。\n2. 下图为文件锁实现互斥锁的示意图。\n![image](https://picturestore.nos-eastchina1.126.net/nginx/ngxin%E6%96%87%E4%BB%B6%E9%94%81%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%BA%92%E6%96%A5%E9%94%81.png)\n3. 下图为原子操作实现互斥锁的示意图。\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0%E4%BA%92%E6%96%A5%E9%94%81.png)\n\n4. 问题\n\n> 1. reload时，新启动的master向老的master发送信号后直接退出，旧的master,重新加载配置(ngx_init_cycle函数), 新创建工作进程, 新的工作进程与旧的工作进程使用的锁是相同的。\n> 2. 平滑升级时, 旧的master会创建新的master, 新的master会继承旧的master监听的端口(通过环境变量传递监听套接字对应的fd)，新的进程并没有重新绑定监听端口。可能存在新老worker同时监听某个端口的情况，此时操作系统会保证只会有一个进程处理该事件(虽然epoll_wait都会被唤醒)。\n\n\n## 3.3 通过slab管理共享内存\n1. nginx允许各个模块开辟共享空间以供使用,例如ngx_http_limit_conn_module模块。\n2. nginx共享内存管理的基本思想有:\n\n> 1. 将内存按照页进行分配，每页的大小相同, 此处设为page_size。\n> 2. 将内存块按照2的整数次幂进行划分, 最小为8bit, 最大为page_size/2。例如，假设每页大小为4Kb, 则将内存分为8, 16, 32, 64, 128, 256, 512, 1024, 2048共9种，每种对应一个slot, 此时slots数组的大小n即为9。申请小块内存(申请内存大小size <= page_size/2)时，直接给用户这9种中的一种，例如，需要30bit时，找大小为32的内存块提供给用户。\n> 3. 每个页只会划分一种类型的内存块。例如，某次申请内存时，现有内存无法满足要求，此时会使用一个新的页，则这个新页此后只会分配这种大小的内存。\n> 4. 通过双向链表将所有空闲的页连接。图中ngx_slab_pool_t中的free变量即使用来链接空闲页的。\n> 5. 通过slots数组将所有小块内存所使用的页链接起来。\n> 6. 对于大于等于页面大小的空间请求，计算所需页数，找到连续的空闲页，将空闲页的首页地址返回给客户使用，通过每页的管理结构ngx_slab_page_t进行标识。\n> 7. 所有页面只会有3中状态，空闲、未满、已满。空闲，未满都是通过双向链表进行整合，已满页面则不存在与任何页面，当空间被释放时，会将其加入到某个链表。\n\n\n3. nginx共享内存的基本结构图如下:\n\n![image](https://picturestore.nos-eastchina1.126.net/nginx/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%9B%BE.png)\n\n- 在上图中，除了最右侧的ngx_slab_pool_t接口开始的一段内存位于共享内存区外，其他内存都不是共享内存。\n- 共享内存最终是从page中分配而来。\n\n\n","slug":"nginx_memory_manage","published":1,"updated":"2019-05-27T01:49:32.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw5qxkqk000ftxs68p7olg4q","content":"<h1 id=\"一-概述\"><a href=\"#一-概述\" class=\"headerlink\" title=\"一. 概述\"></a>一. 概述</h1><ol>\n<li>应用程序的内存可以简单分为堆内存，栈内存。对于栈内存而言，在函数编译时，编译器会插入移动栈当前指针位置的代码，实现栈空间的自管理。而对于堆内存，通常需要程序员进行管理。我们通常说的内存管理亦是只堆空间内存管理。</li>\n</ol>\n<ol start=\"2\">\n<li>对于内存，我们的使用可以简化为3步，申请内存、使用内存、释放内存。申请内存，使用内存通常需要程序员显示操作，释放内存却并不一定需要程序员显示操作，目前很多的高级语言提供了垃圾回收机制，可以自行选择时机释放内存，例如: Go、Java已经实现垃圾回收, C语言目前尚未实现垃圾回收，C++中可以通过智能指针达到垃圾回收的目的。</li>\n</ol>\n<ol start=\"3\">\n<li>除了语言层面的内存管理外，有时我们需要在程序中自行管理内存，总体而言，对于内存管理，我认为主要是解决以下问题:</li>\n</ol>\n<ul>\n<li>用户申请内存时，如何快速查找到满足用户需求的内存块？ </li>\n<li>用户释放内存时，如何避免内存碎片化？</li>\n</ul>\n<blockquote>\n<p>无论是语言层面实现的内存管理还是应用程序自行实现的内存管理，大都将内存按照大小分为几种，每种采用不同的管理模式。常见的分类是按照2的整数次幂分，将不同种类的内存通过链表链接，查询时，从相应大小的链表中寻找，如果找不到，则可以考虑从更大块内存中，拿取一块，将其分为多个小点的内存。当然，对于特别大的内存，语言层面的内存管理可以直接调用内存管理相关的系统调用，应用层面的内存管理则可以直接使用语言层面的内存管理。</p>\n</blockquote>\n<ol start=\"4\">\n<li>nginx内存管理整体可以分为2个部分，</li>\n</ol>\n<ul>\n<li>第一部分是常规的内存池，用于进程平时所需的内存管理；</li>\n<li>第二部分是共享内存的管理。总体而言，共享内存教内存池要复杂的多。</li>\n</ul>\n<h1 id=\"二-nginx内存池管理\"><a href=\"#二-nginx内存池管理\" class=\"headerlink\" title=\"二. nginx内存池管理\"></a>二. nginx内存池管理</h1><h2 id=\"2-1-说明\"><a href=\"#2-1-说明\" class=\"headerlink\" title=\"2.1 说明\"></a>2.1 说明</h2><ol>\n<li>本部分使用的nginx版本为1.15.3</li>\n<li>具体源码参见src/core/ngx_palloc.c文件</li>\n</ol>\n<h2 id=\"2-2-nginx实现\"><a href=\"#2-2-nginx实现\" class=\"headerlink\" title=\"2.2 nginx实现\"></a>2.2 nginx实现</h2><h3 id=\"2-2-1-使用流程\"><a href=\"#2-2-1-使用流程\" class=\"headerlink\" title=\"2.2.1 使用流程\"></a>2.2.1 使用流程</h3><p>nginx内存池的使用较为简单,可以分为3步，</p>\n<ul>\n<li><p>调用ngx_create_pool函数获取ngx_pool_t指针。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//size代表ngx_pool_t一块的大小</span></span><br><span class=\"line\"><span class=\"keyword\">ngx_pool_t</span>* ngx_create_pool(<span class=\"keyword\">size_t</span> size, <span class=\"keyword\">ngx_log_t</span> *<span class=\"built_in\">log</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>调用ngx_palloc申请内存使用</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从pool中申请size大小的内存</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">ngx_palloc</span><span class=\"params\">(<span class=\"keyword\">ngx_pool_t</span> *pool, <span class=\"keyword\">size_t</span> size)</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>释放内存(可以释放大块内存或者释放整个内存池)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//释放从pool中申请的大块内存</span></span><br><span class=\"line\"><span class=\"keyword\">ngx_int_t</span> ngx_pfree(<span class=\"keyword\">ngx_pool_t</span> *pool, <span class=\"keyword\">void</span> *p)</span><br><span class=\"line\"><span class=\"comment\">//释放整个内存池</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ngx_destroy_pool</span><span class=\"params\">(<span class=\"keyword\">ngx_pool_t</span> *pool)</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-2-2-具体实现\"><a href=\"#2-2-2-具体实现\" class=\"headerlink\" title=\"2.2.2 具体实现\"></a>2.2.2 具体实现</h3><ol>\n<li>如下图所示，nginx将内存分为2种，一种是小内存，一种是大内存，当申请的空间大于pool-&gt;max时，我们认为是大内存空间，否则是小内存空间。<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建内存池的参数size减去头部管理结构ngx_pool_t的大小</span></span><br><span class=\"line\">pool-&gt;max = size - <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">ngx_pool_t</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/%E5%86%85%E5%AD%98%E6%B1%A0.png\" alt=\"image\"></p>\n<ol start=\"2\">\n<li>对于小块内存空间, nginx首先查看当前内存块待分配的空间中，是否能够满足用户需求，如果可以，则直接将这部分内存返回。如果不能满足用户需求，则需要重新申请一个内存块，申请的内存块与当前块空间大小相同，将新申请的内存块通过链表链接到上一个内存块，从新的内存块中分配用户所需的内存。</li>\n</ol>\n<blockquote>\n<p>小块内存并不释放，用户申请后直接使用，即使后期不再使用也不需要释放该内存。由于用户有时并不知道自己使用的内存块是大是小，此时也可以调用ngx_pfree函数释放该空间，该函数会从大空间链表中查找内存，找到则释放内存。对于小内存而言，并未做任何处理。</p>\n</blockquote>\n<ol start=\"3\">\n<li>对于大块内存, nginx会将这些内存放到链表中存储，通过pool-&gt;large进行管理。值得注意的是，用户管理大内存的ngx_pool_large_t结构是从本内存池的小块内存中申请而来，也就意味着无法释放这些内存，nginx则是直接复用ngx_pool_large_t结构体。当用户需要申请大内存空间时，利用c函数库malloc申请空间，然后将其挂载某个ngx_pool_large_t结构体上。nginx在需要一个新的ngx_pool_large_t结构时，会首先pool-&gt;large链表的前3个元素中，查看是否有可用的,如果有则直接使用，否则新建ngx_pool_large_t结构。</li>\n</ol>\n<h1 id=\"三-nginx共享内存管理\"><a href=\"#三-nginx共享内存管理\" class=\"headerlink\" title=\"三. nginx共享内存管理\"></a>三. nginx共享内存管理</h1><h2 id=\"3-1-说明\"><a href=\"#3-1-说明\" class=\"headerlink\" title=\"3.1 说明\"></a>3.1 说明</h2><ol>\n<li>本部分使用的nginx版本是1.15.3</li>\n<li>本部分源码详见src/core/ngx_slab.c, src/core/ngx_shmtx.c</li>\n<li>nginx共享内存内容相对较多，本文仅做简单概述。</li>\n</ol>\n<h2 id=\"3-2-直接使用共享内存\"><a href=\"#3-2-直接使用共享内存\" class=\"headerlink\" title=\"3.2 直接使用共享内存\"></a>3.2 直接使用共享内存</h2><h3 id=\"3-2-1-基础\"><a href=\"#3-2-1-基础\" class=\"headerlink\" title=\"3.2.1 基础\"></a>3.2.1 基础</h3><ol>\n<li>nginx中需要创建互斥锁，用于后面多进程同步使用。除此之外，nginx可能需要一些统计信息，例如设置(stat_stub),对于这些变量，我们并不需要特意管理，只需要开辟共享空间后，直接使用即可。</li>\n<li>设置stat_stub后所需的统计信息，亦是放到共享内存中，我们此处仅以nginx中的互斥锁进行说明。</li>\n</ol>\n<h3 id=\"3-2-2-nginx互斥锁的实现\"><a href=\"#3-2-2-nginx互斥锁的实现\" class=\"headerlink\" title=\"3.2.2 nginx互斥锁的实现\"></a>3.2.2 nginx互斥锁的实现</h3><ol>\n<li>nginx互斥锁，有两种方案，当系统支持原子操作时，采用原子操作，不支持时采用文件锁。本节源码见ngx_event_module_init函数。</li>\n<li>下图为文件锁实现互斥锁的示意图。<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/ngxin%E6%96%87%E4%BB%B6%E9%94%81%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%BA%92%E6%96%A5%E9%94%81.png\" alt=\"image\"></li>\n<li><p>下图为原子操作实现互斥锁的示意图。<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0%E4%BA%92%E6%96%A5%E9%94%81.png\" alt=\"image\"></p>\n</li>\n<li><p>问题</p>\n</li>\n</ol>\n<blockquote>\n<ol>\n<li>reload时，新启动的master向老的master发送信号后直接退出，旧的master,重新加载配置(ngx_init_cycle函数), 新创建工作进程, 新的工作进程与旧的工作进程使用的锁是相同的。</li>\n<li>平滑升级时, 旧的master会创建新的master, 新的master会继承旧的master监听的端口(通过环境变量传递监听套接字对应的fd)，新的进程并没有重新绑定监听端口。可能存在新老worker同时监听某个端口的情况，此时操作系统会保证只会有一个进程处理该事件(虽然epoll_wait都会被唤醒)。</li>\n</ol>\n</blockquote>\n<h2 id=\"3-3-通过slab管理共享内存\"><a href=\"#3-3-通过slab管理共享内存\" class=\"headerlink\" title=\"3.3 通过slab管理共享内存\"></a>3.3 通过slab管理共享内存</h2><ol>\n<li>nginx允许各个模块开辟共享空间以供使用,例如ngx_http_limit_conn_module模块。</li>\n<li>nginx共享内存管理的基本思想有:</li>\n</ol>\n<blockquote>\n<ol>\n<li>将内存按照页进行分配，每页的大小相同, 此处设为page_size。</li>\n<li>将内存块按照2的整数次幂进行划分, 最小为8bit, 最大为page_size/2。例如，假设每页大小为4Kb, 则将内存分为8, 16, 32, 64, 128, 256, 512, 1024, 2048共9种，每种对应一个slot, 此时slots数组的大小n即为9。申请小块内存(申请内存大小size &lt;= page_size/2)时，直接给用户这9种中的一种，例如，需要30bit时，找大小为32的内存块提供给用户。</li>\n<li>每个页只会划分一种类型的内存块。例如，某次申请内存时，现有内存无法满足要求，此时会使用一个新的页，则这个新页此后只会分配这种大小的内存。</li>\n<li>通过双向链表将所有空闲的页连接。图中ngx_slab_pool_t中的free变量即使用来链接空闲页的。</li>\n<li>通过slots数组将所有小块内存所使用的页链接起来。</li>\n<li>对于大于等于页面大小的空间请求，计算所需页数，找到连续的空闲页，将空闲页的首页地址返回给客户使用，通过每页的管理结构ngx_slab_page_t进行标识。</li>\n<li>所有页面只会有3中状态，空闲、未满、已满。空闲，未满都是通过双向链表进行整合，已满页面则不存在与任何页面，当空间被释放时，会将其加入到某个链表。</li>\n</ol>\n</blockquote>\n<ol start=\"3\">\n<li>nginx共享内存的基本结构图如下:</li>\n</ol>\n<p><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%9B%BE.png\" alt=\"image\"></p>\n<ul>\n<li>在上图中，除了最右侧的ngx_slab_pool_t接口开始的一段内存位于共享内存区外，其他内存都不是共享内存。</li>\n<li>共享内存最终是从page中分配而来。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-概述\"><a href=\"#一-概述\" class=\"headerlink\" title=\"一. 概述\"></a>一. 概述</h1><ol>\n<li>应用程序的内存可以简单分为堆内存，栈内存。对于栈内存而言，在函数编译时，编译器会插入移动栈当前指针位置的代码，实现栈空间的自管理。而对于堆内存，通常需要程序员进行管理。我们通常说的内存管理亦是只堆空间内存管理。</li>\n</ol>\n<ol start=\"2\">\n<li>对于内存，我们的使用可以简化为3步，申请内存、使用内存、释放内存。申请内存，使用内存通常需要程序员显示操作，释放内存却并不一定需要程序员显示操作，目前很多的高级语言提供了垃圾回收机制，可以自行选择时机释放内存，例如: Go、Java已经实现垃圾回收, C语言目前尚未实现垃圾回收，C++中可以通过智能指针达到垃圾回收的目的。</li>\n</ol>\n<ol start=\"3\">\n<li>除了语言层面的内存管理外，有时我们需要在程序中自行管理内存，总体而言，对于内存管理，我认为主要是解决以下问题:</li>\n</ol>\n<ul>\n<li>用户申请内存时，如何快速查找到满足用户需求的内存块？ </li>\n<li>用户释放内存时，如何避免内存碎片化？</li>\n</ul>\n<blockquote>\n<p>无论是语言层面实现的内存管理还是应用程序自行实现的内存管理，大都将内存按照大小分为几种，每种采用不同的管理模式。常见的分类是按照2的整数次幂分，将不同种类的内存通过链表链接，查询时，从相应大小的链表中寻找，如果找不到，则可以考虑从更大块内存中，拿取一块，将其分为多个小点的内存。当然，对于特别大的内存，语言层面的内存管理可以直接调用内存管理相关的系统调用，应用层面的内存管理则可以直接使用语言层面的内存管理。</p>\n</blockquote>\n<ol start=\"4\">\n<li>nginx内存管理整体可以分为2个部分，</li>\n</ol>\n<ul>\n<li>第一部分是常规的内存池，用于进程平时所需的内存管理；</li>\n<li>第二部分是共享内存的管理。总体而言，共享内存教内存池要复杂的多。</li>\n</ul>\n<h1 id=\"二-nginx内存池管理\"><a href=\"#二-nginx内存池管理\" class=\"headerlink\" title=\"二. nginx内存池管理\"></a>二. nginx内存池管理</h1><h2 id=\"2-1-说明\"><a href=\"#2-1-说明\" class=\"headerlink\" title=\"2.1 说明\"></a>2.1 说明</h2><ol>\n<li>本部分使用的nginx版本为1.15.3</li>\n<li>具体源码参见src/core/ngx_palloc.c文件</li>\n</ol>\n<h2 id=\"2-2-nginx实现\"><a href=\"#2-2-nginx实现\" class=\"headerlink\" title=\"2.2 nginx实现\"></a>2.2 nginx实现</h2><h3 id=\"2-2-1-使用流程\"><a href=\"#2-2-1-使用流程\" class=\"headerlink\" title=\"2.2.1 使用流程\"></a>2.2.1 使用流程</h3><p>nginx内存池的使用较为简单,可以分为3步，</p>\n<ul>\n<li><p>调用ngx_create_pool函数获取ngx_pool_t指针。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//size代表ngx_pool_t一块的大小</span></span><br><span class=\"line\"><span class=\"keyword\">ngx_pool_t</span>* ngx_create_pool(<span class=\"keyword\">size_t</span> size, <span class=\"keyword\">ngx_log_t</span> *<span class=\"built_in\">log</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>调用ngx_palloc申请内存使用</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从pool中申请size大小的内存</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">ngx_palloc</span><span class=\"params\">(<span class=\"keyword\">ngx_pool_t</span> *pool, <span class=\"keyword\">size_t</span> size)</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>释放内存(可以释放大块内存或者释放整个内存池)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//释放从pool中申请的大块内存</span></span><br><span class=\"line\"><span class=\"keyword\">ngx_int_t</span> ngx_pfree(<span class=\"keyword\">ngx_pool_t</span> *pool, <span class=\"keyword\">void</span> *p)</span><br><span class=\"line\"><span class=\"comment\">//释放整个内存池</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ngx_destroy_pool</span><span class=\"params\">(<span class=\"keyword\">ngx_pool_t</span> *pool)</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-2-2-具体实现\"><a href=\"#2-2-2-具体实现\" class=\"headerlink\" title=\"2.2.2 具体实现\"></a>2.2.2 具体实现</h3><ol>\n<li>如下图所示，nginx将内存分为2种，一种是小内存，一种是大内存，当申请的空间大于pool-&gt;max时，我们认为是大内存空间，否则是小内存空间。<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建内存池的参数size减去头部管理结构ngx_pool_t的大小</span></span><br><span class=\"line\">pool-&gt;max = size - <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">ngx_pool_t</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/%E5%86%85%E5%AD%98%E6%B1%A0.png\" alt=\"image\"></p>\n<ol start=\"2\">\n<li>对于小块内存空间, nginx首先查看当前内存块待分配的空间中，是否能够满足用户需求，如果可以，则直接将这部分内存返回。如果不能满足用户需求，则需要重新申请一个内存块，申请的内存块与当前块空间大小相同，将新申请的内存块通过链表链接到上一个内存块，从新的内存块中分配用户所需的内存。</li>\n</ol>\n<blockquote>\n<p>小块内存并不释放，用户申请后直接使用，即使后期不再使用也不需要释放该内存。由于用户有时并不知道自己使用的内存块是大是小，此时也可以调用ngx_pfree函数释放该空间，该函数会从大空间链表中查找内存，找到则释放内存。对于小内存而言，并未做任何处理。</p>\n</blockquote>\n<ol start=\"3\">\n<li>对于大块内存, nginx会将这些内存放到链表中存储，通过pool-&gt;large进行管理。值得注意的是，用户管理大内存的ngx_pool_large_t结构是从本内存池的小块内存中申请而来，也就意味着无法释放这些内存，nginx则是直接复用ngx_pool_large_t结构体。当用户需要申请大内存空间时，利用c函数库malloc申请空间，然后将其挂载某个ngx_pool_large_t结构体上。nginx在需要一个新的ngx_pool_large_t结构时，会首先pool-&gt;large链表的前3个元素中，查看是否有可用的,如果有则直接使用，否则新建ngx_pool_large_t结构。</li>\n</ol>\n<h1 id=\"三-nginx共享内存管理\"><a href=\"#三-nginx共享内存管理\" class=\"headerlink\" title=\"三. nginx共享内存管理\"></a>三. nginx共享内存管理</h1><h2 id=\"3-1-说明\"><a href=\"#3-1-说明\" class=\"headerlink\" title=\"3.1 说明\"></a>3.1 说明</h2><ol>\n<li>本部分使用的nginx版本是1.15.3</li>\n<li>本部分源码详见src/core/ngx_slab.c, src/core/ngx_shmtx.c</li>\n<li>nginx共享内存内容相对较多，本文仅做简单概述。</li>\n</ol>\n<h2 id=\"3-2-直接使用共享内存\"><a href=\"#3-2-直接使用共享内存\" class=\"headerlink\" title=\"3.2 直接使用共享内存\"></a>3.2 直接使用共享内存</h2><h3 id=\"3-2-1-基础\"><a href=\"#3-2-1-基础\" class=\"headerlink\" title=\"3.2.1 基础\"></a>3.2.1 基础</h3><ol>\n<li>nginx中需要创建互斥锁，用于后面多进程同步使用。除此之外，nginx可能需要一些统计信息，例如设置(stat_stub),对于这些变量，我们并不需要特意管理，只需要开辟共享空间后，直接使用即可。</li>\n<li>设置stat_stub后所需的统计信息，亦是放到共享内存中，我们此处仅以nginx中的互斥锁进行说明。</li>\n</ol>\n<h3 id=\"3-2-2-nginx互斥锁的实现\"><a href=\"#3-2-2-nginx互斥锁的实现\" class=\"headerlink\" title=\"3.2.2 nginx互斥锁的实现\"></a>3.2.2 nginx互斥锁的实现</h3><ol>\n<li>nginx互斥锁，有两种方案，当系统支持原子操作时，采用原子操作，不支持时采用文件锁。本节源码见ngx_event_module_init函数。</li>\n<li>下图为文件锁实现互斥锁的示意图。<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/ngxin%E6%96%87%E4%BB%B6%E9%94%81%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%BA%92%E6%96%A5%E9%94%81.png\" alt=\"image\"></li>\n<li><p>下图为原子操作实现互斥锁的示意图。<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0%E4%BA%92%E6%96%A5%E9%94%81.png\" alt=\"image\"></p>\n</li>\n<li><p>问题</p>\n</li>\n</ol>\n<blockquote>\n<ol>\n<li>reload时，新启动的master向老的master发送信号后直接退出，旧的master,重新加载配置(ngx_init_cycle函数), 新创建工作进程, 新的工作进程与旧的工作进程使用的锁是相同的。</li>\n<li>平滑升级时, 旧的master会创建新的master, 新的master会继承旧的master监听的端口(通过环境变量传递监听套接字对应的fd)，新的进程并没有重新绑定监听端口。可能存在新老worker同时监听某个端口的情况，此时操作系统会保证只会有一个进程处理该事件(虽然epoll_wait都会被唤醒)。</li>\n</ol>\n</blockquote>\n<h2 id=\"3-3-通过slab管理共享内存\"><a href=\"#3-3-通过slab管理共享内存\" class=\"headerlink\" title=\"3.3 通过slab管理共享内存\"></a>3.3 通过slab管理共享内存</h2><ol>\n<li>nginx允许各个模块开辟共享空间以供使用,例如ngx_http_limit_conn_module模块。</li>\n<li>nginx共享内存管理的基本思想有:</li>\n</ol>\n<blockquote>\n<ol>\n<li>将内存按照页进行分配，每页的大小相同, 此处设为page_size。</li>\n<li>将内存块按照2的整数次幂进行划分, 最小为8bit, 最大为page_size/2。例如，假设每页大小为4Kb, 则将内存分为8, 16, 32, 64, 128, 256, 512, 1024, 2048共9种，每种对应一个slot, 此时slots数组的大小n即为9。申请小块内存(申请内存大小size &lt;= page_size/2)时，直接给用户这9种中的一种，例如，需要30bit时，找大小为32的内存块提供给用户。</li>\n<li>每个页只会划分一种类型的内存块。例如，某次申请内存时，现有内存无法满足要求，此时会使用一个新的页，则这个新页此后只会分配这种大小的内存。</li>\n<li>通过双向链表将所有空闲的页连接。图中ngx_slab_pool_t中的free变量即使用来链接空闲页的。</li>\n<li>通过slots数组将所有小块内存所使用的页链接起来。</li>\n<li>对于大于等于页面大小的空间请求，计算所需页数，找到连续的空闲页，将空闲页的首页地址返回给客户使用，通过每页的管理结构ngx_slab_page_t进行标识。</li>\n<li>所有页面只会有3中状态，空闲、未满、已满。空闲，未满都是通过双向链表进行整合，已满页面则不存在与任何页面，当空间被释放时，会将其加入到某个链表。</li>\n</ol>\n</blockquote>\n<ol start=\"3\">\n<li>nginx共享内存的基本结构图如下:</li>\n</ol>\n<p><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%9B%BE.png\" alt=\"image\"></p>\n<ul>\n<li>在上图中，除了最右侧的ngx_slab_pool_t接口开始的一段内存位于共享内存区外，其他内存都不是共享内存。</li>\n<li>共享内存最终是从page中分配而来。</li>\n</ul>\n"},{"title":"结构体传输","date":"2018-11-05T12:10:41.000Z","_content":"\n# 一. 基础\n1. 结构体传输基本上有两种方式,序列化(Json,Xml等)以及直接传输结构体。\n2. 下面考虑32位系统，直接发送结构体进行传输。\n\n# 二. 结构体\n```cpp\nstruct Data{\n    char v1;\n    int v2;\n    char v3;\n}\n```\n# 三. 源码\n## 3.1 发送方\n```cpp\n//将data写入buf\nbool send(char *buf, int bufLen, const Data *data){\n    if(bufLen < sizeof(*data)) return false;\n    memcpy(buf, data, sizeof(*data);\n    return true;\n}\n\n//main function\nint main(int argc, char **argv){\n    char sendBuf[256] = {};\n    Data data;\n    data.v1 = 'a';\n    data.v2 = htonl(2);\n    data.v3 = 'b';\n    $ans = send(sendBuf, sizeof(sendBuf), &data);\n    if($ans == false) return -1;\n    //send data\n}\n```\n## 3.2 接收方\n```cpp\n//deal data\nbool parseData(char *buf, int bufLen, Data *data){\n    if(bufLen < sizeof(*data)) return false;\n    memecpy(buf, data, sizeof(*data));\n    data.v2 = ntohl(data.v2);\n    return true;\n}\n\n//main\nint main(int argc, char **argv){\n    char recvBuf[256] = {};\n    //read socket recv data\n    //deal data\n    Data data;\n    $ans = parseData(buf, sizeof(recvBuf), &data);\n    if($ans == false) return -1;\n    //Deal data\n}\n```\n## 3.3 测试\n```cpp\n#include <iostream>\n#include <string>\n#include <arpa/inet.h>\n\nusing namespace std;\n\nstruct Data{\n    char v1;\n    int v2;\n    char v3;\n};\n\nvoid parse(char *buf, Data *data){\n    memcpy(data, buf, sizeof(*data));\n    data->v2 = ntohl(data->v2);\n}\n\nint main (int argc, char **argv){\n    Data data;\n    data.v1 = 'a';\n    data.v2 = htonl(2);\n    data.v3 = 'b';\n    char buf[128] = {};\n    memcpy(buf, &data, sizeof(data));\n    Data newData;\n    parse(buf, &newData);\n    std::cout << newData.v1 << ' ' << newData.v2 << ' ' << newData.v3 << std::endl;\n    return 0;\n}\n//输出: a, 2, b\n```\n\n# 四. 注意事项\n1. sizeof(data) = 12;\n2. 结构体要考虑对齐,发送方与接收方的对齐方式应该是一致的。\n3. 发送方按照网络字节序存储,接收方得到网络字节序的数据后，解析成本机字节序。\n","source":"_posts/struct-transmission.md","raw":"---\ntitle: 结构体传输\ndate: 2018-11-05 20:10:41\ncategories:\n- 网络编程\n- 基础\ntags:\n- 网络编程\n---\n\n# 一. 基础\n1. 结构体传输基本上有两种方式,序列化(Json,Xml等)以及直接传输结构体。\n2. 下面考虑32位系统，直接发送结构体进行传输。\n\n# 二. 结构体\n```cpp\nstruct Data{\n    char v1;\n    int v2;\n    char v3;\n}\n```\n# 三. 源码\n## 3.1 发送方\n```cpp\n//将data写入buf\nbool send(char *buf, int bufLen, const Data *data){\n    if(bufLen < sizeof(*data)) return false;\n    memcpy(buf, data, sizeof(*data);\n    return true;\n}\n\n//main function\nint main(int argc, char **argv){\n    char sendBuf[256] = {};\n    Data data;\n    data.v1 = 'a';\n    data.v2 = htonl(2);\n    data.v3 = 'b';\n    $ans = send(sendBuf, sizeof(sendBuf), &data);\n    if($ans == false) return -1;\n    //send data\n}\n```\n## 3.2 接收方\n```cpp\n//deal data\nbool parseData(char *buf, int bufLen, Data *data){\n    if(bufLen < sizeof(*data)) return false;\n    memecpy(buf, data, sizeof(*data));\n    data.v2 = ntohl(data.v2);\n    return true;\n}\n\n//main\nint main(int argc, char **argv){\n    char recvBuf[256] = {};\n    //read socket recv data\n    //deal data\n    Data data;\n    $ans = parseData(buf, sizeof(recvBuf), &data);\n    if($ans == false) return -1;\n    //Deal data\n}\n```\n## 3.3 测试\n```cpp\n#include <iostream>\n#include <string>\n#include <arpa/inet.h>\n\nusing namespace std;\n\nstruct Data{\n    char v1;\n    int v2;\n    char v3;\n};\n\nvoid parse(char *buf, Data *data){\n    memcpy(data, buf, sizeof(*data));\n    data->v2 = ntohl(data->v2);\n}\n\nint main (int argc, char **argv){\n    Data data;\n    data.v1 = 'a';\n    data.v2 = htonl(2);\n    data.v3 = 'b';\n    char buf[128] = {};\n    memcpy(buf, &data, sizeof(data));\n    Data newData;\n    parse(buf, &newData);\n    std::cout << newData.v1 << ' ' << newData.v2 << ' ' << newData.v3 << std::endl;\n    return 0;\n}\n//输出: a, 2, b\n```\n\n# 四. 注意事项\n1. sizeof(data) = 12;\n2. 结构体要考虑对齐,发送方与接收方的对齐方式应该是一致的。\n3. 发送方按照网络字节序存储,接收方得到网络字节序的数据后，解析成本机字节序。\n","slug":"struct-transmission","published":1,"updated":"2019-05-27T01:49:32.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw5qxkqm000htxs69f4ez5vq","content":"<h1 id=\"一-基础\"><a href=\"#一-基础\" class=\"headerlink\" title=\"一. 基础\"></a>一. 基础</h1><ol>\n<li>结构体传输基本上有两种方式,序列化(Json,Xml等)以及直接传输结构体。</li>\n<li>下面考虑32位系统，直接发送结构体进行传输。</li>\n</ol>\n<h1 id=\"二-结构体\"><a href=\"#二-结构体\" class=\"headerlink\" title=\"二. 结构体\"></a>二. 结构体</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Data</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> v1;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v2;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> v3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"三-源码\"><a href=\"#三-源码\" class=\"headerlink\" title=\"三. 源码\"></a>三. 源码</h1><h2 id=\"3-1-发送方\"><a href=\"#3-1-发送方\" class=\"headerlink\" title=\"3.1 发送方\"></a>3.1 发送方</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将data写入buf</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">send</span><span class=\"params\">(<span class=\"keyword\">char</span> *buf, <span class=\"keyword\">int</span> bufLen, <span class=\"keyword\">const</span> Data *data)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(bufLen &lt; <span class=\"keyword\">sizeof</span>(*data)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(buf, data, <span class=\"keyword\">sizeof</span>(*data);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main function</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> sendBuf[<span class=\"number\">256</span>] = &#123;&#125;;</span><br><span class=\"line\">    Data data;</span><br><span class=\"line\">    data.v1 = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">    data.v2 = htonl(<span class=\"number\">2</span>);</span><br><span class=\"line\">    data.v3 = <span class=\"string\">'b'</span>;</span><br><span class=\"line\">    $ans = send(sendBuf, <span class=\"keyword\">sizeof</span>(sendBuf), &amp;data);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($ans == <span class=\"literal\">false</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//send data</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-接收方\"><a href=\"#3-2-接收方\" class=\"headerlink\" title=\"3.2 接收方\"></a>3.2 接收方</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//deal data</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">parseData</span><span class=\"params\">(<span class=\"keyword\">char</span> *buf, <span class=\"keyword\">int</span> bufLen, Data *data)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(bufLen &lt; <span class=\"keyword\">sizeof</span>(*data)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    memecpy(buf, data, <span class=\"keyword\">sizeof</span>(*data));</span><br><span class=\"line\">    data.v2 = ntohl(data.v2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> recvBuf[<span class=\"number\">256</span>] = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//read socket recv data</span></span><br><span class=\"line\">    <span class=\"comment\">//deal data</span></span><br><span class=\"line\">    Data data;</span><br><span class=\"line\">    $ans = parseData(buf, <span class=\"keyword\">sizeof</span>(recvBuf), &amp;data);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($ans == <span class=\"literal\">false</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//Deal data</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-测试\"><a href=\"#3-3-测试\" class=\"headerlink\" title=\"3.3 测试\"></a>3.3 测试</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Data</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> v1;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v2;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> v3;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">parse</span><span class=\"params\">(<span class=\"keyword\">char</span> *buf, Data *data)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(data, buf, <span class=\"keyword\">sizeof</span>(*data));</span><br><span class=\"line\">    data-&gt;v2 = ntohl(data-&gt;v2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">    Data data;</span><br><span class=\"line\">    data.v1 = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">    data.v2 = htonl(<span class=\"number\">2</span>);</span><br><span class=\"line\">    data.v3 = <span class=\"string\">'b'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[<span class=\"number\">128</span>] = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(buf, &amp;data, <span class=\"keyword\">sizeof</span>(data));</span><br><span class=\"line\">    Data newData;</span><br><span class=\"line\">    parse(buf, &amp;newData);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; newData.v1 &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; newData.v2 &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; newData.v3 &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出: a, 2, b</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"四-注意事项\"><a href=\"#四-注意事项\" class=\"headerlink\" title=\"四. 注意事项\"></a>四. 注意事项</h1><ol>\n<li>sizeof(data) = 12;</li>\n<li>结构体要考虑对齐,发送方与接收方的对齐方式应该是一致的。</li>\n<li>发送方按照网络字节序存储,接收方得到网络字节序的数据后，解析成本机字节序。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-基础\"><a href=\"#一-基础\" class=\"headerlink\" title=\"一. 基础\"></a>一. 基础</h1><ol>\n<li>结构体传输基本上有两种方式,序列化(Json,Xml等)以及直接传输结构体。</li>\n<li>下面考虑32位系统，直接发送结构体进行传输。</li>\n</ol>\n<h1 id=\"二-结构体\"><a href=\"#二-结构体\" class=\"headerlink\" title=\"二. 结构体\"></a>二. 结构体</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Data</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> v1;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v2;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> v3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"三-源码\"><a href=\"#三-源码\" class=\"headerlink\" title=\"三. 源码\"></a>三. 源码</h1><h2 id=\"3-1-发送方\"><a href=\"#3-1-发送方\" class=\"headerlink\" title=\"3.1 发送方\"></a>3.1 发送方</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将data写入buf</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">send</span><span class=\"params\">(<span class=\"keyword\">char</span> *buf, <span class=\"keyword\">int</span> bufLen, <span class=\"keyword\">const</span> Data *data)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(bufLen &lt; <span class=\"keyword\">sizeof</span>(*data)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(buf, data, <span class=\"keyword\">sizeof</span>(*data);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main function</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> sendBuf[<span class=\"number\">256</span>] = &#123;&#125;;</span><br><span class=\"line\">    Data data;</span><br><span class=\"line\">    data.v1 = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">    data.v2 = htonl(<span class=\"number\">2</span>);</span><br><span class=\"line\">    data.v3 = <span class=\"string\">'b'</span>;</span><br><span class=\"line\">    $ans = send(sendBuf, <span class=\"keyword\">sizeof</span>(sendBuf), &amp;data);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($ans == <span class=\"literal\">false</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//send data</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-接收方\"><a href=\"#3-2-接收方\" class=\"headerlink\" title=\"3.2 接收方\"></a>3.2 接收方</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//deal data</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">parseData</span><span class=\"params\">(<span class=\"keyword\">char</span> *buf, <span class=\"keyword\">int</span> bufLen, Data *data)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(bufLen &lt; <span class=\"keyword\">sizeof</span>(*data)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    memecpy(buf, data, <span class=\"keyword\">sizeof</span>(*data));</span><br><span class=\"line\">    data.v2 = ntohl(data.v2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> recvBuf[<span class=\"number\">256</span>] = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//read socket recv data</span></span><br><span class=\"line\">    <span class=\"comment\">//deal data</span></span><br><span class=\"line\">    Data data;</span><br><span class=\"line\">    $ans = parseData(buf, <span class=\"keyword\">sizeof</span>(recvBuf), &amp;data);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($ans == <span class=\"literal\">false</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//Deal data</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-测试\"><a href=\"#3-3-测试\" class=\"headerlink\" title=\"3.3 测试\"></a>3.3 测试</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Data</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> v1;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v2;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> v3;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">parse</span><span class=\"params\">(<span class=\"keyword\">char</span> *buf, Data *data)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(data, buf, <span class=\"keyword\">sizeof</span>(*data));</span><br><span class=\"line\">    data-&gt;v2 = ntohl(data-&gt;v2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">    Data data;</span><br><span class=\"line\">    data.v1 = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">    data.v2 = htonl(<span class=\"number\">2</span>);</span><br><span class=\"line\">    data.v3 = <span class=\"string\">'b'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[<span class=\"number\">128</span>] = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(buf, &amp;data, <span class=\"keyword\">sizeof</span>(data));</span><br><span class=\"line\">    Data newData;</span><br><span class=\"line\">    parse(buf, &amp;newData);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; newData.v1 &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; newData.v2 &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; newData.v3 &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出: a, 2, b</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"四-注意事项\"><a href=\"#四-注意事项\" class=\"headerlink\" title=\"四. 注意事项\"></a>四. 注意事项</h1><ol>\n<li>sizeof(data) = 12;</li>\n<li>结构体要考虑对齐,发送方与接收方的对齐方式应该是一致的。</li>\n<li>发送方按照网络字节序存储,接收方得到网络字节序的数据后，解析成本机字节序。</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjw5qxkq00000txs6emwjofse","category_id":"cjw5qxkq80004txs62lgoolu5","_id":"cjw5qxkqt000stxs6gsmu0knf"},{"post_id":"cjw5qxkq00000txs6emwjofse","category_id":"cjw5qxkqo000mtxs6871p90xq","_id":"cjw5qxkqu000vtxs66irh5whw"},{"post_id":"cjw5qxkq50002txs63mzr3jm0","category_id":"cjw5qxkqd0009txs6ywb1knat","_id":"cjw5qxkqx0013txs6qoc58j57"},{"post_id":"cjw5qxkq50002txs63mzr3jm0","category_id":"cjw5qxkqv000wtxs6qs0nccnp","_id":"cjw5qxkqy0016txs6yf44mohb"},{"post_id":"cjw5qxkq90006txs6kzrxomkj","category_id":"cjw5qxkqd0009txs6ywb1knat","_id":"cjw5qxkr0001ftxs6lus0mhs2"},{"post_id":"cjw5qxkq90006txs6kzrxomkj","category_id":"cjw5qxkqv000wtxs6qs0nccnp","_id":"cjw5qxkr0001htxs6wq99ob4z"},{"post_id":"cjw5qxkqm000htxs69f4ez5vq","category_id":"cjw5qxkqd0009txs6ywb1knat","_id":"cjw5qxkr1001jtxs6n1tni7hb"},{"post_id":"cjw5qxkqm000htxs69f4ez5vq","category_id":"cjw5qxkqv000wtxs6qs0nccnp","_id":"cjw5qxkr1001ltxs6swf5cswy"},{"post_id":"cjw5qxkqb0007txs6bbgcl9ro","category_id":"cjw5qxkqd0009txs6ywb1knat","_id":"cjw5qxkr2001ntxs6n6e32l9o"},{"post_id":"cjw5qxkqb0007txs6bbgcl9ro","category_id":"cjw5qxkr0001etxs6bi938z5m","_id":"cjw5qxkr2001ptxs6c6yvgz4c"},{"post_id":"cjw5qxkqc0008txs6at3dqh2z","category_id":"cjw5qxkqs000ptxs6a7l6xc57","_id":"cjw5qxkr3001ttxs6tuhdhp2b"},{"post_id":"cjw5qxkqc0008txs6at3dqh2z","category_id":"cjw5qxkr1001ktxs6jniwcbi2","_id":"cjw5qxkr3001vtxs6vs7t5f28"},{"post_id":"cjw5qxkqd000btxs6o3329vyr","category_id":"cjw5qxkqs000ptxs6a7l6xc57","_id":"cjw5qxkr4001ytxs6yoslldhl"},{"post_id":"cjw5qxkqd000btxs6o3329vyr","category_id":"cjw5qxkr1001ktxs6jniwcbi2","_id":"cjw5qxkr40020txs6gvr7kdth"},{"post_id":"cjw5qxkqg000ctxs6iijihk7w","category_id":"cjw5qxkqw000ztxs6j6raqttz","_id":"cjw5qxkr50023txs68xpq0vt4"},{"post_id":"cjw5qxkqg000ctxs6iijihk7w","category_id":"cjw5qxkr3001stxs6raga91w3","_id":"cjw5qxkr50025txs6benta5iz"},{"post_id":"cjw5qxkqk000ftxs68p7olg4q","category_id":"cjw5qxkqs000ptxs6a7l6xc57","_id":"cjw5qxkr60027txs64xtj2w4d"},{"post_id":"cjw5qxkqk000ftxs68p7olg4q","category_id":"cjw5qxkr4001ztxs6uw987mf4","_id":"cjw5qxkr60028txs6f2my870j"}],"PostTag":[{"post_id":"cjw5qxkq00000txs6emwjofse","tag_id":"cjw5qxkq90005txs6rz7aq8da","_id":"cjw5qxkql000gtxs6sxg93goe"},{"post_id":"cjw5qxkq00000txs6emwjofse","tag_id":"cjw5qxkqd000atxs6mvpf36qg","_id":"cjw5qxkqn000itxs67paf98kk"},{"post_id":"cjw5qxkqm000htxs69f4ez5vq","tag_id":"cjw5qxkqi000etxs67suzqnob","_id":"cjw5qxkqo000ltxs6vh7da9ef"},{"post_id":"cjw5qxkq50002txs63mzr3jm0","tag_id":"cjw5qxkqi000etxs67suzqnob","_id":"cjw5qxkqr000otxs6b1b84e5x"},{"post_id":"cjw5qxkq50002txs63mzr3jm0","tag_id":"cjw5qxkqo000ktxs6su37ija7","_id":"cjw5qxkqs000qtxs6d1yn5kfu"},{"post_id":"cjw5qxkq90006txs6kzrxomkj","tag_id":"cjw5qxkqp000ntxs66pdn9clb","_id":"cjw5qxkqw000ytxs60m0ug3xh"},{"post_id":"cjw5qxkq90006txs6kzrxomkj","tag_id":"cjw5qxkqs000rtxs6wsx6yxx2","_id":"cjw5qxkqx0010txs6rx44kvc7"},{"post_id":"cjw5qxkq90006txs6kzrxomkj","tag_id":"cjw5qxkqi000etxs67suzqnob","_id":"cjw5qxkqx0012txs6iwbrtliw"},{"post_id":"cjw5qxkqb0007txs6bbgcl9ro","tag_id":"cjw5qxkqw000xtxs6vdtrif9p","_id":"cjw5qxkqy0017txs6uv0rwtv6"},{"post_id":"cjw5qxkqb0007txs6bbgcl9ro","tag_id":"cjw5qxkqx0011txs6t8ga2ew4","_id":"cjw5qxkqy0019txs6rwdjnwp7"},{"post_id":"cjw5qxkqc0008txs6at3dqh2z","tag_id":"cjw5qxkqy0015txs6ygwwi0fp","_id":"cjw5qxkr0001dtxs6vuhw9ksm"},{"post_id":"cjw5qxkqc0008txs6at3dqh2z","tag_id":"cjw5qxkqz001atxs6vw7pcmii","_id":"cjw5qxkr0001gtxs66blnqb21"},{"post_id":"cjw5qxkqd000btxs6o3329vyr","tag_id":"cjw5qxkqz001ctxs6fx5oj4fc","_id":"cjw5qxkr3001rtxs6ecwuk81r"},{"post_id":"cjw5qxkqd000btxs6o3329vyr","tag_id":"cjw5qxkqy0015txs6ygwwi0fp","_id":"cjw5qxkr3001utxs6wyortf1x"},{"post_id":"cjw5qxkqd000btxs6o3329vyr","tag_id":"cjw5qxkqi000etxs67suzqnob","_id":"cjw5qxkr4001xtxs64i8yiq17"},{"post_id":"cjw5qxkqg000ctxs6iijihk7w","tag_id":"cjw5qxkr2001qtxs6cker7tsp","_id":"cjw5qxkr50022txs6o4eu4pyp"},{"post_id":"cjw5qxkqg000ctxs6iijihk7w","tag_id":"cjw5qxkr4001wtxs6801spk43","_id":"cjw5qxkr50024txs6i3716f0n"},{"post_id":"cjw5qxkqk000ftxs68p7olg4q","tag_id":"cjw5qxkqy0015txs6ygwwi0fp","_id":"cjw5qxkr60026txs6ksosrgit"}],"Tag":[{"name":"负载均衡","_id":"cjw5qxkq90005txs6rz7aq8da"},{"name":"分布式技术","_id":"cjw5qxkqd000atxs6mvpf36qg"},{"name":"网络编程","_id":"cjw5qxkqi000etxs67suzqnob"},{"name":"数据传输顺序","_id":"cjw5qxkqo000ktxs6su37ija7"},{"name":"水平触发","_id":"cjw5qxkqp000ntxs66pdn9clb"},{"name":"边沿触发","_id":"cjw5qxkqs000rtxs6wsx6yxx2"},{"name":"网络","_id":"cjw5qxkqw000xtxs6vdtrif9p"},{"name":"代理","_id":"cjw5qxkqx0011txs6t8ga2ew4"},{"name":"nginx","_id":"cjw5qxkqy0015txs6ygwwi0fp"},{"name":"配置存储","_id":"cjw5qxkqz001atxs6vw7pcmii"},{"name":"epoll","_id":"cjw5qxkqz001ctxs6fx5oj4fc"},{"name":"server","_id":"cjw5qxkr2001qtxs6cker7tsp"},{"name":"swoole","_id":"cjw5qxkr4001wtxs6801spk43"}]}}