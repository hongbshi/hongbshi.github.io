{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1558921772171},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1558921772171},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1558921772171},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1558921772171},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1558921772171},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1558921772171},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1558921772172},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1558921772172},{"_id":"themes/next/_config.yml","hash":"dbfa2823b0c5b0c3d2fe99004c315f2409836959","modified":1558921772172},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1558921772173},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1558921772172},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1558921772172},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1558921772173},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1558921772191},{"_id":"source/_posts/LT-ET.md","hash":"f87f60aa7a06e48af7de6c3c24098b2e01d06947","modified":1558921772146},{"_id":"source/_posts/browser-proxy.md","hash":"0fa37758a1e888db67eef2251c76aeaa3cc1594a","modified":1558921772146},{"_id":"source/_posts/InnoDB_DataPage.md","hash":"e68b29c3f68611fb356e8f04cfcd605be26638da","modified":1602468588099},{"_id":"source/_posts/link-library-introduce.md","hash":"d5893314ad03c928475d424a4694918a8344ba8f","modified":1567048434771},{"_id":"source/_posts/net-byte-order.md","hash":"a701bdb99b3225ff8f6ae8d25f7848bfe0c4dc5f","modified":1558921772147},{"_id":"source/_posts/nginx-config-store-summarize.md","hash":"44d6c2ad604a0852643d9d5cba3ae6731f878628","modified":1558921772148},{"_id":"source/_posts/struct-transmission.md","hash":"94602dc13bd41f8791306018e07c191b30c3face","modified":1558921772149},{"_id":"source/_posts/load_balance.md","hash":"864994c33746b459cad495996a0e5b61ead7b401","modified":1558921772146},{"_id":"source/_posts/nginx_memory_manage.md","hash":"0492d25d02833a91cd1946c3135b1f5d62b5b811","modified":1558921772149},{"_id":"source/_posts/nginx-listen-socket.md","hash":"458db100b15a19bd14777c7d615f8d3b640ae9f6","modified":1558921772149},{"_id":"source/categories/index.md","hash":"629fd3a876d21c056d2063be1f2424b204822a68","modified":1558921772150},{"_id":"source/tags/index.md","hash":"bb7ee0987f0e61dbec70077d2e388b316c7be60f","modified":1558921772150},{"_id":"source/_posts/swoole-server-introduce.md","hash":"447ed85c018d2c9ee05cf4774ee57f89f80c482f","modified":1561021337781},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1558921772174},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1558921772173},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1558921772173},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1558921772174},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1558921772173},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1558921772174},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1558921772174},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1558921772175},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1558921772174},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1558921772175},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1558921772174},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1558921772175},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1558921772175},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1558921772176},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1558921772176},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1558921772176},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1558921772177},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1558921772190},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1558921772190},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1558921772191},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1558921772191},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1558921772191},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1558921772191},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1558921772191},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1558921772192},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1558921772193},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1558921772248},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1558921772248},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1558921772247},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558921772218},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1558921772176},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"2922006bd970e531edc469ffb45b9854cda0a109","modified":1558921772177},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1558921772176},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1558921772177},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1558921772178},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1558921772178},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1558921772178},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1558921772179},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1558921772179},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1558921772179},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1558921772177},{"_id":"themes/next/layout/_macro/post.swig","hash":"d3405c5916844e6e4bcff17136cbc711ba78d46b","modified":1558921772177},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1558921772180},{"_id":"themes/next/layout/_macro/post_old.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1558921772178},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1558921772180},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1558921772180},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1558921772180},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1558921772183},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1558921772183},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1558921772184},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1558921772188},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1558921772188},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1558921772188},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1558921772189},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1558921772189},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1558921772188},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1558921772189},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1558921772217},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1558921772218},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1558921772219},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1558921772218},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1558921772218},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1558921772218},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1558921772219},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1558921772219},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1558921772219},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1558921772219},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1558921772220},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1558921772220},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1558921772220},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1558921772220},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1558921772220},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1558921772220},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1558921772221},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1558921772221},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1558921772221},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1558921772193},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1558921772193},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1558921772194},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1558921772194},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1558921772194},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1558921772194},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1558921772194},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1558921772195},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1558921772195},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558921772183},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558921772184},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558921772210},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558921772211},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558921772211},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558921772217},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558921772217},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1558921772180},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1558921772180},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1558921772181},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1558921772182},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1558921772181},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1558921772181},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1558921772182},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1558921772182},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1558921772182},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1558921772183},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1558921772183},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1558921772184},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1558921772184},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1558921772184},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1558921772185},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1558921772185},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1558921772184},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1558921772185},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1558921772185},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1558921772186},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1558921772186},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1558921772185},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1558921772186},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1558921772187},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1558921772186},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1558921772187},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1558921772187},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1558921772186},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1558921772187},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1558921772187},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1558921772187},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1558921772188},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1558921772188},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1558921772186},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1558921772190},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1558921772189},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1558921772190},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1558921772190},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"befbf3f19fe82bcb4b2ac7ddbf1333c8bdc6be09","modified":1558921772210},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1558921772210},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1558921772216},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1558921772211},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1558921772216},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1558921772211},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1558921772217},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1558921772217},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1558921772222},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1558921772221},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1558921772222},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1558921772222},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1558921772223},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1558921772223},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1558921772223},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1558921772223},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1558921772224},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1558921772224},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1558921772230},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1558921772230},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1558921772227},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1558921772230},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1558921772230},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1558921772234},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1558921772233},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1558921772235},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1558921772234},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1558921772234},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1558921772235},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1558921772235},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1558921772235},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1558921772239},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1558921772235},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1558921772239},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1558921772239},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1558921772240},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1558921772240},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1558921772240},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1558921772240},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1558921772240},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1558921772241},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1558921772240},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1558921772241},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1558921772241},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1558921772241},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1558921772241},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1558921772242},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1558921772242},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1558921772241},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1558921772242},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1558921772242},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1558921772242},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1558921772242},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1558921772242},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1558921772242},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1558921772242},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1558921772243},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1558921772243},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1558921772243},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1558921772246},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1558921772246},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1558921772247},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1558921772247},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1558921772247},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1558921772221},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1558921772239},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1558921772196},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1558921772195},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1558921772195},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1558921772196},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1558921772196},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1558921772199},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1558921772209},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1558921772209},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1558921772209},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1558921772209},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1558921772210},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1558921772210},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1558921772210},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1558921772212},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1558921772212},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1558921772212},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1558921772212},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1558921772213},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1558921772213},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1558921772213},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1558921772213},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1558921772215},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1558921772215},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1558921772204},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1558921772215},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1558921772215},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1558921772216},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1558921772216},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1558921772189},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1558921772214},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1558921772189},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1558921772214},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1558921772214},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1558921772214},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1558921772214},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1558921772223},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1558921772227},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1558921772231},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1558921772231},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1558921772231},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1558921772226},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1558921772231},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1558921772233},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1558921772231},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1558921772233},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1558921772234},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1558921772234},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1558921772231},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1558921772233},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1558921772235},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1558921772235},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1558921772236},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1558921772245},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1558921772245},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1558921772226},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1558921772226},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1558921772247},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1558921772239},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1558921772196},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1558921772197},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1558921772196},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1558921772197},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1558921772197},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1558921772198},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1558921772197},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1558921772198},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1558921772198},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1558921772198},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1558921772198},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1558921772199},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1558921772199},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1558921772199},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1558921772202},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1558921772202},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1558921772202},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1558921772202},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1558921772203},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1558921772203},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1558921772203},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1558921772203},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1558921772203},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1558921772203},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1558921772199},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1558921772199},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1558921772200},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1558921772200},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1558921772200},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1558921772200},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1558921772200},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1558921772201},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1558921772201},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1558921772201},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1558921772201},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1558921772201},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1558921772201},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1558921772202},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1558921772202},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1558921772204},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1558921772204},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1558921772204},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1558921772204},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1558921772205},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1558921772205},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1558921772205},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1558921772205},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1558921772206},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1558921772207},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1558921772208},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1558921772207},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1558921772207},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1558921772208},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1558921772208},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1558921772208},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1558921772208},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1558921772209},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1558921772208},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1558921772213},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1558921772214},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1558921772215},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1558921772224},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1558921772225},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1558921772225},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1558921772225},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1558921772225},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1558921772232},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1558921772232},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1558921772232},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1558921772232},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1558921772232},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1558921772233},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1558921772238},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1558921772236},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1558921772237},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1558921772238},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1558921772229},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1558921772245},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1558921772238},{"_id":"public/search.xml","hash":"7bdefd62239b4f20cda932fc8af823158db13471","modified":1602469089849},{"_id":"public/tags/index.html","hash":"ecdf33eefa409b7e65a825bb2584016f9e8d9771","modified":1602469089866},{"_id":"public/categories/index.html","hash":"09332035d675d0079b505cd4cdad7f9d3345d9de","modified":1602469089866},{"_id":"public/2020/10/12/InnoDB_DataPage/index.html","hash":"0b62bb7f0da93a497c120400685c5d623d842b3a","modified":1602469089866},{"_id":"public/2019/08/28/link-library-introduce/index.html","hash":"93285061213273b6405e886d206812463b0710cc","modified":1602469089866},{"_id":"public/2019/05/27/swoole-server-introduce/index.html","hash":"d081c57973800cb3e0e93c00b58b25279b6d91b7","modified":1602469089866},{"_id":"public/2018/11/13/nginx-config-store-summarize/index.html","hash":"2b235387bd4722ce8f48624b422b4a6b3834fee1","modified":1602469089866},{"_id":"public/2018/11/12/nginx-listen-socket/index.html","hash":"86960da0e9d8d02c3436e5e8265c792ff2c415ec","modified":1602469089867},{"_id":"public/2018/11/09/browser-proxy/index.html","hash":"f39a704feccdc8ad133dae9d4e830bef421843c3","modified":1602469089867},{"_id":"public/2018/11/05/struct-transmission/index.html","hash":"d7888cc790fed9e84f9f0640d00e2f8562c0b8ef","modified":1602469089867},{"_id":"public/2018/11/05/net-byte-order/index.html","hash":"4898f617352eb745ce5bb344dc02e85b19dc0557","modified":1602469089867},{"_id":"public/2018/11/05/LT-ET/index.html","hash":"96dc9281e341f0b86e16e5ae133ab45e0630db84","modified":1602469089867},{"_id":"public/2018/11/01/load_balance/index.html","hash":"3ed8ddd29282bfca5148ab03e5c08c8be7a6569e","modified":1602469089867},{"_id":"public/2018/10/31/nginx_memory_manage/index.html","hash":"7ebec7e5d7161932d43ee2952b5953504a99cb8b","modified":1602469089867},{"_id":"public/categories/网络编程/index.html","hash":"52e48065f05d83ee95d8d3881ea11e39ae08e3d2","modified":1602469089867},{"_id":"public/categories/Mysql/index.html","hash":"b0695d6457a79c35a7fadd2ffb898869dfaa8668","modified":1602469089867},{"_id":"public/categories/C-C/index.html","hash":"002a88ecfd15f30483be53d54d69ae011c36a993","modified":1602469089867},{"_id":"public/categories/网络编程/代理/index.html","hash":"d25f404678789eef0815eaeb1f466012d2364767","modified":1602469089867},{"_id":"public/categories/网络编程/基础/index.html","hash":"224e37bcdfe60e4db3bd4f893b50450b9693ddd5","modified":1602469089867},{"_id":"public/categories/C-C/链接库/index.html","hash":"9d3c63c7f0045c0cc009ed44e3cf330a46e37316","modified":1602469089867},{"_id":"public/categories/nginx/index.html","hash":"8121415863d4ca0355033a7a2b4b713be4494809","modified":1602469089867},{"_id":"public/categories/架构/index.html","hash":"7e157e151011d2868cf8a3f3805fafe06a13d1f0","modified":1602469089867},{"_id":"public/categories/nginx/配置解析/index.html","hash":"b2ae5c6907025fb001f37293bb804faf1b4b3d99","modified":1602469089867},{"_id":"public/categories/nginx/内存管理/index.html","hash":"bc22742f8c81aaea6dded6a2cb54fe4b609e69df","modified":1602469089867},{"_id":"public/categories/架构/负载均衡/index.html","hash":"3ea4207e1522a94ff12bdf8332b46563d84bb646","modified":1602469089867},{"_id":"public/categories/swoole/index.html","hash":"84b3facfae3e1fcbd0be3b387afd7184002067d9","modified":1602469089867},{"_id":"public/categories/swoole/server/index.html","hash":"5ff7f65ec4e184450cd7a1c314399a7902eb73b7","modified":1602469089867},{"_id":"public/archives/index.html","hash":"c6da70b8623f497fdb08dfd48994a334d33a81d7","modified":1602469089867},{"_id":"public/archives/page/2/index.html","hash":"fe4b5f88eec147a7fc17cb455e207f5921525025","modified":1602469089867},{"_id":"public/archives/2018/index.html","hash":"d3e15e33ab6cf1f237683eb4e4db0756d1eb2e69","modified":1602469089867},{"_id":"public/archives/2018/10/index.html","hash":"a99b540d7dc7b513af898b4864b1bfc1340119b0","modified":1602469089867},{"_id":"public/archives/2018/11/index.html","hash":"9672b9207ea9b644f794161f2e1fbacbdd4b1f40","modified":1602469089868},{"_id":"public/archives/2019/index.html","hash":"743a08ac20f6e5b9f858c6fcf8468b8af1e66fda","modified":1602469089868},{"_id":"public/archives/2019/05/index.html","hash":"c5d8c5250a772e404cec7e4350d59e027c11132d","modified":1602469089868},{"_id":"public/archives/2019/08/index.html","hash":"cdb2e459a0e295986c4cbeb03a2780a99251626a","modified":1602469089868},{"_id":"public/archives/2020/index.html","hash":"96ec6e346600db8d2096592d7e10bb837e8f460a","modified":1602469089868},{"_id":"public/archives/2020/10/index.html","hash":"2c195889a9007725966034d08a3cb956b119e432","modified":1602469089868},{"_id":"public/tags/网络/index.html","hash":"952e66e02444161c250f8d79e3eb3fd0202fc845","modified":1602469089868},{"_id":"public/tags/代理/index.html","hash":"4f221f9555fe636c4a0e9527cbe98ecfa2332020","modified":1602469089868},{"_id":"public/tags/Mysql/index.html","hash":"dd99e74bad47581190f9ab059ba07f0f7bbfe433","modified":1602469089868},{"_id":"public/tags/InnoDB/index.html","hash":"6a47f33d2f2eeab94c3e7705f930d965b4c9e876","modified":1602469089868},{"_id":"public/tags/水平触发/index.html","hash":"0ffc8bb597507d14049dcff23080f9951864898a","modified":1602469089868},{"_id":"public/tags/边沿触发/index.html","hash":"6e3870aa311c66cebe8e16032832b90ef0586ec6","modified":1602469089868},{"_id":"public/tags/网络编程/index.html","hash":"072a9ba99c922736c78b05265f80a2537daab416","modified":1602469089868},{"_id":"public/tags/编译/index.html","hash":"38fb272d5ec880b2e42c29b4fe6876a2e71ae4f8","modified":1602469089868},{"_id":"public/tags/链接/index.html","hash":"7b1d87cd5090ba1b203c5241d8ce638e125f1431","modified":1602469089868},{"_id":"public/tags/动态链接库/index.html","hash":"bafcfb85cb737e90749f2fd6903041ffa72301cd","modified":1602469089868},{"_id":"public/tags/静态链接库/index.html","hash":"beb48b6910d998b88ce02ee9a57aa0542573d250","modified":1602469089868},{"_id":"public/tags/nginx/index.html","hash":"d42332b1489c156b6147d67e988cacd12ef9407e","modified":1602469089868},{"_id":"public/tags/配置存储/index.html","hash":"fc04d2243e6d1ae9502e7ff9190e1cde699b0713","modified":1602469089868},{"_id":"public/tags/负载均衡/index.html","hash":"3b77c5c7b82ec2587b92ec18b0585848243414ff","modified":1602469089868},{"_id":"public/tags/分布式技术/index.html","hash":"ca6cba01076105394a980e0edb51a5285130c46c","modified":1602469089868},{"_id":"public/tags/数据传输顺序/index.html","hash":"6fcca881b3610c1c2080e71a8d3336b5f3af701c","modified":1602469089868},{"_id":"public/tags/epoll/index.html","hash":"b861f884e13f974a5002cebdb4d469c0bb78cfde","modified":1602469089868},{"_id":"public/tags/server/index.html","hash":"54bb0cb2818c2510b1ca5db14b7f5bd07a0bb22a","modified":1602469089868},{"_id":"public/tags/swoole/index.html","hash":"2175d98eda05898f05e0a8b11ccf6368d476cd55","modified":1602469089868},{"_id":"public/index.html","hash":"2c4b0a2b64eedfe9168522dd393fe41448c0ee17","modified":1602469089868},{"_id":"public/page/2/index.html","hash":"22045cec43761fbda44c5c521b19091ff018dea3","modified":1602469089868}],"Category":[{"name":"网络编程","_id":"ckg5wpdup000263314xp5p61j"},{"name":"Mysql","_id":"ckg5wpduu0006633151uopl3c"},{"name":"C/C++","_id":"ckg5wpdux000c6331ccpv93zz"},{"name":"代理","parent":"ckg5wpdup000263314xp5p61j","_id":"ckg5wpduy000f633169bwajpx"},{"name":"基础","parent":"ckg5wpdup000263314xp5p61j","_id":"ckg5wpduz000j6331jmhu7aol"},{"name":"链接库","parent":"ckg5wpdux000c6331ccpv93zz","_id":"ckg5wpduz000m6331z3e8fveq"},{"name":"nginx","_id":"ckg5wpdzo00186331b04qnyhl"},{"name":"架构","_id":"ckg5wpdzu001e6331oyo6x524"},{"name":"配置解析","parent":"ckg5wpdzo00186331b04qnyhl","_id":"ckg5wpdzy001m6331htasg0up"},{"name":"内存管理","parent":"ckg5wpdzo00186331b04qnyhl","_id":"ckg5wpdzz001r6331rwgs3r4s"},{"name":"负载均衡","parent":"ckg5wpdzu001e6331oyo6x524","_id":"ckg5wpe00001z6331j5ckkhxd"},{"name":"swoole","_id":"ckg5wpe02002663311vgso8a4"},{"name":"server","parent":"ckg5wpe02002663311vgso8a4","_id":"ckg5wpe04002f63319wtjbjp3"}],"Data":[],"Page":[{"title":"tags","date":"2018-10-31T06:03:04.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-10-31 14:03:04\ntype: \"tags\"\n---\n","updated":"2019-05-27T01:49:32.150Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckg5wpdzf00156331oy28kl17","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-10-31T05:40:07.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-10-31 13:40:07\ntype: \"categories\"\n---\n","updated":"2019-05-27T01:49:32.150Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckg5wpdzm00176331qsh9e216","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"正向代理","date":"2018-11-09T03:38:34.000Z","_content":"\n# 一. 概述\n\n1. 什么是正向代理?\n> - 简单来说就是代理客户端请求的服务器。例如, 浏览器中设置代理翻墙等。\n\n2. 正向代理的主要问题?\n> - 代理服务器需要知道客户的目标服务器, 例如: 客户一会请求www.baidu.com, 一会请求www.taobao.com, 代理服务器如何获取目标服务器信息。\n\n3. 正向代理问题的解决方案?\n> - 客户端按照某种事先约定的协议通知代理服务器, 例如sock5协议\n> - 代理服务器能够直接从客户端与服务端交互的上层数据包(tcp之上)获取目标服务器信息。例如: 客户端与目标服务器按照http协议通信, 代理服务器可以直接从数据包中解析目标服务器。这种情况不适用与客户端与目标服务器加密通信的情况, 例如https。\n\n\n# 二. socks5\n## 2.1 socks5基本流程\nsock5通信的基本流程图如下,\n![image](https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/sock5/socks5%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.png)\n\n1. 如果不需要认证, 第三步和第四步则不需要。\n\n\n## 2.2 socks5总结\n1. socks5主要完成目标地址传递的功能\n> - 浏览器与sock5服务器完成tcp握手\n> - 浏览器将目标地址通过socks5协议发送给socks5服务器\n> - socks5服务器与目标地址完成tcp握手\n> - 浏览器将请求数据发送给socks5服务器, 由其进行转发, 此时可以只做4层tcp代理\n\n\n# 三. shadowsocks原理\nshadowsocks信息交换的基本结构图如下, ss_cli代表shadowsocks客户端, ss_srv代表shadowsocks服务端,\n![image](https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/shadowsocks%E4%BB%A3%E7%90%86%E7%BB%93%E6%9E%84%E5%9B%BE.png)\n\n## 3.1 第一阶段\n1. 客户端与ss_cli建立tcp连接\n2. 客户端与ss_cli协商sock认证参数, ss_cli给与响应, 默认不进行认证\n3. 客户端将目标地址发送给ss_cli, ss_cli给与响应, 默认返回成功\n\n## 3.2 第二阶段\n4. ss_cli与ss_srv建立tcp连接\n5. ss_cli将客户端发送的目标地址发送给ss_srv, 此时按照ss_cli与ss_srv协商好的数据包格式, 并不需要使用sock协议, 同时还会发送加密解密需要的随机数\n6. ss_srv与目标地址建立tcp连接\n\n## 3.3 第三阶段\n7. 客户端向ss_cli发送tcp数据包\n8. ss_cli将数据包稍作处理, 计算长度, 计算哈希值, 并将这些信息一并发送给ss_srv, 此时的数据包格式是ss_cli与ss_srv约定好的\n9. ss_srv受到数据后, 解析后发送给目标服务器\n\n## 3.4 第四阶段\n10. ss_srv收到目标服务器返回的数据后, 将数据按约定好的格式转发给ss_cli\n11. ss_cli受到数据后, 解析转发给客户\n\n## 3.5 总结\n1. 通过sock5协议, ss_cli可以知道客户端的目标服务器地址\n2. ss_cli与ss_srv可以自行定义协议, 核心是需要将客户端的目标服务器地址以及解密需要的随机变量发送给ss_srv\n3. ss_cli, ss_srv不需要也无法知道客户端与目标服务器的具体通信信息。\n4. ss_cli, ss_srv后期是tcp的代理, 不管是https还是http对其而言都是一样的。\n\n\n## 3.6 参考\n- https://www.jianshu.com/p/cbea16a096fb\n\n\n# 四. 抓包分析\n1. ss_cli: 127.0.0.1:1080\n2. ss_srv: 204.48.26.173:21500\n3. 浏览器与ss_cli同属于一个主机, 通信时延低。ss_cli与ss_srv需要通过网络传输, 时延高。数据包分析中可以利用这一点。\n\n\n## 4.1 浏览器与ss_cli通信\n1. tcp握手, 浏览器通过socks5发送目标服务器地址\n![image](https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/browser-ss_cli-1.jpg)\n\n2. 浏览器与ss_cli之间后续的通信, 此处是https协议\n![image](https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/browser-ss_cli-2.jpg)\n> - 时间突变的部分是由于ss_cli需要ss_srv将目标服务器的应答信息发送回来。\n\n## 4.2 ss_cli与ss_srv通信\n二者的通信格式是自行定义的,\n![image](https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/ss_cli-ss_srv.jpg)\n","source":"_posts/browser-proxy.md","raw":"---\ntitle: 正向代理\ndate: 2018-11-09 11:38:34\ncategories:\n- 网络编程\n- 代理\ntags:\n- 网络\n- 代理\n---\n\n# 一. 概述\n\n1. 什么是正向代理?\n> - 简单来说就是代理客户端请求的服务器。例如, 浏览器中设置代理翻墙等。\n\n2. 正向代理的主要问题?\n> - 代理服务器需要知道客户的目标服务器, 例如: 客户一会请求www.baidu.com, 一会请求www.taobao.com, 代理服务器如何获取目标服务器信息。\n\n3. 正向代理问题的解决方案?\n> - 客户端按照某种事先约定的协议通知代理服务器, 例如sock5协议\n> - 代理服务器能够直接从客户端与服务端交互的上层数据包(tcp之上)获取目标服务器信息。例如: 客户端与目标服务器按照http协议通信, 代理服务器可以直接从数据包中解析目标服务器。这种情况不适用与客户端与目标服务器加密通信的情况, 例如https。\n\n\n# 二. socks5\n## 2.1 socks5基本流程\nsock5通信的基本流程图如下,\n![image](https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/sock5/socks5%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.png)\n\n1. 如果不需要认证, 第三步和第四步则不需要。\n\n\n## 2.2 socks5总结\n1. socks5主要完成目标地址传递的功能\n> - 浏览器与sock5服务器完成tcp握手\n> - 浏览器将目标地址通过socks5协议发送给socks5服务器\n> - socks5服务器与目标地址完成tcp握手\n> - 浏览器将请求数据发送给socks5服务器, 由其进行转发, 此时可以只做4层tcp代理\n\n\n# 三. shadowsocks原理\nshadowsocks信息交换的基本结构图如下, ss_cli代表shadowsocks客户端, ss_srv代表shadowsocks服务端,\n![image](https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/shadowsocks%E4%BB%A3%E7%90%86%E7%BB%93%E6%9E%84%E5%9B%BE.png)\n\n## 3.1 第一阶段\n1. 客户端与ss_cli建立tcp连接\n2. 客户端与ss_cli协商sock认证参数, ss_cli给与响应, 默认不进行认证\n3. 客户端将目标地址发送给ss_cli, ss_cli给与响应, 默认返回成功\n\n## 3.2 第二阶段\n4. ss_cli与ss_srv建立tcp连接\n5. ss_cli将客户端发送的目标地址发送给ss_srv, 此时按照ss_cli与ss_srv协商好的数据包格式, 并不需要使用sock协议, 同时还会发送加密解密需要的随机数\n6. ss_srv与目标地址建立tcp连接\n\n## 3.3 第三阶段\n7. 客户端向ss_cli发送tcp数据包\n8. ss_cli将数据包稍作处理, 计算长度, 计算哈希值, 并将这些信息一并发送给ss_srv, 此时的数据包格式是ss_cli与ss_srv约定好的\n9. ss_srv受到数据后, 解析后发送给目标服务器\n\n## 3.4 第四阶段\n10. ss_srv收到目标服务器返回的数据后, 将数据按约定好的格式转发给ss_cli\n11. ss_cli受到数据后, 解析转发给客户\n\n## 3.5 总结\n1. 通过sock5协议, ss_cli可以知道客户端的目标服务器地址\n2. ss_cli与ss_srv可以自行定义协议, 核心是需要将客户端的目标服务器地址以及解密需要的随机变量发送给ss_srv\n3. ss_cli, ss_srv不需要也无法知道客户端与目标服务器的具体通信信息。\n4. ss_cli, ss_srv后期是tcp的代理, 不管是https还是http对其而言都是一样的。\n\n\n## 3.6 参考\n- https://www.jianshu.com/p/cbea16a096fb\n\n\n# 四. 抓包分析\n1. ss_cli: 127.0.0.1:1080\n2. ss_srv: 204.48.26.173:21500\n3. 浏览器与ss_cli同属于一个主机, 通信时延低。ss_cli与ss_srv需要通过网络传输, 时延高。数据包分析中可以利用这一点。\n\n\n## 4.1 浏览器与ss_cli通信\n1. tcp握手, 浏览器通过socks5发送目标服务器地址\n![image](https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/browser-ss_cli-1.jpg)\n\n2. 浏览器与ss_cli之间后续的通信, 此处是https协议\n![image](https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/browser-ss_cli-2.jpg)\n> - 时间突变的部分是由于ss_cli需要ss_srv将目标服务器的应答信息发送回来。\n\n## 4.2 ss_cli与ss_srv通信\n二者的通信格式是自行定义的,\n![image](https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/ss_cli-ss_srv.jpg)\n","slug":"browser-proxy","published":1,"updated":"2019-05-27T01:49:32.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg5wpduj0000633196knyglf","content":"<h1 id=\"一-概述\"><a href=\"#一-概述\" class=\"headerlink\" title=\"一. 概述\"></a>一. 概述</h1><ol>\n<li><p>什么是正向代理?</p>\n<blockquote>\n<ul>\n<li>简单来说就是代理客户端请求的服务器。例如, 浏览器中设置代理翻墙等。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>正向代理的主要问题?</p>\n<blockquote>\n<ul>\n<li>代理服务器需要知道客户的目标服务器, 例如: 客户一会请求<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a>, 一会请求<a href=\"http://www.taobao.com\" target=\"_blank\" rel=\"noopener\">www.taobao.com</a>, 代理服务器如何获取目标服务器信息。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>正向代理问题的解决方案?</p>\n<blockquote>\n<ul>\n<li>客户端按照某种事先约定的协议通知代理服务器, 例如sock5协议</li>\n<li>代理服务器能够直接从客户端与服务端交互的上层数据包(tcp之上)获取目标服务器信息。例如: 客户端与目标服务器按照http协议通信, 代理服务器可以直接从数据包中解析目标服务器。这种情况不适用与客户端与目标服务器加密通信的情况, 例如https。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"二-socks5\"><a href=\"#二-socks5\" class=\"headerlink\" title=\"二. socks5\"></a>二. socks5</h1><h2 id=\"2-1-socks5基本流程\"><a href=\"#2-1-socks5基本流程\" class=\"headerlink\" title=\"2.1 socks5基本流程\"></a>2.1 socks5基本流程</h2><p>sock5通信的基本流程图如下,<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/sock5/socks5%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.png\" alt=\"image\"></p>\n<ol>\n<li>如果不需要认证, 第三步和第四步则不需要。</li>\n</ol>\n<h2 id=\"2-2-socks5总结\"><a href=\"#2-2-socks5总结\" class=\"headerlink\" title=\"2.2 socks5总结\"></a>2.2 socks5总结</h2><ol>\n<li>socks5主要完成目标地址传递的功能<blockquote>\n<ul>\n<li>浏览器与sock5服务器完成tcp握手</li>\n<li>浏览器将目标地址通过socks5协议发送给socks5服务器</li>\n<li>socks5服务器与目标地址完成tcp握手</li>\n<li>浏览器将请求数据发送给socks5服务器, 由其进行转发, 此时可以只做4层tcp代理</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"三-shadowsocks原理\"><a href=\"#三-shadowsocks原理\" class=\"headerlink\" title=\"三. shadowsocks原理\"></a>三. shadowsocks原理</h1><p>shadowsocks信息交换的基本结构图如下, ss_cli代表shadowsocks客户端, ss_srv代表shadowsocks服务端,<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/shadowsocks%E4%BB%A3%E7%90%86%E7%BB%93%E6%9E%84%E5%9B%BE.png\" alt=\"image\"></p>\n<h2 id=\"3-1-第一阶段\"><a href=\"#3-1-第一阶段\" class=\"headerlink\" title=\"3.1 第一阶段\"></a>3.1 第一阶段</h2><ol>\n<li>客户端与ss_cli建立tcp连接</li>\n<li>客户端与ss_cli协商sock认证参数, ss_cli给与响应, 默认不进行认证</li>\n<li>客户端将目标地址发送给ss_cli, ss_cli给与响应, 默认返回成功</li>\n</ol>\n<h2 id=\"3-2-第二阶段\"><a href=\"#3-2-第二阶段\" class=\"headerlink\" title=\"3.2 第二阶段\"></a>3.2 第二阶段</h2><ol start=\"4\">\n<li>ss_cli与ss_srv建立tcp连接</li>\n<li>ss_cli将客户端发送的目标地址发送给ss_srv, 此时按照ss_cli与ss_srv协商好的数据包格式, 并不需要使用sock协议, 同时还会发送加密解密需要的随机数</li>\n<li>ss_srv与目标地址建立tcp连接</li>\n</ol>\n<h2 id=\"3-3-第三阶段\"><a href=\"#3-3-第三阶段\" class=\"headerlink\" title=\"3.3 第三阶段\"></a>3.3 第三阶段</h2><ol start=\"7\">\n<li>客户端向ss_cli发送tcp数据包</li>\n<li>ss_cli将数据包稍作处理, 计算长度, 计算哈希值, 并将这些信息一并发送给ss_srv, 此时的数据包格式是ss_cli与ss_srv约定好的</li>\n<li>ss_srv受到数据后, 解析后发送给目标服务器</li>\n</ol>\n<h2 id=\"3-4-第四阶段\"><a href=\"#3-4-第四阶段\" class=\"headerlink\" title=\"3.4 第四阶段\"></a>3.4 第四阶段</h2><ol start=\"10\">\n<li>ss_srv收到目标服务器返回的数据后, 将数据按约定好的格式转发给ss_cli</li>\n<li>ss_cli受到数据后, 解析转发给客户</li>\n</ol>\n<h2 id=\"3-5-总结\"><a href=\"#3-5-总结\" class=\"headerlink\" title=\"3.5 总结\"></a>3.5 总结</h2><ol>\n<li>通过sock5协议, ss_cli可以知道客户端的目标服务器地址</li>\n<li>ss_cli与ss_srv可以自行定义协议, 核心是需要将客户端的目标服务器地址以及解密需要的随机变量发送给ss_srv</li>\n<li>ss_cli, ss_srv不需要也无法知道客户端与目标服务器的具体通信信息。</li>\n<li>ss_cli, ss_srv后期是tcp的代理, 不管是https还是http对其而言都是一样的。</li>\n</ol>\n<h2 id=\"3-6-参考\"><a href=\"#3-6-参考\" class=\"headerlink\" title=\"3.6 参考\"></a>3.6 参考</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/cbea16a096fb\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/cbea16a096fb</a></li>\n</ul>\n<h1 id=\"四-抓包分析\"><a href=\"#四-抓包分析\" class=\"headerlink\" title=\"四. 抓包分析\"></a>四. 抓包分析</h1><ol>\n<li>ss_cli: 127.0.0.1:1080</li>\n<li>ss_srv: 204.48.26.173:21500</li>\n<li>浏览器与ss_cli同属于一个主机, 通信时延低。ss_cli与ss_srv需要通过网络传输, 时延高。数据包分析中可以利用这一点。</li>\n</ol>\n<h2 id=\"4-1-浏览器与ss-cli通信\"><a href=\"#4-1-浏览器与ss-cli通信\" class=\"headerlink\" title=\"4.1 浏览器与ss_cli通信\"></a>4.1 浏览器与ss_cli通信</h2><ol>\n<li><p>tcp握手, 浏览器通过socks5发送目标服务器地址<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/browser-ss_cli-1.jpg\" alt=\"image\"></p>\n</li>\n<li><p>浏览器与ss_cli之间后续的通信, 此处是https协议<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/browser-ss_cli-2.jpg\" alt=\"image\"></p>\n<blockquote>\n<ul>\n<li>时间突变的部分是由于ss_cli需要ss_srv将目标服务器的应答信息发送回来。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"4-2-ss-cli与ss-srv通信\"><a href=\"#4-2-ss-cli与ss-srv通信\" class=\"headerlink\" title=\"4.2 ss_cli与ss_srv通信\"></a>4.2 ss_cli与ss_srv通信</h2><p>二者的通信格式是自行定义的,<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/ss_cli-ss_srv.jpg\" alt=\"image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-概述\"><a href=\"#一-概述\" class=\"headerlink\" title=\"一. 概述\"></a>一. 概述</h1><ol>\n<li><p>什么是正向代理?</p>\n<blockquote>\n<ul>\n<li>简单来说就是代理客户端请求的服务器。例如, 浏览器中设置代理翻墙等。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>正向代理的主要问题?</p>\n<blockquote>\n<ul>\n<li>代理服务器需要知道客户的目标服务器, 例如: 客户一会请求<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a>, 一会请求<a href=\"http://www.taobao.com\" target=\"_blank\" rel=\"noopener\">www.taobao.com</a>, 代理服务器如何获取目标服务器信息。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>正向代理问题的解决方案?</p>\n<blockquote>\n<ul>\n<li>客户端按照某种事先约定的协议通知代理服务器, 例如sock5协议</li>\n<li>代理服务器能够直接从客户端与服务端交互的上层数据包(tcp之上)获取目标服务器信息。例如: 客户端与目标服务器按照http协议通信, 代理服务器可以直接从数据包中解析目标服务器。这种情况不适用与客户端与目标服务器加密通信的情况, 例如https。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"二-socks5\"><a href=\"#二-socks5\" class=\"headerlink\" title=\"二. socks5\"></a>二. socks5</h1><h2 id=\"2-1-socks5基本流程\"><a href=\"#2-1-socks5基本流程\" class=\"headerlink\" title=\"2.1 socks5基本流程\"></a>2.1 socks5基本流程</h2><p>sock5通信的基本流程图如下,<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/sock5/socks5%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.png\" alt=\"image\"></p>\n<ol>\n<li>如果不需要认证, 第三步和第四步则不需要。</li>\n</ol>\n<h2 id=\"2-2-socks5总结\"><a href=\"#2-2-socks5总结\" class=\"headerlink\" title=\"2.2 socks5总结\"></a>2.2 socks5总结</h2><ol>\n<li>socks5主要完成目标地址传递的功能<blockquote>\n<ul>\n<li>浏览器与sock5服务器完成tcp握手</li>\n<li>浏览器将目标地址通过socks5协议发送给socks5服务器</li>\n<li>socks5服务器与目标地址完成tcp握手</li>\n<li>浏览器将请求数据发送给socks5服务器, 由其进行转发, 此时可以只做4层tcp代理</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"三-shadowsocks原理\"><a href=\"#三-shadowsocks原理\" class=\"headerlink\" title=\"三. shadowsocks原理\"></a>三. shadowsocks原理</h1><p>shadowsocks信息交换的基本结构图如下, ss_cli代表shadowsocks客户端, ss_srv代表shadowsocks服务端,<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/shadowsocks%E4%BB%A3%E7%90%86%E7%BB%93%E6%9E%84%E5%9B%BE.png\" alt=\"image\"></p>\n<h2 id=\"3-1-第一阶段\"><a href=\"#3-1-第一阶段\" class=\"headerlink\" title=\"3.1 第一阶段\"></a>3.1 第一阶段</h2><ol>\n<li>客户端与ss_cli建立tcp连接</li>\n<li>客户端与ss_cli协商sock认证参数, ss_cli给与响应, 默认不进行认证</li>\n<li>客户端将目标地址发送给ss_cli, ss_cli给与响应, 默认返回成功</li>\n</ol>\n<h2 id=\"3-2-第二阶段\"><a href=\"#3-2-第二阶段\" class=\"headerlink\" title=\"3.2 第二阶段\"></a>3.2 第二阶段</h2><ol start=\"4\">\n<li>ss_cli与ss_srv建立tcp连接</li>\n<li>ss_cli将客户端发送的目标地址发送给ss_srv, 此时按照ss_cli与ss_srv协商好的数据包格式, 并不需要使用sock协议, 同时还会发送加密解密需要的随机数</li>\n<li>ss_srv与目标地址建立tcp连接</li>\n</ol>\n<h2 id=\"3-3-第三阶段\"><a href=\"#3-3-第三阶段\" class=\"headerlink\" title=\"3.3 第三阶段\"></a>3.3 第三阶段</h2><ol start=\"7\">\n<li>客户端向ss_cli发送tcp数据包</li>\n<li>ss_cli将数据包稍作处理, 计算长度, 计算哈希值, 并将这些信息一并发送给ss_srv, 此时的数据包格式是ss_cli与ss_srv约定好的</li>\n<li>ss_srv受到数据后, 解析后发送给目标服务器</li>\n</ol>\n<h2 id=\"3-4-第四阶段\"><a href=\"#3-4-第四阶段\" class=\"headerlink\" title=\"3.4 第四阶段\"></a>3.4 第四阶段</h2><ol start=\"10\">\n<li>ss_srv收到目标服务器返回的数据后, 将数据按约定好的格式转发给ss_cli</li>\n<li>ss_cli受到数据后, 解析转发给客户</li>\n</ol>\n<h2 id=\"3-5-总结\"><a href=\"#3-5-总结\" class=\"headerlink\" title=\"3.5 总结\"></a>3.5 总结</h2><ol>\n<li>通过sock5协议, ss_cli可以知道客户端的目标服务器地址</li>\n<li>ss_cli与ss_srv可以自行定义协议, 核心是需要将客户端的目标服务器地址以及解密需要的随机变量发送给ss_srv</li>\n<li>ss_cli, ss_srv不需要也无法知道客户端与目标服务器的具体通信信息。</li>\n<li>ss_cli, ss_srv后期是tcp的代理, 不管是https还是http对其而言都是一样的。</li>\n</ol>\n<h2 id=\"3-6-参考\"><a href=\"#3-6-参考\" class=\"headerlink\" title=\"3.6 参考\"></a>3.6 参考</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/cbea16a096fb\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/cbea16a096fb</a></li>\n</ul>\n<h1 id=\"四-抓包分析\"><a href=\"#四-抓包分析\" class=\"headerlink\" title=\"四. 抓包分析\"></a>四. 抓包分析</h1><ol>\n<li>ss_cli: 127.0.0.1:1080</li>\n<li>ss_srv: 204.48.26.173:21500</li>\n<li>浏览器与ss_cli同属于一个主机, 通信时延低。ss_cli与ss_srv需要通过网络传输, 时延高。数据包分析中可以利用这一点。</li>\n</ol>\n<h2 id=\"4-1-浏览器与ss-cli通信\"><a href=\"#4-1-浏览器与ss-cli通信\" class=\"headerlink\" title=\"4.1 浏览器与ss_cli通信\"></a>4.1 浏览器与ss_cli通信</h2><ol>\n<li><p>tcp握手, 浏览器通过socks5发送目标服务器地址<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/browser-ss_cli-1.jpg\" alt=\"image\"></p>\n</li>\n<li><p>浏览器与ss_cli之间后续的通信, 此处是https协议<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/browser-ss_cli-2.jpg\" alt=\"image\"></p>\n<blockquote>\n<ul>\n<li>时间突变的部分是由于ss_cli需要ss_srv将目标服务器的应答信息发送回来。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"4-2-ss-cli与ss-srv通信\"><a href=\"#4-2-ss-cli与ss-srv通信\" class=\"headerlink\" title=\"4.2 ss_cli与ss_srv通信\"></a>4.2 ss_cli与ss_srv通信</h2><p>二者的通信格式是自行定义的,<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/shadowsocks/ss_cli-ss_srv.jpg\" alt=\"image\"></p>\n"},{"title":"InnoDB数据页存储","date":"2020-10-12T02:06:37.000Z","_content":"\n## 一. 简介\n1. Mysql是目前最为流行的关系型数据库管理系统, 具有体积小、速度快、开放源码等优势。InnoDB是Mysql使用最广泛的存储引擎, InnoDB进行了行锁设计, 支持MVCC, 提供一致性非锁定读。学习InnoDB数据页存储, 能够让我们更加深入的理解InnoDB的一些特性。\n2. 程序 = 数据结构 + 算法, 对于Mysql而言也是如此。由于数据持久化的需要, Mysql的数据不仅存储在内存中, 也会持久化到文件中, 存储结构如下图,\n![image](https://picturestore.nos-eastchina1.126.net/mysql/Mysql%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E6%A6%82%E8%BF%B0.jpg)\n- 从磁盘中, 我们可以很容易的看到持久化的各个文件。\n- 磁盘中的文件需要加载到内存中才能被程序使用, 很明显, 不可能将所有磁盘文件都加载到内存, 当内存中的数据发生更改后, 也需要刷新到磁盘文件中, 什么时候刷新, 怎么刷新, 这些都是Mysql需要考虑的问题, 但是这些内容不是本文的重点, 我们这里稍加了解即可。\n- **本文的重点是学习数据页的存储, 这些数据页可能存在与系统表空间, 独立表空间或者临时表空间。可以看到, 这些只是图中的一小部分。**\n3. 学习之前, 我们先考虑几个问题,\n- 无论是内存存储还是磁盘存储, 都离不开内存管理, InnoDB是如何划分内存以及如何管理内存的?\n- InnoDB使用B+树存储我们表中的数据, B+树索引节点以及叶子节点应该需要存储哪些数据? 又是怎么存储的?\n- 我们在使用时, 创建了数据库, 数据表, 这些元数据是如何存储的, 查询某个表时, 如何根据元数据找到表的索引, 如何选择索引, 选择索引后, 如何定位到索引的根节点(root page)? 找到跟节点后, 又是如何一步步找到某个具体数据的?\n4. 说明\n- Mysql版本: 8.0.12-debug\n- 存储引擎使用InnoDB\n- 我们会用到xxd命令, 使用xxd(或者hexdump)可以以十六进制的方式查看文件。\n\n## 二. InnoDB存储结构\nInnoDB存储结构图如下所示, 我们这里只做简要的介绍, 更多细节我们将在后续的文章中再进行详细阐述,\n\n![image](https://picturestore.nos-eastchina1.126.net/mysql/%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png)\n\n1. 表空间(tablespace)可以认为是InnoDB存储引擎存储结构的最高层, 所有数据都在表空间中, 除了共享表空间外, 每个表可以创建独立表空间, 具体参数是由innodb_file_per_table参数决定, 表空间由各种段组成。\n2. 常见的段(segment)有数据段, 回滚段, 索引段。innodb中数据段就是B+树的叶子节点, 索引段就是B+树中的非叶子节点。\n3. 段是由区(extent)组成, 默认情况下区的大小是1MB, InnoDB默认页大小为16KB, 所以1个区是由16个连续页组成。\n4. innodb默认页(page)大小是16KB, 也可以通过innodb_page_size进行控制。\n5. innodb存储是面向行(row)的, 行的存储格式主要有compact、redundant、compressed、dynamic。\n\n## 三. 数据页存储\n### 3.1 独立表空间\n通过innodb_file_per_table参数, 我们可以为每个表都创建一个表空间, 这个就是这个表的独立表空间, 这个表的索引段, 数据段都会存储在这个独立表空间中, 但是Redo log, Undo log仍然在各自的表空间中, 表空间存储如下图,\n\n![image](https://picturestore.nos-eastchina1.126.net/mysql/%E7%8B%AC%E7%AB%8B%E8%A1%A8%E7%A9%BA%E9%97%B4%E7%BB%93%E6%9E%84.jpg)\n\n1. 表空间的page 0是表空间的第一页, 存储了表空间的信息， 同时也用于管理前256个extent。page 16384类型为FIL_PAGE_TYPE_XDES也用于管理之后的256个extent, 以此类推, 每隔16384个页面都会需要一个FIL_PAGE_TYPE_XDES页面。\n2. page 1类型是FIL_PAGE_IBUF_BITMAP, 用于管理每个page(前256个extent的16384个页面)的change buffer(change buffer相关内容不是本文的重点, 感兴趣的读者可以查找相关资料)。与FIL_PAGE_TYPE_XDES类似, 每隔16384个页面都需要一个FIL_PAGE_IBUF_BITMAP页面。\n3. page 2类型为FIL_PAGE_INODE, 用于管理segment。\n4. page 3类型为FIL_PAGE_SDI, 存储Serialized Dictionary Information(SDI, 词典序列化信息), 存储了这个表空间的一些数据字典(Data Dictionary)信息。\n5. page 4一般就是这个表主键索引的root page。\n\n### 3.2 页存储\nInnoDB的页存储结构如下, 每页都是由3部分组成, File Header(38字节)、File Body、File Trailer(8字节), 不同页的File Body存储的内容不同,\n\n![image](https://picturestore.nos-eastchina1.126.net/mysql/innodb%E9%A1%B5%E5%AD%98%E5%82%A8.jpg)\n\n1. File Header\n\n名称 | 大小 | 说明\n---|---|---\nFIL_PAGE_SPACE_OR_CHKSUM | 4字节 | 页的校验码\nFIL_PAGE_OFFSET | 4字节 | 表空间中页的便宜量\nFIL_PAGE_PREV | 4字节 | 上一页\nFIL_PAGE_NEXT | 4字节 | 下一页\nFIL_PAGE_LSN | 8字节 | 页面被最后修改时对应的日志序列位置\nFIL_PAGE_TYPE | 2字节 | 页面类型\nFIL_PAGE_FILE_FLUSH_LSN | 8字节 | 系统表空间中有定义, 代表文件更新到的LSN\nFIL_PAGE_ARCH_LOG_NO_OR_SPACE_ID | 4字节 | 页面所属表空间id\n\n2. File Type\n\n名称 | 值 | 说明\n---|---|---\nFIL_PAGE_TYPE_ALLOCATED | 0x0000 | 未使用\nFIL_PAGE_UNDO_LOG | 0x0002 | undo log\nFIL_PAGE_INODE | 0x0003 | 存储了段信息\nFIL_PAGE_IBUF_FREE_LIST | 0x0004 | Insert Buffer空闲列表\nFIL_PAGE_IBUF_BITMAP | 0x0005 | Insert Buffer位图\nFIL_PAGE_TYPE_SYS | 0x0006 | 系统页\nFIL_PAGE_TYPE_TRX_SYS | 0x0007 | 事务系统数据\nFIL_PAGE_TYPE_FSP_HDR | 0x0008 | 表空间头部信息\nFIL_PAGE_TYPE_XDES | 0x0009 | 扩展描述页\nFIL_PAGE_TYPE_BLOB | 0x000A\t| BLOB页\nFIL_PAGE_SDI | 0x45bd | SDI索引页\nFIL_PAGE_RTREE | 0x45be | R-tree\nFIL_PAGE_INDEX | 0x45bf | B-tree\n\n\n### 3.3 数据页\n看完InnoDB页结构后, 我们看下数据页的存储,\n\n![image](https://picturestore.nos-eastchina1.126.net/mysql/%E6%95%B0%E6%8D%AE%E9%A1%B5%E7%BB%93%E6%9E%84.jpg)\n\n1. Page Header\n\n名称 | 大小 | 说明\n---|---|---\nPAGE_N_DIR_SLOTS | 2字节 | page directory中slot的个数\nPAGE_HEAP_TOP | 2字节 | 堆中第一个记录指针\nPAGE_N_HEAP | 2字节 | 堆中记录数\nPAGE_FREE | 2字节 | 指向空闲空间首地址\nPAGE_GARBAGE | 2字节 | 已经删除的记录数\nPAGE_LAST_INSERT | 2字节 | 最后插入位置\nPAGE_DIRECTION | 2字节 | 最后插入方向\nPAGE_N_DIRECTION | 2字节 | 一个插入方向连续插入记录数\nPAGE_N_RECS | 2字节 | 这个页的记录总数\nPAGE_MAX_TRX_ID | 8字节 | 修改当前页的最大事务ID\nPAGE_LEVEL | 2字节 | 当前页在索引中的层, 叶子节点为0x00\nPAGE_INDEX_ID | 8字节 | 索引ID\nPAGE_BTR_SEG_LEAF | 10字节 | 非叶子节点所在段, 仅在B+树的root页中有定义\nPAGE_BTR_SEG_TOP | 10字节 | 数据页所在段, 仅在B+树的root页中有定义\n\n\n2. Infimun & Supermum\n虚拟记录, Infimum为13字节, Supermum也是13字节。具体存储内容, 我们会在下面进行介绍。\n\n\n3. Page Directory\n- 页目录, 因为行记录在数据页中以链表的形式链接, 但是在查找记录时, 链表查找速度很慢, 为了加速记录查找, 创建页目录, 页目录可以用于二分查找。**每个目录项占用2个字节, 从页尾部开始, 倒序存储。**\n- 为了便于理解Page Directory, 我们这里举一个例子, 如果表中存储了200条数据, 数据通过链表的方式进行链接, 我们在查询时, 需要遍历整个链表才能找到数据, 这样无疑比较慢。我们可以通过建立索引的方式, 加快查找速度, 我们可以将这200条记录的主键按照顺序进行存储, InnoDB的Page Directory就是这个思路, 但是并不是存储了主键的值, 而是存储了对应记录的位置, 并且不是将每个行记录都存储在Page Directory中, 只是建立一个稀疏索引。\n\n\n### 3.4 innodb行存储\n限于篇幅, 我们这里主要介绍compact格式的行记录存储, 存储格式如下图,\n\n![image](https://picturestore.nos-eastchina1.126.net/mysql/compact%E8%A1%8C%E8%AE%B0%E5%BD%95%E6%A0%BC%E5%BC%8F.jpg)\n\n1. 从图中可以看出, 每个记录行至少占有5字节(记录头) + 主键长度 + 6字节(事务ID) + 7字节(回滚指针)\n2. 我们需要注意记录头中的next_record字段, 这个字段占有16bit, 也就是2个字节, 通过这个字段, InnoDB将一个页中的所有记录以链表的方式链接到一起。\n\n\n## 四. 实例讲解\n为了便于大家理解, 这部分我们给出一些实例,\n\n1. 本节举例说明InnoDB的一个表是如何存储的, 主要介绍两种情况, 一种情况是表中数据很少, 另一种情况是表中数据比较多, 一页已经存储不了的情况。\n2. 表结构定义,\n```sql\ncreate table `t` (`id` int not null, primary key(`id`)) engine=InnoDB ROW_FORMAT=Compact;\n```\n- 为了更容易理解, 我们这里只创建了一个非常简单的表, 也只有一个主键索引。主键类型为int, 占用4个字节。\n- 创建表后, 可以在相应的目录下看到t.ibd文件, 这里我是在test数据库下创建的这个表, 所以也就在test目录下。\n- 从磁盘文件中, 我们可以看到, t.ibd文件大小为112KB, 也就是7*16KB, 也就是7个page, 也就意味着, 创建表后, InnoDB默认初始化了7个page。\n- 我们的表中没有变长字段, 主键长度为4字节, 所以单个记录的长度为5(记录头) + 4(主键ID) + 6(事务ID) + 7(回滚指针) = 22字节\n\n3. B+树示例\nInnoDB数据存储是通过B+树组织的, 一个很简单的B+树如下所示,\n\n![image](https://picturestore.nos-eastchina1.126.net/mysql/B%2B%E6%A0%91%E7%A4%BA%E4%BE%8B.jpg)\n\n- B+树的性质有很多, 其增删查改操作较常规的二叉树更复杂一些,  感兴趣的可以查询相关资料, 这里有个基本概念即可。\n\n4. 后续如果没有特殊说明, 表空间第一个页是page 0, 第二页是page 1, 以此类推。\n\n### 4.1 单页存储\n我们首先看下当表中数据很少的时候, 数据是如何组织的, 具体操作步骤如下,\n\n1. 我们向表中插入2条记录,\n```sql\ninsert into t values (2);\ninsert into t values (1);\n```\n- 这里注意我们先插入主键值为2的行记录, 再插入主键值为1的行记录。\n\n2. 通过xxd将t.ibd以16进制表示, 执行命令xxd t.idb t.txt, 也可以使用hexdump命令查看。\n\n3. 查看t.txt中的内容, 这里我们查看**page 4**的数据\n```\n0010000: a76e 6043 0000 0004 ffff ffff ffff ffff  .n`C............\n0010010: 0000 0000 012e 6d9d 45bf 0000 0000 0000  ......m.E.......\n0010020: 0000 0000 0005 0002 00a4 8004 0000 0000  ................\n0010030: 0093 0001 0001 0002 0000 0000 0000 0000  ................\n0010040: 0000 0000 0000 0000 0091 0000 0005 0000  ................\n0010050: 0002 0272 0000 0005 0000 0002 01b2 0100  ...r............\n0010060: 0200 3069 6e66 696d 756d 0003 000b 0000  ..0infimum......\n0010070: 7375 7072 656d 756d 0000 10ff f380 0000  supremum........\n0010080: 0200 0000 001c 0481 0000 00fa 0110 0000  ................\n0010090: 18ff ea80 0000 0100 0000 001c 0582 0000  ................\n00100a0: 012c 0110 0000 0000 0000 0000 0000 0000  .,..............\n00100b0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n......\n......\n0013fe0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n0013ff0: 0000 0000 0070 0063 a76e 6043 012e 6d9d  .....p.c.n`C..m.\n```\n- 前38字节是文件头[0010000,0010026]\n- 之后56字节是数据页头部[0010027,001005d]\n- 之后的26字节是最小记录[001005e, 001006a], 最大记录[001006b, 0010077], 这里可以看到最小记录的n_owns值为1(只有自身1条记录), 最大记录的n_owns值为3(除了自身外, 还有我们插入的两条记录)\n- 紧接着是第1条插入记录[0010078, 001008d]\n```\n0010070: .... .... .... .... 0000 10ff f380 0000\n0010080: 0200 0000 001c 0481 0000 00fa 0110 ....\n```\n- 最后是刚才插入的第2条记录[001008e, 00100a3]\n- 对于int类型, innodb存储方式与常规的方式不同, [0x00000000, 0x7fffffff]代表[-2147483648, -1], [0x80000000, 0xffffffff]代表[0, 21473647]。\n\n4. 存储结构如下图\n![image](https://picturestore.nos-eastchina1.126.net/mysql/innodb%E6%95%B0%E6%8D%AE%E9%A1%B5%E5%AD%98%E5%82%A8%E7%A4%BA%E4%BE%8B1.jpg)\n\n5. 这里示例下如何从最小记录查找到最大记录\n- 首先定位到最小记录的位置, 最小记录占有5字节(记录头) + 8字节(内容) = 13字节, 最小记录所在的位置为001005e, 根据最小记录的记录头信息, 可以计算出下一个记录所在位置001005e + 0030 = 001008e\n- 001008e是主键为1的记录所在位置, 接着计算下一个记录的位置001008e + ffea = 0010078, 这里需要注意的是, 加法运算时, 只保留后面4位的结果, 可以看到这个位置就是我们第一次插入的主键为2的记录\n- 之后, 继续计算下一个记录所在位置, 0010078 + fff3 = 1006b, 这个就是最大记录所在的位置\n- 在查找某个具体的行记录时, 可以先利用page directory进行近似的二分查找, 之后再进行链表查找。\n6. page directory\n- 页尾部包含两个slots\n```\n0013ff0: 0000 0000 0070 0063 .... .... .... ....\n```\n- 0063是第1个slot的位置, 相应的记录所在位置为0010063, 也就是最小记录。[001005e, 0010062]这个是最小记录的记录头, [0010063, 001006a]是最小记录的内容。\n- 0070是第2个slot的位置, 相应的记录所在位置为0010070, 这个是最大记录所在的内容开始位置。\n\n7. 小结\n- 可以看到, 从最小记录开始, 到最大记录结束, 数据按照主键顺序以链表的方式进行链接。\n- 行数据的存储是按照插入的顺序存储的, 不是按照主键顺序存储, 数据删除后, 释放的空间可以复用, 关于复用部分的细节, 后续文章再进行详细介绍。\n\n### 4.2 多页存储\n在4.1的基础上, 我们继续插入数据, 操作步骤如下,\n\n1. 我们通过脚本向表中继续插入数据\n```php\n<?php\n$servername = \"localhost:8083\";\n$username = \"root\";\n$password = \"password\";\n$dbname = \"test\";\n\ntry {\n    $conn = new PDO(\"mysql:host=$servername;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    for($i = 3; $i < 1000; $i++){\n    \t$sql = \"INSERT INTO t VALUES (\" . strval($i) . \")\";\n        $conn->exec($sql);\n    }\n}\ncatch(PDOException $e){\n    echo $sql . \"<br>\" . $e->getMessage();\n}\n$conn = null;\n?>\n```\n- 之前表中已经插入2条记录, 这里又插入997条记录, 所以表中现在一共999条记录, 主键id从1到999。\n- 单条记录需要占用22字节, 可以知道, 此时, 单个数据页不能存储全部数据。\n\n2. 以16进制查看此时的t.ibd文件: xxd t.ibd t.txt\n3. 查看t.txt内容, 首先查看**page 4**的内容\n```\n0010000: df67 193d 0000 0004 ffff ffff ffff ffff  .g.=............\n0010010: 0000 0000 0132 5500 45bf 0000 0000 0000  .....2U.E.......\n0010020: 0000 0000 0005 0002 0092 8004 0000 0000  ................\n0010030: 008a 0002 0001 0002 0000 0000 0000 0000  ................\n0010040: 0001 0000 0000 0000 0091 0000 0005 0000  ................\n0010050: 0002 0272 0000 0005 0000 0002 01b2 0100  ...r............\n0010060: 0200 1a69 6e66 696d 756d 0003 000b 0000  ...infimum......\n0010070: 7375 7072 656d 756d 1000 1100 0d80 0000  supremum........\n0010080: 0100 0000 0500 0019 ffe6 8000 0153 0000  .............S..\n0010090: 0006 0000 0000 0000 0000 0000 0000 0000  ................\n.......\n.......\n0013fe0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n0013ff0: 0000 0000 0070 0063 df67 193d 0132 5500  .....p.c.g.=.2U.\n```\n- 可以看到, 第5页, 目前只有少量内容, 因为此时第5页是索引页, 是B+树的根, 没有存储具体的数据, 只存储了主键索引。\n- File Header, Page Header, Infimum & Supremum跟之前基本类似, 这里就不再详细介绍。\n- 单个索引需要占用5字节(记录头) + 4字节(主键) + 4字节(记录所在页) = 13字节。\n- 第1个索引信息\n```\n0010070: .... .... .... .... 1000 1100 0d80 0000\n0010080: 0100 0000 05.. .... .... .... .... ....\n```\n主键id为0x80000001, 也就是1, page no为0x00000005, 也就是**page 5**\n- 第2个索引信息\n```\n0010080: .... .... ..00 0019 ffe6 8000 0153 0000\n0010090: 0006 .... .... .... .... .... .... ....\n```\n主键id为0x80000153, 也就是339, page no为0x00000006, 也就是**page 6**\n- 通过这两个索引信息, 可以知道, **page 5**存储着主键id从1到338的数据, **page 6**存储着主键id从339到999的数据\n\n4. 查看**page 5**\n```\n0014000: e1c0 bb7a 0000 0005 ffff ffff 0000 0006  ...z............\n0014010: 0000 0000 0132 5500 45bf 0000 0000 0000  .....2U.E.......\n0014020: 0000 0000 0005 0056 3a90 82a6 1d89 1d0c  .......V:.......\n0014030: 0000 0005 0000 0152 0000 0000 0000 0000  .......R........\n0014040: 0000 0000 0000 0000 0091 0000 0000 0000  ................\n0014050: 0000 0000 0000 0000 0000 0000 0000 0100  ................\n0014060: 0200 1a69 6e66 696d 756d 0003 000b 0000  ...infimum......\n0014070: 7375 7072 656d 756d 0000 1000 1680 0000  supremum........\n0014080: 0100 0000 001c 0582 0000 012c 0110 0000  ...........,....\n0014090: 1800 1680 0000 0200 0000 001c 0481 0000  ................\n00140a0: 00fa 0110 0000 2000 1680 0000 0300 0000  ...... .........\n.......\n.......\n0017e90: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n0017ea0: 0000 0000 0070 3a27 39cf 3977 391f 38c7  .....p:'9.9w9.8.\n0017eb0: 386f 3817 37bf 3767 370f 36b7 365f 3607  8o8.7.7g7.6.6_6.\n0017ec0: 35af 3557 34ff 34a7 344f 33f7 339f 3347  5.5W4.4.4O3.3.3G\n0017ed0: 32ef 3297 323f 31e7 318f 3137 30df 3087  2.2.2?1.1.170.0.\n0017ee0: 302f 2fd7 2f7f 2f27 2ecf 2e77 2e1f 2dc7  0//././'...w..-.\n0017ef0: 2d6f 2d17 2cbf 2c67 2c0f 2bb7 2b5f 2b07  -o-.,.,g,.+.+_+.\n0017f00: 2aaf 2a57 29ff 29a7 294f 28f7 289f 2847  *.*W).).)O(.(.(G\n0017f10: 27ef 2797 273f 26e7 268f 2637 25df 2587  '.'.'?&.&.&7%.%.\n0017f20: 252f 24d7 247f 2427 23cf 2377 231f 22c7  %/$.$.$'#.#w#.\".\n0017f30: 226f 2217 21bf 2167 210f 20b7 205f 2007  \"o\".!.!g!. . _ .\n0017f40: 1faf 1f57 1eff 1ea7 1e4f 1df7 0070 1d47  ...W.....O...p.G\n0017f50: 1cef 1c97 1c3f 1be7 1b8f 1b37 1adf 1a87  .....?.....7....\n0017f60: 1a2f 19d7 197f 1927 18cf 1877 181f 17c7  ./.....'...w....\n0017f70: 176f 1717 16bf 1667 160f 15b7 155f 1507  .o.....g....._..\n0017f80: 14af 1457 13ff 13a7 134f 12f7 129f 1247  ...W.....O.....G\n0017f90: 11ef 1197 113f 10e7 108f 1037 0fdf 0f87  .....?.....7....\n0017fa0: 0f2f 0ed7 0e7f 0e27 0dcf 0d77 0d1f 0cc7  ./.....'...w....\n0017fb0: 0c6f 0c17 0bbf 0b67 0b0f 0ab7 0a5f 0a07  .o.....g....._..\n0017fc0: 09af 0957 08ff 08a7 084f 07f7 079f 0747  ...W.....O.....G\n0017fd0: 06ef 0697 063f 05e7 058f 0537 04df 0487  .....?.....7....\n0017fe0: 042f 03d7 037f 0327 02cf 0277 021f 01c7  ./.....'...w....\n0017ff0: 016f 0117 00bf 0063 e1c0 bb7a 0132 5500  .o.....c...z.2U.\n```\n- 注意页尾部包含page directory, slots的个数可以从page header中读取\n- File Header中的FIL_PAGE_NEXT字段, 值为0x00000006, 也就是page no为6的页。\n\n5. 查看**page 6**\n```\n0018000: 2ddb 788c 0000 0006 0000 0005 ffff ffff  -.x.............\n0018010: 0000 0000 0133 f431 45bf 0000 0000 0000  .....3.1E.......\n0018020: 0000 0000 0005 00a6 3946 8297 0000 0000  ........9F......\n0018030: 3935 0002 0142 0295 0000 0000 0000 0000  95...B..........\n0018040: 0000 0000 0000 0000 0091 0000 0000 0000  ................\n0018050: 0000 0000 0000 0000 0000 0000 0000 0100  ................\n0018060: 0200 1a69 6e66 696d 756d 0006 000b 0000  ...infimum......\n0018070: 7375 7072 656d 756d 0000 1000 1680 0001  supremum........\n0018080: 5300 0000 001d 6d81 0000 00a3 0110 0000  S.....m.........\n.......\n.......\n001bea0: 0000 0000 0000 0000 0000 0000 0070 38c7  .............p8.\n001beb0: 386f 3817 37bf 3767 370f 36b7 365f 3607  8o8.7.7g7.6.6_6.\n001bec0: 35af 3557 34ff 34a7 344f 33f7 339f 3347  5.5W4.4.4O3.3.3G\n001bed0: 32ef 3297 323f 31e7 318f 3137 30df 3087  2.2.2?1.1.170.0.\n001bee0: 302f 2fd7 2f7f 2f27 2ecf 2e77 2e1f 2dc7  0//././'...w..-.\n001bef0: 2d6f 2d17 2cbf 2c67 2c0f 2bb7 2b5f 2b07  -o-.,.,g,.+.+_+.\n001bf00: 2aaf 2a57 29ff 29a7 294f 28f7 289f 2847  *.*W).).)O(.(.(G\n001bf10: 27ef 2797 273f 26e7 268f 2637 25df 2587  '.'.'?&.&.&7%.%.\n001bf20: 252f 24d7 247f 2427 23cf 2377 231f 22c7  %/$.$.$'#.#w#.\".\n001bf30: 226f 2217 21bf 2167 210f 20b7 205f 2007  \"o\".!.!g!. . _ .\n001bf40: 1faf 1f57 1eff 1ea7 1e4f 1df7 1d9f 1d47  ...W.....O.....G\n001bf50: 1cef 1c97 1c3f 1be7 1b8f 1b37 1adf 1a87  .....?.....7....\n001bf60: 1a2f 19d7 197f 1927 18cf 1877 181f 17c7  ./.....'...w....\n001bf70: 176f 1717 16bf 1667 160f 15b7 155f 1507  .o.....g....._..\n001bf80: 14af 1457 13ff 13a7 134f 12f7 129f 1247  ...W.....O.....G\n001bf90: 11ef 1197 113f 10e7 108f 1037 0fdf 0f87  .....?.....7....\n001bfa0: 0f2f 0ed7 0e7f 0e27 0dcf 0d77 0d1f 0cc7  ./.....'...w....\n001bfb0: 0c6f 0c17 0bbf 0b67 0b0f 0ab7 0a5f 0a07  .o.....g....._..\n001bfc0: 09af 0957 08ff 08a7 084f 07f7 079f 0747  ...W.....O.....G\n001bfd0: 06ef 0697 063f 05e7 058f 0537 04df 0487  .....?.....7....\n001bfe0: 042f 03d7 037f 0327 02cf 0277 021f 01c7  ./.....'...w....\n001bff0: 016f 0117 00bf 0063 2ddb 788c 0133 f431  .o.....c-.x..3.1\n```\n- 注意File Header中的FIL_PAGE_PREV字段, 值为0x00000005, 也就是page no为5的页。\n- 结合page 5可以看出, 叶子节点的两个页通过链表进行链接, 每个页内的数据通过记录头中的next_record字段进行链接。\n\n6. 存储结构图如下,\n![image](https://picturestore.nos-eastchina1.126.net/mysql/innodb%E6%95%B0%E6%8D%AE%E9%A1%B5%E5%AD%98%E5%82%A8%E7%A4%BA%E4%BE%8B2.jpg)\n\n\n7. 小结\n- 对于单页存储不了的情况, 需要进行页分裂, 此时B+树会有多层结构, 最低层为叶子节点, 存储了具体的数据, 上面是索引节点, 只存储主键以及下一层节点所在的页信息\n\n## 五. 总结与思考\n本文介绍了innodb的数据页存储, 以实例的方式讲解了innodb存储引擎如何存储一个表中数据的。但是我们仍然有很多问题没有给出答案,\n1. 查找行记录时, 需要找到某个索引的root page, 这个信息是存储在哪里的?\n2. 我们没有介绍段和区的相关内容, 这些在InnoDB数据存储时是如何使用的?\n3. 我们查看数据时, 都是直接查看磁盘文件, 内存中的页与磁盘中的页有何区别, 内存中的脏页又是如何刷新到磁盘的?\n\nInnoDB存储引擎较为复杂, 不可能一次性将全部内容学会, 我们不妨每次带入一个问题, 深入寻找这个问题的答案, 关于这些问题, 我会在后续文章中再逐步介绍。\n\n## 六. 参考\n1. <<Mysql技术内幕 InnoDB存储引擎>>\n2. 淘宝数据库内核月报\n\n","source":"_posts/InnoDB_DataPage.md","raw":"---\ntitle: InnoDB数据页存储\ndate: 2020-10-12 10:06:37\ncategories:\n- Mysql\ntags:\n- Mysql\n- InnoDB\n---\n\n## 一. 简介\n1. Mysql是目前最为流行的关系型数据库管理系统, 具有体积小、速度快、开放源码等优势。InnoDB是Mysql使用最广泛的存储引擎, InnoDB进行了行锁设计, 支持MVCC, 提供一致性非锁定读。学习InnoDB数据页存储, 能够让我们更加深入的理解InnoDB的一些特性。\n2. 程序 = 数据结构 + 算法, 对于Mysql而言也是如此。由于数据持久化的需要, Mysql的数据不仅存储在内存中, 也会持久化到文件中, 存储结构如下图,\n![image](https://picturestore.nos-eastchina1.126.net/mysql/Mysql%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E6%A6%82%E8%BF%B0.jpg)\n- 从磁盘中, 我们可以很容易的看到持久化的各个文件。\n- 磁盘中的文件需要加载到内存中才能被程序使用, 很明显, 不可能将所有磁盘文件都加载到内存, 当内存中的数据发生更改后, 也需要刷新到磁盘文件中, 什么时候刷新, 怎么刷新, 这些都是Mysql需要考虑的问题, 但是这些内容不是本文的重点, 我们这里稍加了解即可。\n- **本文的重点是学习数据页的存储, 这些数据页可能存在与系统表空间, 独立表空间或者临时表空间。可以看到, 这些只是图中的一小部分。**\n3. 学习之前, 我们先考虑几个问题,\n- 无论是内存存储还是磁盘存储, 都离不开内存管理, InnoDB是如何划分内存以及如何管理内存的?\n- InnoDB使用B+树存储我们表中的数据, B+树索引节点以及叶子节点应该需要存储哪些数据? 又是怎么存储的?\n- 我们在使用时, 创建了数据库, 数据表, 这些元数据是如何存储的, 查询某个表时, 如何根据元数据找到表的索引, 如何选择索引, 选择索引后, 如何定位到索引的根节点(root page)? 找到跟节点后, 又是如何一步步找到某个具体数据的?\n4. 说明\n- Mysql版本: 8.0.12-debug\n- 存储引擎使用InnoDB\n- 我们会用到xxd命令, 使用xxd(或者hexdump)可以以十六进制的方式查看文件。\n\n## 二. InnoDB存储结构\nInnoDB存储结构图如下所示, 我们这里只做简要的介绍, 更多细节我们将在后续的文章中再进行详细阐述,\n\n![image](https://picturestore.nos-eastchina1.126.net/mysql/%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png)\n\n1. 表空间(tablespace)可以认为是InnoDB存储引擎存储结构的最高层, 所有数据都在表空间中, 除了共享表空间外, 每个表可以创建独立表空间, 具体参数是由innodb_file_per_table参数决定, 表空间由各种段组成。\n2. 常见的段(segment)有数据段, 回滚段, 索引段。innodb中数据段就是B+树的叶子节点, 索引段就是B+树中的非叶子节点。\n3. 段是由区(extent)组成, 默认情况下区的大小是1MB, InnoDB默认页大小为16KB, 所以1个区是由16个连续页组成。\n4. innodb默认页(page)大小是16KB, 也可以通过innodb_page_size进行控制。\n5. innodb存储是面向行(row)的, 行的存储格式主要有compact、redundant、compressed、dynamic。\n\n## 三. 数据页存储\n### 3.1 独立表空间\n通过innodb_file_per_table参数, 我们可以为每个表都创建一个表空间, 这个就是这个表的独立表空间, 这个表的索引段, 数据段都会存储在这个独立表空间中, 但是Redo log, Undo log仍然在各自的表空间中, 表空间存储如下图,\n\n![image](https://picturestore.nos-eastchina1.126.net/mysql/%E7%8B%AC%E7%AB%8B%E8%A1%A8%E7%A9%BA%E9%97%B4%E7%BB%93%E6%9E%84.jpg)\n\n1. 表空间的page 0是表空间的第一页, 存储了表空间的信息， 同时也用于管理前256个extent。page 16384类型为FIL_PAGE_TYPE_XDES也用于管理之后的256个extent, 以此类推, 每隔16384个页面都会需要一个FIL_PAGE_TYPE_XDES页面。\n2. page 1类型是FIL_PAGE_IBUF_BITMAP, 用于管理每个page(前256个extent的16384个页面)的change buffer(change buffer相关内容不是本文的重点, 感兴趣的读者可以查找相关资料)。与FIL_PAGE_TYPE_XDES类似, 每隔16384个页面都需要一个FIL_PAGE_IBUF_BITMAP页面。\n3. page 2类型为FIL_PAGE_INODE, 用于管理segment。\n4. page 3类型为FIL_PAGE_SDI, 存储Serialized Dictionary Information(SDI, 词典序列化信息), 存储了这个表空间的一些数据字典(Data Dictionary)信息。\n5. page 4一般就是这个表主键索引的root page。\n\n### 3.2 页存储\nInnoDB的页存储结构如下, 每页都是由3部分组成, File Header(38字节)、File Body、File Trailer(8字节), 不同页的File Body存储的内容不同,\n\n![image](https://picturestore.nos-eastchina1.126.net/mysql/innodb%E9%A1%B5%E5%AD%98%E5%82%A8.jpg)\n\n1. File Header\n\n名称 | 大小 | 说明\n---|---|---\nFIL_PAGE_SPACE_OR_CHKSUM | 4字节 | 页的校验码\nFIL_PAGE_OFFSET | 4字节 | 表空间中页的便宜量\nFIL_PAGE_PREV | 4字节 | 上一页\nFIL_PAGE_NEXT | 4字节 | 下一页\nFIL_PAGE_LSN | 8字节 | 页面被最后修改时对应的日志序列位置\nFIL_PAGE_TYPE | 2字节 | 页面类型\nFIL_PAGE_FILE_FLUSH_LSN | 8字节 | 系统表空间中有定义, 代表文件更新到的LSN\nFIL_PAGE_ARCH_LOG_NO_OR_SPACE_ID | 4字节 | 页面所属表空间id\n\n2. File Type\n\n名称 | 值 | 说明\n---|---|---\nFIL_PAGE_TYPE_ALLOCATED | 0x0000 | 未使用\nFIL_PAGE_UNDO_LOG | 0x0002 | undo log\nFIL_PAGE_INODE | 0x0003 | 存储了段信息\nFIL_PAGE_IBUF_FREE_LIST | 0x0004 | Insert Buffer空闲列表\nFIL_PAGE_IBUF_BITMAP | 0x0005 | Insert Buffer位图\nFIL_PAGE_TYPE_SYS | 0x0006 | 系统页\nFIL_PAGE_TYPE_TRX_SYS | 0x0007 | 事务系统数据\nFIL_PAGE_TYPE_FSP_HDR | 0x0008 | 表空间头部信息\nFIL_PAGE_TYPE_XDES | 0x0009 | 扩展描述页\nFIL_PAGE_TYPE_BLOB | 0x000A\t| BLOB页\nFIL_PAGE_SDI | 0x45bd | SDI索引页\nFIL_PAGE_RTREE | 0x45be | R-tree\nFIL_PAGE_INDEX | 0x45bf | B-tree\n\n\n### 3.3 数据页\n看完InnoDB页结构后, 我们看下数据页的存储,\n\n![image](https://picturestore.nos-eastchina1.126.net/mysql/%E6%95%B0%E6%8D%AE%E9%A1%B5%E7%BB%93%E6%9E%84.jpg)\n\n1. Page Header\n\n名称 | 大小 | 说明\n---|---|---\nPAGE_N_DIR_SLOTS | 2字节 | page directory中slot的个数\nPAGE_HEAP_TOP | 2字节 | 堆中第一个记录指针\nPAGE_N_HEAP | 2字节 | 堆中记录数\nPAGE_FREE | 2字节 | 指向空闲空间首地址\nPAGE_GARBAGE | 2字节 | 已经删除的记录数\nPAGE_LAST_INSERT | 2字节 | 最后插入位置\nPAGE_DIRECTION | 2字节 | 最后插入方向\nPAGE_N_DIRECTION | 2字节 | 一个插入方向连续插入记录数\nPAGE_N_RECS | 2字节 | 这个页的记录总数\nPAGE_MAX_TRX_ID | 8字节 | 修改当前页的最大事务ID\nPAGE_LEVEL | 2字节 | 当前页在索引中的层, 叶子节点为0x00\nPAGE_INDEX_ID | 8字节 | 索引ID\nPAGE_BTR_SEG_LEAF | 10字节 | 非叶子节点所在段, 仅在B+树的root页中有定义\nPAGE_BTR_SEG_TOP | 10字节 | 数据页所在段, 仅在B+树的root页中有定义\n\n\n2. Infimun & Supermum\n虚拟记录, Infimum为13字节, Supermum也是13字节。具体存储内容, 我们会在下面进行介绍。\n\n\n3. Page Directory\n- 页目录, 因为行记录在数据页中以链表的形式链接, 但是在查找记录时, 链表查找速度很慢, 为了加速记录查找, 创建页目录, 页目录可以用于二分查找。**每个目录项占用2个字节, 从页尾部开始, 倒序存储。**\n- 为了便于理解Page Directory, 我们这里举一个例子, 如果表中存储了200条数据, 数据通过链表的方式进行链接, 我们在查询时, 需要遍历整个链表才能找到数据, 这样无疑比较慢。我们可以通过建立索引的方式, 加快查找速度, 我们可以将这200条记录的主键按照顺序进行存储, InnoDB的Page Directory就是这个思路, 但是并不是存储了主键的值, 而是存储了对应记录的位置, 并且不是将每个行记录都存储在Page Directory中, 只是建立一个稀疏索引。\n\n\n### 3.4 innodb行存储\n限于篇幅, 我们这里主要介绍compact格式的行记录存储, 存储格式如下图,\n\n![image](https://picturestore.nos-eastchina1.126.net/mysql/compact%E8%A1%8C%E8%AE%B0%E5%BD%95%E6%A0%BC%E5%BC%8F.jpg)\n\n1. 从图中可以看出, 每个记录行至少占有5字节(记录头) + 主键长度 + 6字节(事务ID) + 7字节(回滚指针)\n2. 我们需要注意记录头中的next_record字段, 这个字段占有16bit, 也就是2个字节, 通过这个字段, InnoDB将一个页中的所有记录以链表的方式链接到一起。\n\n\n## 四. 实例讲解\n为了便于大家理解, 这部分我们给出一些实例,\n\n1. 本节举例说明InnoDB的一个表是如何存储的, 主要介绍两种情况, 一种情况是表中数据很少, 另一种情况是表中数据比较多, 一页已经存储不了的情况。\n2. 表结构定义,\n```sql\ncreate table `t` (`id` int not null, primary key(`id`)) engine=InnoDB ROW_FORMAT=Compact;\n```\n- 为了更容易理解, 我们这里只创建了一个非常简单的表, 也只有一个主键索引。主键类型为int, 占用4个字节。\n- 创建表后, 可以在相应的目录下看到t.ibd文件, 这里我是在test数据库下创建的这个表, 所以也就在test目录下。\n- 从磁盘文件中, 我们可以看到, t.ibd文件大小为112KB, 也就是7*16KB, 也就是7个page, 也就意味着, 创建表后, InnoDB默认初始化了7个page。\n- 我们的表中没有变长字段, 主键长度为4字节, 所以单个记录的长度为5(记录头) + 4(主键ID) + 6(事务ID) + 7(回滚指针) = 22字节\n\n3. B+树示例\nInnoDB数据存储是通过B+树组织的, 一个很简单的B+树如下所示,\n\n![image](https://picturestore.nos-eastchina1.126.net/mysql/B%2B%E6%A0%91%E7%A4%BA%E4%BE%8B.jpg)\n\n- B+树的性质有很多, 其增删查改操作较常规的二叉树更复杂一些,  感兴趣的可以查询相关资料, 这里有个基本概念即可。\n\n4. 后续如果没有特殊说明, 表空间第一个页是page 0, 第二页是page 1, 以此类推。\n\n### 4.1 单页存储\n我们首先看下当表中数据很少的时候, 数据是如何组织的, 具体操作步骤如下,\n\n1. 我们向表中插入2条记录,\n```sql\ninsert into t values (2);\ninsert into t values (1);\n```\n- 这里注意我们先插入主键值为2的行记录, 再插入主键值为1的行记录。\n\n2. 通过xxd将t.ibd以16进制表示, 执行命令xxd t.idb t.txt, 也可以使用hexdump命令查看。\n\n3. 查看t.txt中的内容, 这里我们查看**page 4**的数据\n```\n0010000: a76e 6043 0000 0004 ffff ffff ffff ffff  .n`C............\n0010010: 0000 0000 012e 6d9d 45bf 0000 0000 0000  ......m.E.......\n0010020: 0000 0000 0005 0002 00a4 8004 0000 0000  ................\n0010030: 0093 0001 0001 0002 0000 0000 0000 0000  ................\n0010040: 0000 0000 0000 0000 0091 0000 0005 0000  ................\n0010050: 0002 0272 0000 0005 0000 0002 01b2 0100  ...r............\n0010060: 0200 3069 6e66 696d 756d 0003 000b 0000  ..0infimum......\n0010070: 7375 7072 656d 756d 0000 10ff f380 0000  supremum........\n0010080: 0200 0000 001c 0481 0000 00fa 0110 0000  ................\n0010090: 18ff ea80 0000 0100 0000 001c 0582 0000  ................\n00100a0: 012c 0110 0000 0000 0000 0000 0000 0000  .,..............\n00100b0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n......\n......\n0013fe0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n0013ff0: 0000 0000 0070 0063 a76e 6043 012e 6d9d  .....p.c.n`C..m.\n```\n- 前38字节是文件头[0010000,0010026]\n- 之后56字节是数据页头部[0010027,001005d]\n- 之后的26字节是最小记录[001005e, 001006a], 最大记录[001006b, 0010077], 这里可以看到最小记录的n_owns值为1(只有自身1条记录), 最大记录的n_owns值为3(除了自身外, 还有我们插入的两条记录)\n- 紧接着是第1条插入记录[0010078, 001008d]\n```\n0010070: .... .... .... .... 0000 10ff f380 0000\n0010080: 0200 0000 001c 0481 0000 00fa 0110 ....\n```\n- 最后是刚才插入的第2条记录[001008e, 00100a3]\n- 对于int类型, innodb存储方式与常规的方式不同, [0x00000000, 0x7fffffff]代表[-2147483648, -1], [0x80000000, 0xffffffff]代表[0, 21473647]。\n\n4. 存储结构如下图\n![image](https://picturestore.nos-eastchina1.126.net/mysql/innodb%E6%95%B0%E6%8D%AE%E9%A1%B5%E5%AD%98%E5%82%A8%E7%A4%BA%E4%BE%8B1.jpg)\n\n5. 这里示例下如何从最小记录查找到最大记录\n- 首先定位到最小记录的位置, 最小记录占有5字节(记录头) + 8字节(内容) = 13字节, 最小记录所在的位置为001005e, 根据最小记录的记录头信息, 可以计算出下一个记录所在位置001005e + 0030 = 001008e\n- 001008e是主键为1的记录所在位置, 接着计算下一个记录的位置001008e + ffea = 0010078, 这里需要注意的是, 加法运算时, 只保留后面4位的结果, 可以看到这个位置就是我们第一次插入的主键为2的记录\n- 之后, 继续计算下一个记录所在位置, 0010078 + fff3 = 1006b, 这个就是最大记录所在的位置\n- 在查找某个具体的行记录时, 可以先利用page directory进行近似的二分查找, 之后再进行链表查找。\n6. page directory\n- 页尾部包含两个slots\n```\n0013ff0: 0000 0000 0070 0063 .... .... .... ....\n```\n- 0063是第1个slot的位置, 相应的记录所在位置为0010063, 也就是最小记录。[001005e, 0010062]这个是最小记录的记录头, [0010063, 001006a]是最小记录的内容。\n- 0070是第2个slot的位置, 相应的记录所在位置为0010070, 这个是最大记录所在的内容开始位置。\n\n7. 小结\n- 可以看到, 从最小记录开始, 到最大记录结束, 数据按照主键顺序以链表的方式进行链接。\n- 行数据的存储是按照插入的顺序存储的, 不是按照主键顺序存储, 数据删除后, 释放的空间可以复用, 关于复用部分的细节, 后续文章再进行详细介绍。\n\n### 4.2 多页存储\n在4.1的基础上, 我们继续插入数据, 操作步骤如下,\n\n1. 我们通过脚本向表中继续插入数据\n```php\n<?php\n$servername = \"localhost:8083\";\n$username = \"root\";\n$password = \"password\";\n$dbname = \"test\";\n\ntry {\n    $conn = new PDO(\"mysql:host=$servername;dbname=$dbname\", $username, $password);\n    $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    for($i = 3; $i < 1000; $i++){\n    \t$sql = \"INSERT INTO t VALUES (\" . strval($i) . \")\";\n        $conn->exec($sql);\n    }\n}\ncatch(PDOException $e){\n    echo $sql . \"<br>\" . $e->getMessage();\n}\n$conn = null;\n?>\n```\n- 之前表中已经插入2条记录, 这里又插入997条记录, 所以表中现在一共999条记录, 主键id从1到999。\n- 单条记录需要占用22字节, 可以知道, 此时, 单个数据页不能存储全部数据。\n\n2. 以16进制查看此时的t.ibd文件: xxd t.ibd t.txt\n3. 查看t.txt内容, 首先查看**page 4**的内容\n```\n0010000: df67 193d 0000 0004 ffff ffff ffff ffff  .g.=............\n0010010: 0000 0000 0132 5500 45bf 0000 0000 0000  .....2U.E.......\n0010020: 0000 0000 0005 0002 0092 8004 0000 0000  ................\n0010030: 008a 0002 0001 0002 0000 0000 0000 0000  ................\n0010040: 0001 0000 0000 0000 0091 0000 0005 0000  ................\n0010050: 0002 0272 0000 0005 0000 0002 01b2 0100  ...r............\n0010060: 0200 1a69 6e66 696d 756d 0003 000b 0000  ...infimum......\n0010070: 7375 7072 656d 756d 1000 1100 0d80 0000  supremum........\n0010080: 0100 0000 0500 0019 ffe6 8000 0153 0000  .............S..\n0010090: 0006 0000 0000 0000 0000 0000 0000 0000  ................\n.......\n.......\n0013fe0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n0013ff0: 0000 0000 0070 0063 df67 193d 0132 5500  .....p.c.g.=.2U.\n```\n- 可以看到, 第5页, 目前只有少量内容, 因为此时第5页是索引页, 是B+树的根, 没有存储具体的数据, 只存储了主键索引。\n- File Header, Page Header, Infimum & Supremum跟之前基本类似, 这里就不再详细介绍。\n- 单个索引需要占用5字节(记录头) + 4字节(主键) + 4字节(记录所在页) = 13字节。\n- 第1个索引信息\n```\n0010070: .... .... .... .... 1000 1100 0d80 0000\n0010080: 0100 0000 05.. .... .... .... .... ....\n```\n主键id为0x80000001, 也就是1, page no为0x00000005, 也就是**page 5**\n- 第2个索引信息\n```\n0010080: .... .... ..00 0019 ffe6 8000 0153 0000\n0010090: 0006 .... .... .... .... .... .... ....\n```\n主键id为0x80000153, 也就是339, page no为0x00000006, 也就是**page 6**\n- 通过这两个索引信息, 可以知道, **page 5**存储着主键id从1到338的数据, **page 6**存储着主键id从339到999的数据\n\n4. 查看**page 5**\n```\n0014000: e1c0 bb7a 0000 0005 ffff ffff 0000 0006  ...z............\n0014010: 0000 0000 0132 5500 45bf 0000 0000 0000  .....2U.E.......\n0014020: 0000 0000 0005 0056 3a90 82a6 1d89 1d0c  .......V:.......\n0014030: 0000 0005 0000 0152 0000 0000 0000 0000  .......R........\n0014040: 0000 0000 0000 0000 0091 0000 0000 0000  ................\n0014050: 0000 0000 0000 0000 0000 0000 0000 0100  ................\n0014060: 0200 1a69 6e66 696d 756d 0003 000b 0000  ...infimum......\n0014070: 7375 7072 656d 756d 0000 1000 1680 0000  supremum........\n0014080: 0100 0000 001c 0582 0000 012c 0110 0000  ...........,....\n0014090: 1800 1680 0000 0200 0000 001c 0481 0000  ................\n00140a0: 00fa 0110 0000 2000 1680 0000 0300 0000  ...... .........\n.......\n.......\n0017e90: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n0017ea0: 0000 0000 0070 3a27 39cf 3977 391f 38c7  .....p:'9.9w9.8.\n0017eb0: 386f 3817 37bf 3767 370f 36b7 365f 3607  8o8.7.7g7.6.6_6.\n0017ec0: 35af 3557 34ff 34a7 344f 33f7 339f 3347  5.5W4.4.4O3.3.3G\n0017ed0: 32ef 3297 323f 31e7 318f 3137 30df 3087  2.2.2?1.1.170.0.\n0017ee0: 302f 2fd7 2f7f 2f27 2ecf 2e77 2e1f 2dc7  0//././'...w..-.\n0017ef0: 2d6f 2d17 2cbf 2c67 2c0f 2bb7 2b5f 2b07  -o-.,.,g,.+.+_+.\n0017f00: 2aaf 2a57 29ff 29a7 294f 28f7 289f 2847  *.*W).).)O(.(.(G\n0017f10: 27ef 2797 273f 26e7 268f 2637 25df 2587  '.'.'?&.&.&7%.%.\n0017f20: 252f 24d7 247f 2427 23cf 2377 231f 22c7  %/$.$.$'#.#w#.\".\n0017f30: 226f 2217 21bf 2167 210f 20b7 205f 2007  \"o\".!.!g!. . _ .\n0017f40: 1faf 1f57 1eff 1ea7 1e4f 1df7 0070 1d47  ...W.....O...p.G\n0017f50: 1cef 1c97 1c3f 1be7 1b8f 1b37 1adf 1a87  .....?.....7....\n0017f60: 1a2f 19d7 197f 1927 18cf 1877 181f 17c7  ./.....'...w....\n0017f70: 176f 1717 16bf 1667 160f 15b7 155f 1507  .o.....g....._..\n0017f80: 14af 1457 13ff 13a7 134f 12f7 129f 1247  ...W.....O.....G\n0017f90: 11ef 1197 113f 10e7 108f 1037 0fdf 0f87  .....?.....7....\n0017fa0: 0f2f 0ed7 0e7f 0e27 0dcf 0d77 0d1f 0cc7  ./.....'...w....\n0017fb0: 0c6f 0c17 0bbf 0b67 0b0f 0ab7 0a5f 0a07  .o.....g....._..\n0017fc0: 09af 0957 08ff 08a7 084f 07f7 079f 0747  ...W.....O.....G\n0017fd0: 06ef 0697 063f 05e7 058f 0537 04df 0487  .....?.....7....\n0017fe0: 042f 03d7 037f 0327 02cf 0277 021f 01c7  ./.....'...w....\n0017ff0: 016f 0117 00bf 0063 e1c0 bb7a 0132 5500  .o.....c...z.2U.\n```\n- 注意页尾部包含page directory, slots的个数可以从page header中读取\n- File Header中的FIL_PAGE_NEXT字段, 值为0x00000006, 也就是page no为6的页。\n\n5. 查看**page 6**\n```\n0018000: 2ddb 788c 0000 0006 0000 0005 ffff ffff  -.x.............\n0018010: 0000 0000 0133 f431 45bf 0000 0000 0000  .....3.1E.......\n0018020: 0000 0000 0005 00a6 3946 8297 0000 0000  ........9F......\n0018030: 3935 0002 0142 0295 0000 0000 0000 0000  95...B..........\n0018040: 0000 0000 0000 0000 0091 0000 0000 0000  ................\n0018050: 0000 0000 0000 0000 0000 0000 0000 0100  ................\n0018060: 0200 1a69 6e66 696d 756d 0006 000b 0000  ...infimum......\n0018070: 7375 7072 656d 756d 0000 1000 1680 0001  supremum........\n0018080: 5300 0000 001d 6d81 0000 00a3 0110 0000  S.....m.........\n.......\n.......\n001bea0: 0000 0000 0000 0000 0000 0000 0070 38c7  .............p8.\n001beb0: 386f 3817 37bf 3767 370f 36b7 365f 3607  8o8.7.7g7.6.6_6.\n001bec0: 35af 3557 34ff 34a7 344f 33f7 339f 3347  5.5W4.4.4O3.3.3G\n001bed0: 32ef 3297 323f 31e7 318f 3137 30df 3087  2.2.2?1.1.170.0.\n001bee0: 302f 2fd7 2f7f 2f27 2ecf 2e77 2e1f 2dc7  0//././'...w..-.\n001bef0: 2d6f 2d17 2cbf 2c67 2c0f 2bb7 2b5f 2b07  -o-.,.,g,.+.+_+.\n001bf00: 2aaf 2a57 29ff 29a7 294f 28f7 289f 2847  *.*W).).)O(.(.(G\n001bf10: 27ef 2797 273f 26e7 268f 2637 25df 2587  '.'.'?&.&.&7%.%.\n001bf20: 252f 24d7 247f 2427 23cf 2377 231f 22c7  %/$.$.$'#.#w#.\".\n001bf30: 226f 2217 21bf 2167 210f 20b7 205f 2007  \"o\".!.!g!. . _ .\n001bf40: 1faf 1f57 1eff 1ea7 1e4f 1df7 1d9f 1d47  ...W.....O.....G\n001bf50: 1cef 1c97 1c3f 1be7 1b8f 1b37 1adf 1a87  .....?.....7....\n001bf60: 1a2f 19d7 197f 1927 18cf 1877 181f 17c7  ./.....'...w....\n001bf70: 176f 1717 16bf 1667 160f 15b7 155f 1507  .o.....g....._..\n001bf80: 14af 1457 13ff 13a7 134f 12f7 129f 1247  ...W.....O.....G\n001bf90: 11ef 1197 113f 10e7 108f 1037 0fdf 0f87  .....?.....7....\n001bfa0: 0f2f 0ed7 0e7f 0e27 0dcf 0d77 0d1f 0cc7  ./.....'...w....\n001bfb0: 0c6f 0c17 0bbf 0b67 0b0f 0ab7 0a5f 0a07  .o.....g....._..\n001bfc0: 09af 0957 08ff 08a7 084f 07f7 079f 0747  ...W.....O.....G\n001bfd0: 06ef 0697 063f 05e7 058f 0537 04df 0487  .....?.....7....\n001bfe0: 042f 03d7 037f 0327 02cf 0277 021f 01c7  ./.....'...w....\n001bff0: 016f 0117 00bf 0063 2ddb 788c 0133 f431  .o.....c-.x..3.1\n```\n- 注意File Header中的FIL_PAGE_PREV字段, 值为0x00000005, 也就是page no为5的页。\n- 结合page 5可以看出, 叶子节点的两个页通过链表进行链接, 每个页内的数据通过记录头中的next_record字段进行链接。\n\n6. 存储结构图如下,\n![image](https://picturestore.nos-eastchina1.126.net/mysql/innodb%E6%95%B0%E6%8D%AE%E9%A1%B5%E5%AD%98%E5%82%A8%E7%A4%BA%E4%BE%8B2.jpg)\n\n\n7. 小结\n- 对于单页存储不了的情况, 需要进行页分裂, 此时B+树会有多层结构, 最低层为叶子节点, 存储了具体的数据, 上面是索引节点, 只存储主键以及下一层节点所在的页信息\n\n## 五. 总结与思考\n本文介绍了innodb的数据页存储, 以实例的方式讲解了innodb存储引擎如何存储一个表中数据的。但是我们仍然有很多问题没有给出答案,\n1. 查找行记录时, 需要找到某个索引的root page, 这个信息是存储在哪里的?\n2. 我们没有介绍段和区的相关内容, 这些在InnoDB数据存储时是如何使用的?\n3. 我们查看数据时, 都是直接查看磁盘文件, 内存中的页与磁盘中的页有何区别, 内存中的脏页又是如何刷新到磁盘的?\n\nInnoDB存储引擎较为复杂, 不可能一次性将全部内容学会, 我们不妨每次带入一个问题, 深入寻找这个问题的答案, 关于这些问题, 我会在后续文章中再逐步介绍。\n\n## 六. 参考\n1. <<Mysql技术内幕 InnoDB存储引擎>>\n2. 淘宝数据库内核月报\n\n","slug":"InnoDB_DataPage","published":1,"updated":"2020-10-12T02:09:48.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg5wpdun00016331e2d3c59s","content":"<h2 id=\"一-简介\"><a href=\"#一-简介\" class=\"headerlink\" title=\"一. 简介\"></a>一. 简介</h2><ol>\n<li>Mysql是目前最为流行的关系型数据库管理系统, 具有体积小、速度快、开放源码等优势。InnoDB是Mysql使用最广泛的存储引擎, InnoDB进行了行锁设计, 支持MVCC, 提供一致性非锁定读。学习InnoDB数据页存储, 能够让我们更加深入的理解InnoDB的一些特性。</li>\n<li>程序 = 数据结构 + 算法, 对于Mysql而言也是如此。由于数据持久化的需要, Mysql的数据不仅存储在内存中, 也会持久化到文件中, 存储结构如下图,<br><img src=\"https://picturestore.nos-eastchina1.126.net/mysql/Mysql%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E6%A6%82%E8%BF%B0.jpg\" alt=\"image\"></li>\n</ol>\n<ul>\n<li>从磁盘中, 我们可以很容易的看到持久化的各个文件。</li>\n<li>磁盘中的文件需要加载到内存中才能被程序使用, 很明显, 不可能将所有磁盘文件都加载到内存, 当内存中的数据发生更改后, 也需要刷新到磁盘文件中, 什么时候刷新, 怎么刷新, 这些都是Mysql需要考虑的问题, 但是这些内容不是本文的重点, 我们这里稍加了解即可。</li>\n<li><strong>本文的重点是学习数据页的存储, 这些数据页可能存在与系统表空间, 独立表空间或者临时表空间。可以看到, 这些只是图中的一小部分。</strong></li>\n</ul>\n<ol start=\"3\">\n<li>学习之前, 我们先考虑几个问题,</li>\n</ol>\n<ul>\n<li>无论是内存存储还是磁盘存储, 都离不开内存管理, InnoDB是如何划分内存以及如何管理内存的?</li>\n<li>InnoDB使用B+树存储我们表中的数据, B+树索引节点以及叶子节点应该需要存储哪些数据? 又是怎么存储的?</li>\n<li>我们在使用时, 创建了数据库, 数据表, 这些元数据是如何存储的, 查询某个表时, 如何根据元数据找到表的索引, 如何选择索引, 选择索引后, 如何定位到索引的根节点(root page)? 找到跟节点后, 又是如何一步步找到某个具体数据的?</li>\n</ul>\n<ol start=\"4\">\n<li>说明</li>\n</ol>\n<ul>\n<li>Mysql版本: 8.0.12-debug</li>\n<li>存储引擎使用InnoDB</li>\n<li>我们会用到xxd命令, 使用xxd(或者hexdump)可以以十六进制的方式查看文件。</li>\n</ul>\n<h2 id=\"二-InnoDB存储结构\"><a href=\"#二-InnoDB存储结构\" class=\"headerlink\" title=\"二. InnoDB存储结构\"></a>二. InnoDB存储结构</h2><p>InnoDB存储结构图如下所示, 我们这里只做简要的介绍, 更多细节我们将在后续的文章中再进行详细阐述,</p>\n<p><img src=\"https://picturestore.nos-eastchina1.126.net/mysql/%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png\" alt=\"image\"></p>\n<ol>\n<li>表空间(tablespace)可以认为是InnoDB存储引擎存储结构的最高层, 所有数据都在表空间中, 除了共享表空间外, 每个表可以创建独立表空间, 具体参数是由innodb_file_per_table参数决定, 表空间由各种段组成。</li>\n<li>常见的段(segment)有数据段, 回滚段, 索引段。innodb中数据段就是B+树的叶子节点, 索引段就是B+树中的非叶子节点。</li>\n<li>段是由区(extent)组成, 默认情况下区的大小是1MB, InnoDB默认页大小为16KB, 所以1个区是由16个连续页组成。</li>\n<li>innodb默认页(page)大小是16KB, 也可以通过innodb_page_size进行控制。</li>\n<li>innodb存储是面向行(row)的, 行的存储格式主要有compact、redundant、compressed、dynamic。</li>\n</ol>\n<h2 id=\"三-数据页存储\"><a href=\"#三-数据页存储\" class=\"headerlink\" title=\"三. 数据页存储\"></a>三. 数据页存储</h2><h3 id=\"3-1-独立表空间\"><a href=\"#3-1-独立表空间\" class=\"headerlink\" title=\"3.1 独立表空间\"></a>3.1 独立表空间</h3><p>通过innodb_file_per_table参数, 我们可以为每个表都创建一个表空间, 这个就是这个表的独立表空间, 这个表的索引段, 数据段都会存储在这个独立表空间中, 但是Redo log, Undo log仍然在各自的表空间中, 表空间存储如下图,</p>\n<p><img src=\"https://picturestore.nos-eastchina1.126.net/mysql/%E7%8B%AC%E7%AB%8B%E8%A1%A8%E7%A9%BA%E9%97%B4%E7%BB%93%E6%9E%84.jpg\" alt=\"image\"></p>\n<ol>\n<li>表空间的page 0是表空间的第一页, 存储了表空间的信息， 同时也用于管理前256个extent。page 16384类型为FIL_PAGE_TYPE_XDES也用于管理之后的256个extent, 以此类推, 每隔16384个页面都会需要一个FIL_PAGE_TYPE_XDES页面。</li>\n<li>page 1类型是FIL_PAGE_IBUF_BITMAP, 用于管理每个page(前256个extent的16384个页面)的change buffer(change buffer相关内容不是本文的重点, 感兴趣的读者可以查找相关资料)。与FIL_PAGE_TYPE_XDES类似, 每隔16384个页面都需要一个FIL_PAGE_IBUF_BITMAP页面。</li>\n<li>page 2类型为FIL_PAGE_INODE, 用于管理segment。</li>\n<li>page 3类型为FIL_PAGE_SDI, 存储Serialized Dictionary Information(SDI, 词典序列化信息), 存储了这个表空间的一些数据字典(Data Dictionary)信息。</li>\n<li>page 4一般就是这个表主键索引的root page。</li>\n</ol>\n<h3 id=\"3-2-页存储\"><a href=\"#3-2-页存储\" class=\"headerlink\" title=\"3.2 页存储\"></a>3.2 页存储</h3><p>InnoDB的页存储结构如下, 每页都是由3部分组成, File Header(38字节)、File Body、File Trailer(8字节), 不同页的File Body存储的内容不同,</p>\n<p><img src=\"https://picturestore.nos-eastchina1.126.net/mysql/innodb%E9%A1%B5%E5%AD%98%E5%82%A8.jpg\" alt=\"image\"></p>\n<ol>\n<li>File Header</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>大小</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FIL_PAGE_SPACE_OR_CHKSUM</td>\n<td>4字节</td>\n<td>页的校验码</td>\n</tr>\n<tr>\n<td>FIL_PAGE_OFFSET</td>\n<td>4字节</td>\n<td>表空间中页的便宜量</td>\n</tr>\n<tr>\n<td>FIL_PAGE_PREV</td>\n<td>4字节</td>\n<td>上一页</td>\n</tr>\n<tr>\n<td>FIL_PAGE_NEXT</td>\n<td>4字节</td>\n<td>下一页</td>\n</tr>\n<tr>\n<td>FIL_PAGE_LSN</td>\n<td>8字节</td>\n<td>页面被最后修改时对应的日志序列位置</td>\n</tr>\n<tr>\n<td>FIL_PAGE_TYPE</td>\n<td>2字节</td>\n<td>页面类型</td>\n</tr>\n<tr>\n<td>FIL_PAGE_FILE_FLUSH_LSN</td>\n<td>8字节</td>\n<td>系统表空间中有定义, 代表文件更新到的LSN</td>\n</tr>\n<tr>\n<td>FIL_PAGE_ARCH_LOG_NO_OR_SPACE_ID</td>\n<td>4字节</td>\n<td>页面所属表空间id</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li>File Type</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FIL_PAGE_TYPE_ALLOCATED</td>\n<td>0x0000</td>\n<td>未使用</td>\n</tr>\n<tr>\n<td>FIL_PAGE_UNDO_LOG</td>\n<td>0x0002</td>\n<td>undo log</td>\n</tr>\n<tr>\n<td>FIL_PAGE_INODE</td>\n<td>0x0003</td>\n<td>存储了段信息</td>\n</tr>\n<tr>\n<td>FIL_PAGE_IBUF_FREE_LIST</td>\n<td>0x0004</td>\n<td>Insert Buffer空闲列表</td>\n</tr>\n<tr>\n<td>FIL_PAGE_IBUF_BITMAP</td>\n<td>0x0005</td>\n<td>Insert Buffer位图</td>\n</tr>\n<tr>\n<td>FIL_PAGE_TYPE_SYS</td>\n<td>0x0006</td>\n<td>系统页</td>\n</tr>\n<tr>\n<td>FIL_PAGE_TYPE_TRX_SYS</td>\n<td>0x0007</td>\n<td>事务系统数据</td>\n</tr>\n<tr>\n<td>FIL_PAGE_TYPE_FSP_HDR</td>\n<td>0x0008</td>\n<td>表空间头部信息</td>\n</tr>\n<tr>\n<td>FIL_PAGE_TYPE_XDES</td>\n<td>0x0009</td>\n<td>扩展描述页</td>\n</tr>\n<tr>\n<td>FIL_PAGE_TYPE_BLOB</td>\n<td>0x000A</td>\n<td>BLOB页</td>\n</tr>\n<tr>\n<td>FIL_PAGE_SDI</td>\n<td>0x45bd</td>\n<td>SDI索引页</td>\n</tr>\n<tr>\n<td>FIL_PAGE_RTREE</td>\n<td>0x45be</td>\n<td>R-tree</td>\n</tr>\n<tr>\n<td>FIL_PAGE_INDEX</td>\n<td>0x45bf</td>\n<td>B-tree</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-3-数据页\"><a href=\"#3-3-数据页\" class=\"headerlink\" title=\"3.3 数据页\"></a>3.3 数据页</h3><p>看完InnoDB页结构后, 我们看下数据页的存储,</p>\n<p><img src=\"https://picturestore.nos-eastchina1.126.net/mysql/%E6%95%B0%E6%8D%AE%E9%A1%B5%E7%BB%93%E6%9E%84.jpg\" alt=\"image\"></p>\n<ol>\n<li>Page Header</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>大小</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PAGE_N_DIR_SLOTS</td>\n<td>2字节</td>\n<td>page directory中slot的个数</td>\n</tr>\n<tr>\n<td>PAGE_HEAP_TOP</td>\n<td>2字节</td>\n<td>堆中第一个记录指针</td>\n</tr>\n<tr>\n<td>PAGE_N_HEAP</td>\n<td>2字节</td>\n<td>堆中记录数</td>\n</tr>\n<tr>\n<td>PAGE_FREE</td>\n<td>2字节</td>\n<td>指向空闲空间首地址</td>\n</tr>\n<tr>\n<td>PAGE_GARBAGE</td>\n<td>2字节</td>\n<td>已经删除的记录数</td>\n</tr>\n<tr>\n<td>PAGE_LAST_INSERT</td>\n<td>2字节</td>\n<td>最后插入位置</td>\n</tr>\n<tr>\n<td>PAGE_DIRECTION</td>\n<td>2字节</td>\n<td>最后插入方向</td>\n</tr>\n<tr>\n<td>PAGE_N_DIRECTION</td>\n<td>2字节</td>\n<td>一个插入方向连续插入记录数</td>\n</tr>\n<tr>\n<td>PAGE_N_RECS</td>\n<td>2字节</td>\n<td>这个页的记录总数</td>\n</tr>\n<tr>\n<td>PAGE_MAX_TRX_ID</td>\n<td>8字节</td>\n<td>修改当前页的最大事务ID</td>\n</tr>\n<tr>\n<td>PAGE_LEVEL</td>\n<td>2字节</td>\n<td>当前页在索引中的层, 叶子节点为0x00</td>\n</tr>\n<tr>\n<td>PAGE_INDEX_ID</td>\n<td>8字节</td>\n<td>索引ID</td>\n</tr>\n<tr>\n<td>PAGE_BTR_SEG_LEAF</td>\n<td>10字节</td>\n<td>非叶子节点所在段, 仅在B+树的root页中有定义</td>\n</tr>\n<tr>\n<td>PAGE_BTR_SEG_TOP</td>\n<td>10字节</td>\n<td>数据页所在段, 仅在B+树的root页中有定义</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li>Infimun &amp; Supermum<br>虚拟记录, Infimum为13字节, Supermum也是13字节。具体存储内容, 我们会在下面进行介绍。</li>\n</ol>\n<ol start=\"3\">\n<li>Page Directory</li>\n</ol>\n<ul>\n<li>页目录, 因为行记录在数据页中以链表的形式链接, 但是在查找记录时, 链表查找速度很慢, 为了加速记录查找, 创建页目录, 页目录可以用于二分查找。<strong>每个目录项占用2个字节, 从页尾部开始, 倒序存储。</strong></li>\n<li>为了便于理解Page Directory, 我们这里举一个例子, 如果表中存储了200条数据, 数据通过链表的方式进行链接, 我们在查询时, 需要遍历整个链表才能找到数据, 这样无疑比较慢。我们可以通过建立索引的方式, 加快查找速度, 我们可以将这200条记录的主键按照顺序进行存储, InnoDB的Page Directory就是这个思路, 但是并不是存储了主键的值, 而是存储了对应记录的位置, 并且不是将每个行记录都存储在Page Directory中, 只是建立一个稀疏索引。</li>\n</ul>\n<h3 id=\"3-4-innodb行存储\"><a href=\"#3-4-innodb行存储\" class=\"headerlink\" title=\"3.4 innodb行存储\"></a>3.4 innodb行存储</h3><p>限于篇幅, 我们这里主要介绍compact格式的行记录存储, 存储格式如下图,</p>\n<p><img src=\"https://picturestore.nos-eastchina1.126.net/mysql/compact%E8%A1%8C%E8%AE%B0%E5%BD%95%E6%A0%BC%E5%BC%8F.jpg\" alt=\"image\"></p>\n<ol>\n<li>从图中可以看出, 每个记录行至少占有5字节(记录头) + 主键长度 + 6字节(事务ID) + 7字节(回滚指针)</li>\n<li>我们需要注意记录头中的next_record字段, 这个字段占有16bit, 也就是2个字节, 通过这个字段, InnoDB将一个页中的所有记录以链表的方式链接到一起。</li>\n</ol>\n<h2 id=\"四-实例讲解\"><a href=\"#四-实例讲解\" class=\"headerlink\" title=\"四. 实例讲解\"></a>四. 实例讲解</h2><p>为了便于大家理解, 这部分我们给出一些实例,</p>\n<ol>\n<li>本节举例说明InnoDB的一个表是如何存储的, 主要介绍两种情况, 一种情况是表中数据很少, 另一种情况是表中数据比较多, 一页已经存储不了的情况。</li>\n<li>表结构定义,<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"string\">`t`</span> (<span class=\"string\">`id`</span> <span class=\"built_in\">int</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>, primary <span class=\"keyword\">key</span>(<span class=\"string\">`id`</span>)) <span class=\"keyword\">engine</span>=<span class=\"keyword\">InnoDB</span> ROW_FORMAT=<span class=\"keyword\">Compact</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>为了更容易理解, 我们这里只创建了一个非常简单的表, 也只有一个主键索引。主键类型为int, 占用4个字节。</li>\n<li>创建表后, 可以在相应的目录下看到t.ibd文件, 这里我是在test数据库下创建的这个表, 所以也就在test目录下。</li>\n<li>从磁盘文件中, 我们可以看到, t.ibd文件大小为112KB, 也就是7*16KB, 也就是7个page, 也就意味着, 创建表后, InnoDB默认初始化了7个page。</li>\n<li>我们的表中没有变长字段, 主键长度为4字节, 所以单个记录的长度为5(记录头) + 4(主键ID) + 6(事务ID) + 7(回滚指针) = 22字节</li>\n</ul>\n<ol start=\"3\">\n<li>B+树示例<br>InnoDB数据存储是通过B+树组织的, 一个很简单的B+树如下所示,</li>\n</ol>\n<p><img src=\"https://picturestore.nos-eastchina1.126.net/mysql/B%2B%E6%A0%91%E7%A4%BA%E4%BE%8B.jpg\" alt=\"image\"></p>\n<ul>\n<li>B+树的性质有很多, 其增删查改操作较常规的二叉树更复杂一些,  感兴趣的可以查询相关资料, 这里有个基本概念即可。</li>\n</ul>\n<ol start=\"4\">\n<li>后续如果没有特殊说明, 表空间第一个页是page 0, 第二页是page 1, 以此类推。</li>\n</ol>\n<h3 id=\"4-1-单页存储\"><a href=\"#4-1-单页存储\" class=\"headerlink\" title=\"4.1 单页存储\"></a>4.1 单页存储</h3><p>我们首先看下当表中数据很少的时候, 数据是如何组织的, 具体操作步骤如下,</p>\n<ol>\n<li>我们向表中插入2条记录,<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t <span class=\"keyword\">values</span> (<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t <span class=\"keyword\">values</span> (<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>这里注意我们先插入主键值为2的行记录, 再插入主键值为1的行记录。</li>\n</ul>\n<ol start=\"2\">\n<li><p>通过xxd将t.ibd以16进制表示, 执行命令xxd t.idb t.txt, 也可以使用hexdump命令查看。</p>\n</li>\n<li><p>查看t.txt中的内容, 这里我们查看<strong>page 4</strong>的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0010000: a76e 6043 0000 0004 ffff ffff ffff ffff  .n`C............</span><br><span class=\"line\">0010010: 0000 0000 012e 6d9d 45bf 0000 0000 0000  ......m.E.......</span><br><span class=\"line\">0010020: 0000 0000 0005 0002 00a4 8004 0000 0000  ................</span><br><span class=\"line\">0010030: 0093 0001 0001 0002 0000 0000 0000 0000  ................</span><br><span class=\"line\">0010040: 0000 0000 0000 0000 0091 0000 0005 0000  ................</span><br><span class=\"line\">0010050: 0002 0272 0000 0005 0000 0002 01b2 0100  ...r............</span><br><span class=\"line\">0010060: 0200 3069 6e66 696d 756d 0003 000b 0000  ..0infimum......</span><br><span class=\"line\">0010070: 7375 7072 656d 756d 0000 10ff f380 0000  supremum........</span><br><span class=\"line\">0010080: 0200 0000 001c 0481 0000 00fa 0110 0000  ................</span><br><span class=\"line\">0010090: 18ff ea80 0000 0100 0000 001c 0582 0000  ................</span><br><span class=\"line\">00100a0: 012c 0110 0000 0000 0000 0000 0000 0000  .,..............</span><br><span class=\"line\">00100b0: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span><br><span class=\"line\">......</span><br><span class=\"line\">......</span><br><span class=\"line\">0013fe0: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span><br><span class=\"line\">0013ff0: 0000 0000 0070 0063 a76e 6043 012e 6d9d  .....p.c.n`C..m.</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>前38字节是文件头[0010000,0010026]</li>\n<li>之后56字节是数据页头部[0010027,001005d]</li>\n<li>之后的26字节是最小记录[001005e, 001006a], 最大记录[001006b, 0010077], 这里可以看到最小记录的n_owns值为1(只有自身1条记录), 最大记录的n_owns值为3(除了自身外, 还有我们插入的两条记录)</li>\n<li><p>紧接着是第1条插入记录[0010078, 001008d]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0010070: .... .... .... .... 0000 10ff f380 0000</span><br><span class=\"line\">0010080: 0200 0000 001c 0481 0000 00fa 0110 ....</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最后是刚才插入的第2条记录[001008e, 00100a3]</p>\n</li>\n<li>对于int类型, innodb存储方式与常规的方式不同, [0x00000000, 0x7fffffff]代表[-2147483648, -1], [0x80000000, 0xffffffff]代表[0, 21473647]。</li>\n</ul>\n<ol start=\"4\">\n<li><p>存储结构如下图<br><img src=\"https://picturestore.nos-eastchina1.126.net/mysql/innodb%E6%95%B0%E6%8D%AE%E9%A1%B5%E5%AD%98%E5%82%A8%E7%A4%BA%E4%BE%8B1.jpg\" alt=\"image\"></p>\n</li>\n<li><p>这里示例下如何从最小记录查找到最大记录</p>\n</li>\n</ol>\n<ul>\n<li>首先定位到最小记录的位置, 最小记录占有5字节(记录头) + 8字节(内容) = 13字节, 最小记录所在的位置为001005e, 根据最小记录的记录头信息, 可以计算出下一个记录所在位置001005e + 0030 = 001008e</li>\n<li>001008e是主键为1的记录所在位置, 接着计算下一个记录的位置001008e + ffea = 0010078, 这里需要注意的是, 加法运算时, 只保留后面4位的结果, 可以看到这个位置就是我们第一次插入的主键为2的记录</li>\n<li>之后, 继续计算下一个记录所在位置, 0010078 + fff3 = 1006b, 这个就是最大记录所在的位置</li>\n<li>在查找某个具体的行记录时, 可以先利用page directory进行近似的二分查找, 之后再进行链表查找。</li>\n</ul>\n<ol start=\"6\">\n<li>page directory</li>\n</ol>\n<ul>\n<li><p>页尾部包含两个slots</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0013ff0: 0000 0000 0070 0063 .... .... .... ....</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>0063是第1个slot的位置, 相应的记录所在位置为0010063, 也就是最小记录。[001005e, 0010062]这个是最小记录的记录头, [0010063, 001006a]是最小记录的内容。</p>\n</li>\n<li>0070是第2个slot的位置, 相应的记录所在位置为0010070, 这个是最大记录所在的内容开始位置。</li>\n</ul>\n<ol start=\"7\">\n<li>小结</li>\n</ol>\n<ul>\n<li>可以看到, 从最小记录开始, 到最大记录结束, 数据按照主键顺序以链表的方式进行链接。</li>\n<li>行数据的存储是按照插入的顺序存储的, 不是按照主键顺序存储, 数据删除后, 释放的空间可以复用, 关于复用部分的细节, 后续文章再进行详细介绍。</li>\n</ul>\n<h3 id=\"4-2-多页存储\"><a href=\"#4-2-多页存储\" class=\"headerlink\" title=\"4.2 多页存储\"></a>4.2 多页存储</h3><p>在4.1的基础上, 我们继续插入数据, 操作步骤如下,</p>\n<ol>\n<li>我们通过脚本向表中继续插入数据<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$servername = <span class=\"string\">\"localhost:8083\"</span>;</span><br><span class=\"line\">$username = <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">$password = <span class=\"string\">\"password\"</span>;</span><br><span class=\"line\">$dbname = <span class=\"string\">\"test\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    $conn = <span class=\"keyword\">new</span> PDO(<span class=\"string\">\"mysql:host=$servername;dbname=$dbname\"</span>, $username, $password);</span><br><span class=\"line\">    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>($i = <span class=\"number\">3</span>; $i &lt; <span class=\"number\">1000</span>; $i++)&#123;</span><br><span class=\"line\">    \t$sql = <span class=\"string\">\"INSERT INTO t VALUES (\"</span> . strval($i) . <span class=\"string\">\")\"</span>;</span><br><span class=\"line\">        $conn-&gt;exec($sql);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(PDOException $e)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $sql . <span class=\"string\">\"&lt;br&gt;\"</span> . $e-&gt;getMessage();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>之前表中已经插入2条记录, 这里又插入997条记录, 所以表中现在一共999条记录, 主键id从1到999。</li>\n<li>单条记录需要占用22字节, 可以知道, 此时, 单个数据页不能存储全部数据。</li>\n</ul>\n<ol start=\"2\">\n<li>以16进制查看此时的t.ibd文件: xxd t.ibd t.txt</li>\n<li>查看t.txt内容, 首先查看<strong>page 4</strong>的内容<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0010000: df67 193d 0000 0004 ffff ffff ffff ffff  .g.=............</span><br><span class=\"line\">0010010: 0000 0000 0132 5500 45bf 0000 0000 0000  .....2U.E.......</span><br><span class=\"line\">0010020: 0000 0000 0005 0002 0092 8004 0000 0000  ................</span><br><span class=\"line\">0010030: 008a 0002 0001 0002 0000 0000 0000 0000  ................</span><br><span class=\"line\">0010040: 0001 0000 0000 0000 0091 0000 0005 0000  ................</span><br><span class=\"line\">0010050: 0002 0272 0000 0005 0000 0002 01b2 0100  ...r............</span><br><span class=\"line\">0010060: 0200 1a69 6e66 696d 756d 0003 000b 0000  ...infimum......</span><br><span class=\"line\">0010070: 7375 7072 656d 756d 1000 1100 0d80 0000  supremum........</span><br><span class=\"line\">0010080: 0100 0000 0500 0019 ffe6 8000 0153 0000  .............S..</span><br><span class=\"line\">0010090: 0006 0000 0000 0000 0000 0000 0000 0000  ................</span><br><span class=\"line\">.......</span><br><span class=\"line\">.......</span><br><span class=\"line\">0013fe0: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span><br><span class=\"line\">0013ff0: 0000 0000 0070 0063 df67 193d 0132 5500  .....p.c.g.=.2U.</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>可以看到, 第5页, 目前只有少量内容, 因为此时第5页是索引页, 是B+树的根, 没有存储具体的数据, 只存储了主键索引。</li>\n<li>File Header, Page Header, Infimum &amp; Supremum跟之前基本类似, 这里就不再详细介绍。</li>\n<li>单个索引需要占用5字节(记录头) + 4字节(主键) + 4字节(记录所在页) = 13字节。</li>\n<li>第1个索引信息<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0010070: .... .... .... .... 1000 1100 0d80 0000</span><br><span class=\"line\">0010080: 0100 0000 05.. .... .... .... .... ....</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>主键id为0x80000001, 也就是1, page no为0x00000005, 也就是<strong>page 5</strong></p>\n<ul>\n<li>第2个索引信息<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0010080: .... .... ..00 0019 ffe6 8000 0153 0000</span><br><span class=\"line\">0010090: 0006 .... .... .... .... .... .... ....</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>主键id为0x80000153, 也就是339, page no为0x00000006, 也就是<strong>page 6</strong></p>\n<ul>\n<li>通过这两个索引信息, 可以知道, <strong>page 5</strong>存储着主键id从1到338的数据, <strong>page 6</strong>存储着主键id从339到999的数据</li>\n</ul>\n<ol start=\"4\">\n<li>查看<strong>page 5</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0014000: e1c0 bb7a 0000 0005 ffff ffff 0000 0006  ...z............</span><br><span class=\"line\">0014010: 0000 0000 0132 5500 45bf 0000 0000 0000  .....2U.E.......</span><br><span class=\"line\">0014020: 0000 0000 0005 0056 3a90 82a6 1d89 1d0c  .......V:.......</span><br><span class=\"line\">0014030: 0000 0005 0000 0152 0000 0000 0000 0000  .......R........</span><br><span class=\"line\">0014040: 0000 0000 0000 0000 0091 0000 0000 0000  ................</span><br><span class=\"line\">0014050: 0000 0000 0000 0000 0000 0000 0000 0100  ................</span><br><span class=\"line\">0014060: 0200 1a69 6e66 696d 756d 0003 000b 0000  ...infimum......</span><br><span class=\"line\">0014070: 7375 7072 656d 756d 0000 1000 1680 0000  supremum........</span><br><span class=\"line\">0014080: 0100 0000 001c 0582 0000 012c 0110 0000  ...........,....</span><br><span class=\"line\">0014090: 1800 1680 0000 0200 0000 001c 0481 0000  ................</span><br><span class=\"line\">00140a0: 00fa 0110 0000 2000 1680 0000 0300 0000  ...... .........</span><br><span class=\"line\">.......</span><br><span class=\"line\">.......</span><br><span class=\"line\">0017e90: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span><br><span class=\"line\">0017ea0: 0000 0000 0070 3a27 39cf 3977 391f 38c7  .....p:&apos;9.9w9.8.</span><br><span class=\"line\">0017eb0: 386f 3817 37bf 3767 370f 36b7 365f 3607  8o8.7.7g7.6.6_6.</span><br><span class=\"line\">0017ec0: 35af 3557 34ff 34a7 344f 33f7 339f 3347  5.5W4.4.4O3.3.3G</span><br><span class=\"line\">0017ed0: 32ef 3297 323f 31e7 318f 3137 30df 3087  2.2.2?1.1.170.0.</span><br><span class=\"line\">0017ee0: 302f 2fd7 2f7f 2f27 2ecf 2e77 2e1f 2dc7  0//././&apos;...w..-.</span><br><span class=\"line\">0017ef0: 2d6f 2d17 2cbf 2c67 2c0f 2bb7 2b5f 2b07  -o-.,.,g,.+.+_+.</span><br><span class=\"line\">0017f00: 2aaf 2a57 29ff 29a7 294f 28f7 289f 2847  *.*W).).)O(.(.(G</span><br><span class=\"line\">0017f10: 27ef 2797 273f 26e7 268f 2637 25df 2587  &apos;.&apos;.&apos;?&amp;.&amp;.&amp;7%.%.</span><br><span class=\"line\">0017f20: 252f 24d7 247f 2427 23cf 2377 231f 22c7  %/$.$.$&apos;#.#w#.&quot;.</span><br><span class=\"line\">0017f30: 226f 2217 21bf 2167 210f 20b7 205f 2007  &quot;o&quot;.!.!g!. . _ .</span><br><span class=\"line\">0017f40: 1faf 1f57 1eff 1ea7 1e4f 1df7 0070 1d47  ...W.....O...p.G</span><br><span class=\"line\">0017f50: 1cef 1c97 1c3f 1be7 1b8f 1b37 1adf 1a87  .....?.....7....</span><br><span class=\"line\">0017f60: 1a2f 19d7 197f 1927 18cf 1877 181f 17c7  ./.....&apos;...w....</span><br><span class=\"line\">0017f70: 176f 1717 16bf 1667 160f 15b7 155f 1507  .o.....g....._..</span><br><span class=\"line\">0017f80: 14af 1457 13ff 13a7 134f 12f7 129f 1247  ...W.....O.....G</span><br><span class=\"line\">0017f90: 11ef 1197 113f 10e7 108f 1037 0fdf 0f87  .....?.....7....</span><br><span class=\"line\">0017fa0: 0f2f 0ed7 0e7f 0e27 0dcf 0d77 0d1f 0cc7  ./.....&apos;...w....</span><br><span class=\"line\">0017fb0: 0c6f 0c17 0bbf 0b67 0b0f 0ab7 0a5f 0a07  .o.....g....._..</span><br><span class=\"line\">0017fc0: 09af 0957 08ff 08a7 084f 07f7 079f 0747  ...W.....O.....G</span><br><span class=\"line\">0017fd0: 06ef 0697 063f 05e7 058f 0537 04df 0487  .....?.....7....</span><br><span class=\"line\">0017fe0: 042f 03d7 037f 0327 02cf 0277 021f 01c7  ./.....&apos;...w....</span><br><span class=\"line\">0017ff0: 016f 0117 00bf 0063 e1c0 bb7a 0132 5500  .o.....c...z.2U.</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>注意页尾部包含page directory, slots的个数可以从page header中读取</li>\n<li>File Header中的FIL_PAGE_NEXT字段, 值为0x00000006, 也就是page no为6的页。</li>\n</ul>\n<ol start=\"5\">\n<li>查看<strong>page 6</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0018000: 2ddb 788c 0000 0006 0000 0005 ffff ffff  -.x.............</span><br><span class=\"line\">0018010: 0000 0000 0133 f431 45bf 0000 0000 0000  .....3.1E.......</span><br><span class=\"line\">0018020: 0000 0000 0005 00a6 3946 8297 0000 0000  ........9F......</span><br><span class=\"line\">0018030: 3935 0002 0142 0295 0000 0000 0000 0000  95...B..........</span><br><span class=\"line\">0018040: 0000 0000 0000 0000 0091 0000 0000 0000  ................</span><br><span class=\"line\">0018050: 0000 0000 0000 0000 0000 0000 0000 0100  ................</span><br><span class=\"line\">0018060: 0200 1a69 6e66 696d 756d 0006 000b 0000  ...infimum......</span><br><span class=\"line\">0018070: 7375 7072 656d 756d 0000 1000 1680 0001  supremum........</span><br><span class=\"line\">0018080: 5300 0000 001d 6d81 0000 00a3 0110 0000  S.....m.........</span><br><span class=\"line\">.......</span><br><span class=\"line\">.......</span><br><span class=\"line\">001bea0: 0000 0000 0000 0000 0000 0000 0070 38c7  .............p8.</span><br><span class=\"line\">001beb0: 386f 3817 37bf 3767 370f 36b7 365f 3607  8o8.7.7g7.6.6_6.</span><br><span class=\"line\">001bec0: 35af 3557 34ff 34a7 344f 33f7 339f 3347  5.5W4.4.4O3.3.3G</span><br><span class=\"line\">001bed0: 32ef 3297 323f 31e7 318f 3137 30df 3087  2.2.2?1.1.170.0.</span><br><span class=\"line\">001bee0: 302f 2fd7 2f7f 2f27 2ecf 2e77 2e1f 2dc7  0//././&apos;...w..-.</span><br><span class=\"line\">001bef0: 2d6f 2d17 2cbf 2c67 2c0f 2bb7 2b5f 2b07  -o-.,.,g,.+.+_+.</span><br><span class=\"line\">001bf00: 2aaf 2a57 29ff 29a7 294f 28f7 289f 2847  *.*W).).)O(.(.(G</span><br><span class=\"line\">001bf10: 27ef 2797 273f 26e7 268f 2637 25df 2587  &apos;.&apos;.&apos;?&amp;.&amp;.&amp;7%.%.</span><br><span class=\"line\">001bf20: 252f 24d7 247f 2427 23cf 2377 231f 22c7  %/$.$.$&apos;#.#w#.&quot;.</span><br><span class=\"line\">001bf30: 226f 2217 21bf 2167 210f 20b7 205f 2007  &quot;o&quot;.!.!g!. . _ .</span><br><span class=\"line\">001bf40: 1faf 1f57 1eff 1ea7 1e4f 1df7 1d9f 1d47  ...W.....O.....G</span><br><span class=\"line\">001bf50: 1cef 1c97 1c3f 1be7 1b8f 1b37 1adf 1a87  .....?.....7....</span><br><span class=\"line\">001bf60: 1a2f 19d7 197f 1927 18cf 1877 181f 17c7  ./.....&apos;...w....</span><br><span class=\"line\">001bf70: 176f 1717 16bf 1667 160f 15b7 155f 1507  .o.....g....._..</span><br><span class=\"line\">001bf80: 14af 1457 13ff 13a7 134f 12f7 129f 1247  ...W.....O.....G</span><br><span class=\"line\">001bf90: 11ef 1197 113f 10e7 108f 1037 0fdf 0f87  .....?.....7....</span><br><span class=\"line\">001bfa0: 0f2f 0ed7 0e7f 0e27 0dcf 0d77 0d1f 0cc7  ./.....&apos;...w....</span><br><span class=\"line\">001bfb0: 0c6f 0c17 0bbf 0b67 0b0f 0ab7 0a5f 0a07  .o.....g....._..</span><br><span class=\"line\">001bfc0: 09af 0957 08ff 08a7 084f 07f7 079f 0747  ...W.....O.....G</span><br><span class=\"line\">001bfd0: 06ef 0697 063f 05e7 058f 0537 04df 0487  .....?.....7....</span><br><span class=\"line\">001bfe0: 042f 03d7 037f 0327 02cf 0277 021f 01c7  ./.....&apos;...w....</span><br><span class=\"line\">001bff0: 016f 0117 00bf 0063 2ddb 788c 0133 f431  .o.....c-.x..3.1</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>注意File Header中的FIL_PAGE_PREV字段, 值为0x00000005, 也就是page no为5的页。</li>\n<li>结合page 5可以看出, 叶子节点的两个页通过链表进行链接, 每个页内的数据通过记录头中的next_record字段进行链接。</li>\n</ul>\n<ol start=\"6\">\n<li>存储结构图如下,<br><img src=\"https://picturestore.nos-eastchina1.126.net/mysql/innodb%E6%95%B0%E6%8D%AE%E9%A1%B5%E5%AD%98%E5%82%A8%E7%A4%BA%E4%BE%8B2.jpg\" alt=\"image\"></li>\n</ol>\n<ol start=\"7\">\n<li>小结</li>\n</ol>\n<ul>\n<li>对于单页存储不了的情况, 需要进行页分裂, 此时B+树会有多层结构, 最低层为叶子节点, 存储了具体的数据, 上面是索引节点, 只存储主键以及下一层节点所在的页信息</li>\n</ul>\n<h2 id=\"五-总结与思考\"><a href=\"#五-总结与思考\" class=\"headerlink\" title=\"五. 总结与思考\"></a>五. 总结与思考</h2><p>本文介绍了innodb的数据页存储, 以实例的方式讲解了innodb存储引擎如何存储一个表中数据的。但是我们仍然有很多问题没有给出答案,</p>\n<ol>\n<li>查找行记录时, 需要找到某个索引的root page, 这个信息是存储在哪里的?</li>\n<li>我们没有介绍段和区的相关内容, 这些在InnoDB数据存储时是如何使用的?</li>\n<li>我们查看数据时, 都是直接查看磁盘文件, 内存中的页与磁盘中的页有何区别, 内存中的脏页又是如何刷新到磁盘的?</li>\n</ol>\n<p>InnoDB存储引擎较为复杂, 不可能一次性将全部内容学会, 我们不妨每次带入一个问题, 深入寻找这个问题的答案, 关于这些问题, 我会在后续文章中再逐步介绍。</p>\n<h2 id=\"六-参考\"><a href=\"#六-参考\" class=\"headerlink\" title=\"六. 参考\"></a>六. 参考</h2><ol>\n<li>&lt;&lt;Mysql技术内幕 InnoDB存储引擎&gt;&gt;</li>\n<li>淘宝数据库内核月报</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-简介\"><a href=\"#一-简介\" class=\"headerlink\" title=\"一. 简介\"></a>一. 简介</h2><ol>\n<li>Mysql是目前最为流行的关系型数据库管理系统, 具有体积小、速度快、开放源码等优势。InnoDB是Mysql使用最广泛的存储引擎, InnoDB进行了行锁设计, 支持MVCC, 提供一致性非锁定读。学习InnoDB数据页存储, 能够让我们更加深入的理解InnoDB的一些特性。</li>\n<li>程序 = 数据结构 + 算法, 对于Mysql而言也是如此。由于数据持久化的需要, Mysql的数据不仅存储在内存中, 也会持久化到文件中, 存储结构如下图,<br><img src=\"https://picturestore.nos-eastchina1.126.net/mysql/Mysql%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E6%A6%82%E8%BF%B0.jpg\" alt=\"image\"></li>\n</ol>\n<ul>\n<li>从磁盘中, 我们可以很容易的看到持久化的各个文件。</li>\n<li>磁盘中的文件需要加载到内存中才能被程序使用, 很明显, 不可能将所有磁盘文件都加载到内存, 当内存中的数据发生更改后, 也需要刷新到磁盘文件中, 什么时候刷新, 怎么刷新, 这些都是Mysql需要考虑的问题, 但是这些内容不是本文的重点, 我们这里稍加了解即可。</li>\n<li><strong>本文的重点是学习数据页的存储, 这些数据页可能存在与系统表空间, 独立表空间或者临时表空间。可以看到, 这些只是图中的一小部分。</strong></li>\n</ul>\n<ol start=\"3\">\n<li>学习之前, 我们先考虑几个问题,</li>\n</ol>\n<ul>\n<li>无论是内存存储还是磁盘存储, 都离不开内存管理, InnoDB是如何划分内存以及如何管理内存的?</li>\n<li>InnoDB使用B+树存储我们表中的数据, B+树索引节点以及叶子节点应该需要存储哪些数据? 又是怎么存储的?</li>\n<li>我们在使用时, 创建了数据库, 数据表, 这些元数据是如何存储的, 查询某个表时, 如何根据元数据找到表的索引, 如何选择索引, 选择索引后, 如何定位到索引的根节点(root page)? 找到跟节点后, 又是如何一步步找到某个具体数据的?</li>\n</ul>\n<ol start=\"4\">\n<li>说明</li>\n</ol>\n<ul>\n<li>Mysql版本: 8.0.12-debug</li>\n<li>存储引擎使用InnoDB</li>\n<li>我们会用到xxd命令, 使用xxd(或者hexdump)可以以十六进制的方式查看文件。</li>\n</ul>\n<h2 id=\"二-InnoDB存储结构\"><a href=\"#二-InnoDB存储结构\" class=\"headerlink\" title=\"二. InnoDB存储结构\"></a>二. InnoDB存储结构</h2><p>InnoDB存储结构图如下所示, 我们这里只做简要的介绍, 更多细节我们将在后续的文章中再进行详细阐述,</p>\n<p><img src=\"https://picturestore.nos-eastchina1.126.net/mysql/%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png\" alt=\"image\"></p>\n<ol>\n<li>表空间(tablespace)可以认为是InnoDB存储引擎存储结构的最高层, 所有数据都在表空间中, 除了共享表空间外, 每个表可以创建独立表空间, 具体参数是由innodb_file_per_table参数决定, 表空间由各种段组成。</li>\n<li>常见的段(segment)有数据段, 回滚段, 索引段。innodb中数据段就是B+树的叶子节点, 索引段就是B+树中的非叶子节点。</li>\n<li>段是由区(extent)组成, 默认情况下区的大小是1MB, InnoDB默认页大小为16KB, 所以1个区是由16个连续页组成。</li>\n<li>innodb默认页(page)大小是16KB, 也可以通过innodb_page_size进行控制。</li>\n<li>innodb存储是面向行(row)的, 行的存储格式主要有compact、redundant、compressed、dynamic。</li>\n</ol>\n<h2 id=\"三-数据页存储\"><a href=\"#三-数据页存储\" class=\"headerlink\" title=\"三. 数据页存储\"></a>三. 数据页存储</h2><h3 id=\"3-1-独立表空间\"><a href=\"#3-1-独立表空间\" class=\"headerlink\" title=\"3.1 独立表空间\"></a>3.1 独立表空间</h3><p>通过innodb_file_per_table参数, 我们可以为每个表都创建一个表空间, 这个就是这个表的独立表空间, 这个表的索引段, 数据段都会存储在这个独立表空间中, 但是Redo log, Undo log仍然在各自的表空间中, 表空间存储如下图,</p>\n<p><img src=\"https://picturestore.nos-eastchina1.126.net/mysql/%E7%8B%AC%E7%AB%8B%E8%A1%A8%E7%A9%BA%E9%97%B4%E7%BB%93%E6%9E%84.jpg\" alt=\"image\"></p>\n<ol>\n<li>表空间的page 0是表空间的第一页, 存储了表空间的信息， 同时也用于管理前256个extent。page 16384类型为FIL_PAGE_TYPE_XDES也用于管理之后的256个extent, 以此类推, 每隔16384个页面都会需要一个FIL_PAGE_TYPE_XDES页面。</li>\n<li>page 1类型是FIL_PAGE_IBUF_BITMAP, 用于管理每个page(前256个extent的16384个页面)的change buffer(change buffer相关内容不是本文的重点, 感兴趣的读者可以查找相关资料)。与FIL_PAGE_TYPE_XDES类似, 每隔16384个页面都需要一个FIL_PAGE_IBUF_BITMAP页面。</li>\n<li>page 2类型为FIL_PAGE_INODE, 用于管理segment。</li>\n<li>page 3类型为FIL_PAGE_SDI, 存储Serialized Dictionary Information(SDI, 词典序列化信息), 存储了这个表空间的一些数据字典(Data Dictionary)信息。</li>\n<li>page 4一般就是这个表主键索引的root page。</li>\n</ol>\n<h3 id=\"3-2-页存储\"><a href=\"#3-2-页存储\" class=\"headerlink\" title=\"3.2 页存储\"></a>3.2 页存储</h3><p>InnoDB的页存储结构如下, 每页都是由3部分组成, File Header(38字节)、File Body、File Trailer(8字节), 不同页的File Body存储的内容不同,</p>\n<p><img src=\"https://picturestore.nos-eastchina1.126.net/mysql/innodb%E9%A1%B5%E5%AD%98%E5%82%A8.jpg\" alt=\"image\"></p>\n<ol>\n<li>File Header</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>大小</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FIL_PAGE_SPACE_OR_CHKSUM</td>\n<td>4字节</td>\n<td>页的校验码</td>\n</tr>\n<tr>\n<td>FIL_PAGE_OFFSET</td>\n<td>4字节</td>\n<td>表空间中页的便宜量</td>\n</tr>\n<tr>\n<td>FIL_PAGE_PREV</td>\n<td>4字节</td>\n<td>上一页</td>\n</tr>\n<tr>\n<td>FIL_PAGE_NEXT</td>\n<td>4字节</td>\n<td>下一页</td>\n</tr>\n<tr>\n<td>FIL_PAGE_LSN</td>\n<td>8字节</td>\n<td>页面被最后修改时对应的日志序列位置</td>\n</tr>\n<tr>\n<td>FIL_PAGE_TYPE</td>\n<td>2字节</td>\n<td>页面类型</td>\n</tr>\n<tr>\n<td>FIL_PAGE_FILE_FLUSH_LSN</td>\n<td>8字节</td>\n<td>系统表空间中有定义, 代表文件更新到的LSN</td>\n</tr>\n<tr>\n<td>FIL_PAGE_ARCH_LOG_NO_OR_SPACE_ID</td>\n<td>4字节</td>\n<td>页面所属表空间id</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li>File Type</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FIL_PAGE_TYPE_ALLOCATED</td>\n<td>0x0000</td>\n<td>未使用</td>\n</tr>\n<tr>\n<td>FIL_PAGE_UNDO_LOG</td>\n<td>0x0002</td>\n<td>undo log</td>\n</tr>\n<tr>\n<td>FIL_PAGE_INODE</td>\n<td>0x0003</td>\n<td>存储了段信息</td>\n</tr>\n<tr>\n<td>FIL_PAGE_IBUF_FREE_LIST</td>\n<td>0x0004</td>\n<td>Insert Buffer空闲列表</td>\n</tr>\n<tr>\n<td>FIL_PAGE_IBUF_BITMAP</td>\n<td>0x0005</td>\n<td>Insert Buffer位图</td>\n</tr>\n<tr>\n<td>FIL_PAGE_TYPE_SYS</td>\n<td>0x0006</td>\n<td>系统页</td>\n</tr>\n<tr>\n<td>FIL_PAGE_TYPE_TRX_SYS</td>\n<td>0x0007</td>\n<td>事务系统数据</td>\n</tr>\n<tr>\n<td>FIL_PAGE_TYPE_FSP_HDR</td>\n<td>0x0008</td>\n<td>表空间头部信息</td>\n</tr>\n<tr>\n<td>FIL_PAGE_TYPE_XDES</td>\n<td>0x0009</td>\n<td>扩展描述页</td>\n</tr>\n<tr>\n<td>FIL_PAGE_TYPE_BLOB</td>\n<td>0x000A</td>\n<td>BLOB页</td>\n</tr>\n<tr>\n<td>FIL_PAGE_SDI</td>\n<td>0x45bd</td>\n<td>SDI索引页</td>\n</tr>\n<tr>\n<td>FIL_PAGE_RTREE</td>\n<td>0x45be</td>\n<td>R-tree</td>\n</tr>\n<tr>\n<td>FIL_PAGE_INDEX</td>\n<td>0x45bf</td>\n<td>B-tree</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-3-数据页\"><a href=\"#3-3-数据页\" class=\"headerlink\" title=\"3.3 数据页\"></a>3.3 数据页</h3><p>看完InnoDB页结构后, 我们看下数据页的存储,</p>\n<p><img src=\"https://picturestore.nos-eastchina1.126.net/mysql/%E6%95%B0%E6%8D%AE%E9%A1%B5%E7%BB%93%E6%9E%84.jpg\" alt=\"image\"></p>\n<ol>\n<li>Page Header</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>大小</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PAGE_N_DIR_SLOTS</td>\n<td>2字节</td>\n<td>page directory中slot的个数</td>\n</tr>\n<tr>\n<td>PAGE_HEAP_TOP</td>\n<td>2字节</td>\n<td>堆中第一个记录指针</td>\n</tr>\n<tr>\n<td>PAGE_N_HEAP</td>\n<td>2字节</td>\n<td>堆中记录数</td>\n</tr>\n<tr>\n<td>PAGE_FREE</td>\n<td>2字节</td>\n<td>指向空闲空间首地址</td>\n</tr>\n<tr>\n<td>PAGE_GARBAGE</td>\n<td>2字节</td>\n<td>已经删除的记录数</td>\n</tr>\n<tr>\n<td>PAGE_LAST_INSERT</td>\n<td>2字节</td>\n<td>最后插入位置</td>\n</tr>\n<tr>\n<td>PAGE_DIRECTION</td>\n<td>2字节</td>\n<td>最后插入方向</td>\n</tr>\n<tr>\n<td>PAGE_N_DIRECTION</td>\n<td>2字节</td>\n<td>一个插入方向连续插入记录数</td>\n</tr>\n<tr>\n<td>PAGE_N_RECS</td>\n<td>2字节</td>\n<td>这个页的记录总数</td>\n</tr>\n<tr>\n<td>PAGE_MAX_TRX_ID</td>\n<td>8字节</td>\n<td>修改当前页的最大事务ID</td>\n</tr>\n<tr>\n<td>PAGE_LEVEL</td>\n<td>2字节</td>\n<td>当前页在索引中的层, 叶子节点为0x00</td>\n</tr>\n<tr>\n<td>PAGE_INDEX_ID</td>\n<td>8字节</td>\n<td>索引ID</td>\n</tr>\n<tr>\n<td>PAGE_BTR_SEG_LEAF</td>\n<td>10字节</td>\n<td>非叶子节点所在段, 仅在B+树的root页中有定义</td>\n</tr>\n<tr>\n<td>PAGE_BTR_SEG_TOP</td>\n<td>10字节</td>\n<td>数据页所在段, 仅在B+树的root页中有定义</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li>Infimun &amp; Supermum<br>虚拟记录, Infimum为13字节, Supermum也是13字节。具体存储内容, 我们会在下面进行介绍。</li>\n</ol>\n<ol start=\"3\">\n<li>Page Directory</li>\n</ol>\n<ul>\n<li>页目录, 因为行记录在数据页中以链表的形式链接, 但是在查找记录时, 链表查找速度很慢, 为了加速记录查找, 创建页目录, 页目录可以用于二分查找。<strong>每个目录项占用2个字节, 从页尾部开始, 倒序存储。</strong></li>\n<li>为了便于理解Page Directory, 我们这里举一个例子, 如果表中存储了200条数据, 数据通过链表的方式进行链接, 我们在查询时, 需要遍历整个链表才能找到数据, 这样无疑比较慢。我们可以通过建立索引的方式, 加快查找速度, 我们可以将这200条记录的主键按照顺序进行存储, InnoDB的Page Directory就是这个思路, 但是并不是存储了主键的值, 而是存储了对应记录的位置, 并且不是将每个行记录都存储在Page Directory中, 只是建立一个稀疏索引。</li>\n</ul>\n<h3 id=\"3-4-innodb行存储\"><a href=\"#3-4-innodb行存储\" class=\"headerlink\" title=\"3.4 innodb行存储\"></a>3.4 innodb行存储</h3><p>限于篇幅, 我们这里主要介绍compact格式的行记录存储, 存储格式如下图,</p>\n<p><img src=\"https://picturestore.nos-eastchina1.126.net/mysql/compact%E8%A1%8C%E8%AE%B0%E5%BD%95%E6%A0%BC%E5%BC%8F.jpg\" alt=\"image\"></p>\n<ol>\n<li>从图中可以看出, 每个记录行至少占有5字节(记录头) + 主键长度 + 6字节(事务ID) + 7字节(回滚指针)</li>\n<li>我们需要注意记录头中的next_record字段, 这个字段占有16bit, 也就是2个字节, 通过这个字段, InnoDB将一个页中的所有记录以链表的方式链接到一起。</li>\n</ol>\n<h2 id=\"四-实例讲解\"><a href=\"#四-实例讲解\" class=\"headerlink\" title=\"四. 实例讲解\"></a>四. 实例讲解</h2><p>为了便于大家理解, 这部分我们给出一些实例,</p>\n<ol>\n<li>本节举例说明InnoDB的一个表是如何存储的, 主要介绍两种情况, 一种情况是表中数据很少, 另一种情况是表中数据比较多, 一页已经存储不了的情况。</li>\n<li>表结构定义,<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> <span class=\"string\">`t`</span> (<span class=\"string\">`id`</span> <span class=\"built_in\">int</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>, primary <span class=\"keyword\">key</span>(<span class=\"string\">`id`</span>)) <span class=\"keyword\">engine</span>=<span class=\"keyword\">InnoDB</span> ROW_FORMAT=<span class=\"keyword\">Compact</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>为了更容易理解, 我们这里只创建了一个非常简单的表, 也只有一个主键索引。主键类型为int, 占用4个字节。</li>\n<li>创建表后, 可以在相应的目录下看到t.ibd文件, 这里我是在test数据库下创建的这个表, 所以也就在test目录下。</li>\n<li>从磁盘文件中, 我们可以看到, t.ibd文件大小为112KB, 也就是7*16KB, 也就是7个page, 也就意味着, 创建表后, InnoDB默认初始化了7个page。</li>\n<li>我们的表中没有变长字段, 主键长度为4字节, 所以单个记录的长度为5(记录头) + 4(主键ID) + 6(事务ID) + 7(回滚指针) = 22字节</li>\n</ul>\n<ol start=\"3\">\n<li>B+树示例<br>InnoDB数据存储是通过B+树组织的, 一个很简单的B+树如下所示,</li>\n</ol>\n<p><img src=\"https://picturestore.nos-eastchina1.126.net/mysql/B%2B%E6%A0%91%E7%A4%BA%E4%BE%8B.jpg\" alt=\"image\"></p>\n<ul>\n<li>B+树的性质有很多, 其增删查改操作较常规的二叉树更复杂一些,  感兴趣的可以查询相关资料, 这里有个基本概念即可。</li>\n</ul>\n<ol start=\"4\">\n<li>后续如果没有特殊说明, 表空间第一个页是page 0, 第二页是page 1, 以此类推。</li>\n</ol>\n<h3 id=\"4-1-单页存储\"><a href=\"#4-1-单页存储\" class=\"headerlink\" title=\"4.1 单页存储\"></a>4.1 单页存储</h3><p>我们首先看下当表中数据很少的时候, 数据是如何组织的, 具体操作步骤如下,</p>\n<ol>\n<li>我们向表中插入2条记录,<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t <span class=\"keyword\">values</span> (<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t <span class=\"keyword\">values</span> (<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>这里注意我们先插入主键值为2的行记录, 再插入主键值为1的行记录。</li>\n</ul>\n<ol start=\"2\">\n<li><p>通过xxd将t.ibd以16进制表示, 执行命令xxd t.idb t.txt, 也可以使用hexdump命令查看。</p>\n</li>\n<li><p>查看t.txt中的内容, 这里我们查看<strong>page 4</strong>的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0010000: a76e 6043 0000 0004 ffff ffff ffff ffff  .n`C............</span><br><span class=\"line\">0010010: 0000 0000 012e 6d9d 45bf 0000 0000 0000  ......m.E.......</span><br><span class=\"line\">0010020: 0000 0000 0005 0002 00a4 8004 0000 0000  ................</span><br><span class=\"line\">0010030: 0093 0001 0001 0002 0000 0000 0000 0000  ................</span><br><span class=\"line\">0010040: 0000 0000 0000 0000 0091 0000 0005 0000  ................</span><br><span class=\"line\">0010050: 0002 0272 0000 0005 0000 0002 01b2 0100  ...r............</span><br><span class=\"line\">0010060: 0200 3069 6e66 696d 756d 0003 000b 0000  ..0infimum......</span><br><span class=\"line\">0010070: 7375 7072 656d 756d 0000 10ff f380 0000  supremum........</span><br><span class=\"line\">0010080: 0200 0000 001c 0481 0000 00fa 0110 0000  ................</span><br><span class=\"line\">0010090: 18ff ea80 0000 0100 0000 001c 0582 0000  ................</span><br><span class=\"line\">00100a0: 012c 0110 0000 0000 0000 0000 0000 0000  .,..............</span><br><span class=\"line\">00100b0: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span><br><span class=\"line\">......</span><br><span class=\"line\">......</span><br><span class=\"line\">0013fe0: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span><br><span class=\"line\">0013ff0: 0000 0000 0070 0063 a76e 6043 012e 6d9d  .....p.c.n`C..m.</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>前38字节是文件头[0010000,0010026]</li>\n<li>之后56字节是数据页头部[0010027,001005d]</li>\n<li>之后的26字节是最小记录[001005e, 001006a], 最大记录[001006b, 0010077], 这里可以看到最小记录的n_owns值为1(只有自身1条记录), 最大记录的n_owns值为3(除了自身外, 还有我们插入的两条记录)</li>\n<li><p>紧接着是第1条插入记录[0010078, 001008d]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0010070: .... .... .... .... 0000 10ff f380 0000</span><br><span class=\"line\">0010080: 0200 0000 001c 0481 0000 00fa 0110 ....</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最后是刚才插入的第2条记录[001008e, 00100a3]</p>\n</li>\n<li>对于int类型, innodb存储方式与常规的方式不同, [0x00000000, 0x7fffffff]代表[-2147483648, -1], [0x80000000, 0xffffffff]代表[0, 21473647]。</li>\n</ul>\n<ol start=\"4\">\n<li><p>存储结构如下图<br><img src=\"https://picturestore.nos-eastchina1.126.net/mysql/innodb%E6%95%B0%E6%8D%AE%E9%A1%B5%E5%AD%98%E5%82%A8%E7%A4%BA%E4%BE%8B1.jpg\" alt=\"image\"></p>\n</li>\n<li><p>这里示例下如何从最小记录查找到最大记录</p>\n</li>\n</ol>\n<ul>\n<li>首先定位到最小记录的位置, 最小记录占有5字节(记录头) + 8字节(内容) = 13字节, 最小记录所在的位置为001005e, 根据最小记录的记录头信息, 可以计算出下一个记录所在位置001005e + 0030 = 001008e</li>\n<li>001008e是主键为1的记录所在位置, 接着计算下一个记录的位置001008e + ffea = 0010078, 这里需要注意的是, 加法运算时, 只保留后面4位的结果, 可以看到这个位置就是我们第一次插入的主键为2的记录</li>\n<li>之后, 继续计算下一个记录所在位置, 0010078 + fff3 = 1006b, 这个就是最大记录所在的位置</li>\n<li>在查找某个具体的行记录时, 可以先利用page directory进行近似的二分查找, 之后再进行链表查找。</li>\n</ul>\n<ol start=\"6\">\n<li>page directory</li>\n</ol>\n<ul>\n<li><p>页尾部包含两个slots</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0013ff0: 0000 0000 0070 0063 .... .... .... ....</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>0063是第1个slot的位置, 相应的记录所在位置为0010063, 也就是最小记录。[001005e, 0010062]这个是最小记录的记录头, [0010063, 001006a]是最小记录的内容。</p>\n</li>\n<li>0070是第2个slot的位置, 相应的记录所在位置为0010070, 这个是最大记录所在的内容开始位置。</li>\n</ul>\n<ol start=\"7\">\n<li>小结</li>\n</ol>\n<ul>\n<li>可以看到, 从最小记录开始, 到最大记录结束, 数据按照主键顺序以链表的方式进行链接。</li>\n<li>行数据的存储是按照插入的顺序存储的, 不是按照主键顺序存储, 数据删除后, 释放的空间可以复用, 关于复用部分的细节, 后续文章再进行详细介绍。</li>\n</ul>\n<h3 id=\"4-2-多页存储\"><a href=\"#4-2-多页存储\" class=\"headerlink\" title=\"4.2 多页存储\"></a>4.2 多页存储</h3><p>在4.1的基础上, 我们继续插入数据, 操作步骤如下,</p>\n<ol>\n<li>我们通过脚本向表中继续插入数据<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$servername = <span class=\"string\">\"localhost:8083\"</span>;</span><br><span class=\"line\">$username = <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">$password = <span class=\"string\">\"password\"</span>;</span><br><span class=\"line\">$dbname = <span class=\"string\">\"test\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    $conn = <span class=\"keyword\">new</span> PDO(<span class=\"string\">\"mysql:host=$servername;dbname=$dbname\"</span>, $username, $password);</span><br><span class=\"line\">    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>($i = <span class=\"number\">3</span>; $i &lt; <span class=\"number\">1000</span>; $i++)&#123;</span><br><span class=\"line\">    \t$sql = <span class=\"string\">\"INSERT INTO t VALUES (\"</span> . strval($i) . <span class=\"string\">\")\"</span>;</span><br><span class=\"line\">        $conn-&gt;exec($sql);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(PDOException $e)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $sql . <span class=\"string\">\"&lt;br&gt;\"</span> . $e-&gt;getMessage();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>之前表中已经插入2条记录, 这里又插入997条记录, 所以表中现在一共999条记录, 主键id从1到999。</li>\n<li>单条记录需要占用22字节, 可以知道, 此时, 单个数据页不能存储全部数据。</li>\n</ul>\n<ol start=\"2\">\n<li>以16进制查看此时的t.ibd文件: xxd t.ibd t.txt</li>\n<li>查看t.txt内容, 首先查看<strong>page 4</strong>的内容<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0010000: df67 193d 0000 0004 ffff ffff ffff ffff  .g.=............</span><br><span class=\"line\">0010010: 0000 0000 0132 5500 45bf 0000 0000 0000  .....2U.E.......</span><br><span class=\"line\">0010020: 0000 0000 0005 0002 0092 8004 0000 0000  ................</span><br><span class=\"line\">0010030: 008a 0002 0001 0002 0000 0000 0000 0000  ................</span><br><span class=\"line\">0010040: 0001 0000 0000 0000 0091 0000 0005 0000  ................</span><br><span class=\"line\">0010050: 0002 0272 0000 0005 0000 0002 01b2 0100  ...r............</span><br><span class=\"line\">0010060: 0200 1a69 6e66 696d 756d 0003 000b 0000  ...infimum......</span><br><span class=\"line\">0010070: 7375 7072 656d 756d 1000 1100 0d80 0000  supremum........</span><br><span class=\"line\">0010080: 0100 0000 0500 0019 ffe6 8000 0153 0000  .............S..</span><br><span class=\"line\">0010090: 0006 0000 0000 0000 0000 0000 0000 0000  ................</span><br><span class=\"line\">.......</span><br><span class=\"line\">.......</span><br><span class=\"line\">0013fe0: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span><br><span class=\"line\">0013ff0: 0000 0000 0070 0063 df67 193d 0132 5500  .....p.c.g.=.2U.</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>可以看到, 第5页, 目前只有少量内容, 因为此时第5页是索引页, 是B+树的根, 没有存储具体的数据, 只存储了主键索引。</li>\n<li>File Header, Page Header, Infimum &amp; Supremum跟之前基本类似, 这里就不再详细介绍。</li>\n<li>单个索引需要占用5字节(记录头) + 4字节(主键) + 4字节(记录所在页) = 13字节。</li>\n<li>第1个索引信息<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0010070: .... .... .... .... 1000 1100 0d80 0000</span><br><span class=\"line\">0010080: 0100 0000 05.. .... .... .... .... ....</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>主键id为0x80000001, 也就是1, page no为0x00000005, 也就是<strong>page 5</strong></p>\n<ul>\n<li>第2个索引信息<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0010080: .... .... ..00 0019 ffe6 8000 0153 0000</span><br><span class=\"line\">0010090: 0006 .... .... .... .... .... .... ....</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>主键id为0x80000153, 也就是339, page no为0x00000006, 也就是<strong>page 6</strong></p>\n<ul>\n<li>通过这两个索引信息, 可以知道, <strong>page 5</strong>存储着主键id从1到338的数据, <strong>page 6</strong>存储着主键id从339到999的数据</li>\n</ul>\n<ol start=\"4\">\n<li>查看<strong>page 5</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0014000: e1c0 bb7a 0000 0005 ffff ffff 0000 0006  ...z............</span><br><span class=\"line\">0014010: 0000 0000 0132 5500 45bf 0000 0000 0000  .....2U.E.......</span><br><span class=\"line\">0014020: 0000 0000 0005 0056 3a90 82a6 1d89 1d0c  .......V:.......</span><br><span class=\"line\">0014030: 0000 0005 0000 0152 0000 0000 0000 0000  .......R........</span><br><span class=\"line\">0014040: 0000 0000 0000 0000 0091 0000 0000 0000  ................</span><br><span class=\"line\">0014050: 0000 0000 0000 0000 0000 0000 0000 0100  ................</span><br><span class=\"line\">0014060: 0200 1a69 6e66 696d 756d 0003 000b 0000  ...infimum......</span><br><span class=\"line\">0014070: 7375 7072 656d 756d 0000 1000 1680 0000  supremum........</span><br><span class=\"line\">0014080: 0100 0000 001c 0582 0000 012c 0110 0000  ...........,....</span><br><span class=\"line\">0014090: 1800 1680 0000 0200 0000 001c 0481 0000  ................</span><br><span class=\"line\">00140a0: 00fa 0110 0000 2000 1680 0000 0300 0000  ...... .........</span><br><span class=\"line\">.......</span><br><span class=\"line\">.......</span><br><span class=\"line\">0017e90: 0000 0000 0000 0000 0000 0000 0000 0000  ................</span><br><span class=\"line\">0017ea0: 0000 0000 0070 3a27 39cf 3977 391f 38c7  .....p:&apos;9.9w9.8.</span><br><span class=\"line\">0017eb0: 386f 3817 37bf 3767 370f 36b7 365f 3607  8o8.7.7g7.6.6_6.</span><br><span class=\"line\">0017ec0: 35af 3557 34ff 34a7 344f 33f7 339f 3347  5.5W4.4.4O3.3.3G</span><br><span class=\"line\">0017ed0: 32ef 3297 323f 31e7 318f 3137 30df 3087  2.2.2?1.1.170.0.</span><br><span class=\"line\">0017ee0: 302f 2fd7 2f7f 2f27 2ecf 2e77 2e1f 2dc7  0//././&apos;...w..-.</span><br><span class=\"line\">0017ef0: 2d6f 2d17 2cbf 2c67 2c0f 2bb7 2b5f 2b07  -o-.,.,g,.+.+_+.</span><br><span class=\"line\">0017f00: 2aaf 2a57 29ff 29a7 294f 28f7 289f 2847  *.*W).).)O(.(.(G</span><br><span class=\"line\">0017f10: 27ef 2797 273f 26e7 268f 2637 25df 2587  &apos;.&apos;.&apos;?&amp;.&amp;.&amp;7%.%.</span><br><span class=\"line\">0017f20: 252f 24d7 247f 2427 23cf 2377 231f 22c7  %/$.$.$&apos;#.#w#.&quot;.</span><br><span class=\"line\">0017f30: 226f 2217 21bf 2167 210f 20b7 205f 2007  &quot;o&quot;.!.!g!. . _ .</span><br><span class=\"line\">0017f40: 1faf 1f57 1eff 1ea7 1e4f 1df7 0070 1d47  ...W.....O...p.G</span><br><span class=\"line\">0017f50: 1cef 1c97 1c3f 1be7 1b8f 1b37 1adf 1a87  .....?.....7....</span><br><span class=\"line\">0017f60: 1a2f 19d7 197f 1927 18cf 1877 181f 17c7  ./.....&apos;...w....</span><br><span class=\"line\">0017f70: 176f 1717 16bf 1667 160f 15b7 155f 1507  .o.....g....._..</span><br><span class=\"line\">0017f80: 14af 1457 13ff 13a7 134f 12f7 129f 1247  ...W.....O.....G</span><br><span class=\"line\">0017f90: 11ef 1197 113f 10e7 108f 1037 0fdf 0f87  .....?.....7....</span><br><span class=\"line\">0017fa0: 0f2f 0ed7 0e7f 0e27 0dcf 0d77 0d1f 0cc7  ./.....&apos;...w....</span><br><span class=\"line\">0017fb0: 0c6f 0c17 0bbf 0b67 0b0f 0ab7 0a5f 0a07  .o.....g....._..</span><br><span class=\"line\">0017fc0: 09af 0957 08ff 08a7 084f 07f7 079f 0747  ...W.....O.....G</span><br><span class=\"line\">0017fd0: 06ef 0697 063f 05e7 058f 0537 04df 0487  .....?.....7....</span><br><span class=\"line\">0017fe0: 042f 03d7 037f 0327 02cf 0277 021f 01c7  ./.....&apos;...w....</span><br><span class=\"line\">0017ff0: 016f 0117 00bf 0063 e1c0 bb7a 0132 5500  .o.....c...z.2U.</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>注意页尾部包含page directory, slots的个数可以从page header中读取</li>\n<li>File Header中的FIL_PAGE_NEXT字段, 值为0x00000006, 也就是page no为6的页。</li>\n</ul>\n<ol start=\"5\">\n<li>查看<strong>page 6</strong><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0018000: 2ddb 788c 0000 0006 0000 0005 ffff ffff  -.x.............</span><br><span class=\"line\">0018010: 0000 0000 0133 f431 45bf 0000 0000 0000  .....3.1E.......</span><br><span class=\"line\">0018020: 0000 0000 0005 00a6 3946 8297 0000 0000  ........9F......</span><br><span class=\"line\">0018030: 3935 0002 0142 0295 0000 0000 0000 0000  95...B..........</span><br><span class=\"line\">0018040: 0000 0000 0000 0000 0091 0000 0000 0000  ................</span><br><span class=\"line\">0018050: 0000 0000 0000 0000 0000 0000 0000 0100  ................</span><br><span class=\"line\">0018060: 0200 1a69 6e66 696d 756d 0006 000b 0000  ...infimum......</span><br><span class=\"line\">0018070: 7375 7072 656d 756d 0000 1000 1680 0001  supremum........</span><br><span class=\"line\">0018080: 5300 0000 001d 6d81 0000 00a3 0110 0000  S.....m.........</span><br><span class=\"line\">.......</span><br><span class=\"line\">.......</span><br><span class=\"line\">001bea0: 0000 0000 0000 0000 0000 0000 0070 38c7  .............p8.</span><br><span class=\"line\">001beb0: 386f 3817 37bf 3767 370f 36b7 365f 3607  8o8.7.7g7.6.6_6.</span><br><span class=\"line\">001bec0: 35af 3557 34ff 34a7 344f 33f7 339f 3347  5.5W4.4.4O3.3.3G</span><br><span class=\"line\">001bed0: 32ef 3297 323f 31e7 318f 3137 30df 3087  2.2.2?1.1.170.0.</span><br><span class=\"line\">001bee0: 302f 2fd7 2f7f 2f27 2ecf 2e77 2e1f 2dc7  0//././&apos;...w..-.</span><br><span class=\"line\">001bef0: 2d6f 2d17 2cbf 2c67 2c0f 2bb7 2b5f 2b07  -o-.,.,g,.+.+_+.</span><br><span class=\"line\">001bf00: 2aaf 2a57 29ff 29a7 294f 28f7 289f 2847  *.*W).).)O(.(.(G</span><br><span class=\"line\">001bf10: 27ef 2797 273f 26e7 268f 2637 25df 2587  &apos;.&apos;.&apos;?&amp;.&amp;.&amp;7%.%.</span><br><span class=\"line\">001bf20: 252f 24d7 247f 2427 23cf 2377 231f 22c7  %/$.$.$&apos;#.#w#.&quot;.</span><br><span class=\"line\">001bf30: 226f 2217 21bf 2167 210f 20b7 205f 2007  &quot;o&quot;.!.!g!. . _ .</span><br><span class=\"line\">001bf40: 1faf 1f57 1eff 1ea7 1e4f 1df7 1d9f 1d47  ...W.....O.....G</span><br><span class=\"line\">001bf50: 1cef 1c97 1c3f 1be7 1b8f 1b37 1adf 1a87  .....?.....7....</span><br><span class=\"line\">001bf60: 1a2f 19d7 197f 1927 18cf 1877 181f 17c7  ./.....&apos;...w....</span><br><span class=\"line\">001bf70: 176f 1717 16bf 1667 160f 15b7 155f 1507  .o.....g....._..</span><br><span class=\"line\">001bf80: 14af 1457 13ff 13a7 134f 12f7 129f 1247  ...W.....O.....G</span><br><span class=\"line\">001bf90: 11ef 1197 113f 10e7 108f 1037 0fdf 0f87  .....?.....7....</span><br><span class=\"line\">001bfa0: 0f2f 0ed7 0e7f 0e27 0dcf 0d77 0d1f 0cc7  ./.....&apos;...w....</span><br><span class=\"line\">001bfb0: 0c6f 0c17 0bbf 0b67 0b0f 0ab7 0a5f 0a07  .o.....g....._..</span><br><span class=\"line\">001bfc0: 09af 0957 08ff 08a7 084f 07f7 079f 0747  ...W.....O.....G</span><br><span class=\"line\">001bfd0: 06ef 0697 063f 05e7 058f 0537 04df 0487  .....?.....7....</span><br><span class=\"line\">001bfe0: 042f 03d7 037f 0327 02cf 0277 021f 01c7  ./.....&apos;...w....</span><br><span class=\"line\">001bff0: 016f 0117 00bf 0063 2ddb 788c 0133 f431  .o.....c-.x..3.1</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>注意File Header中的FIL_PAGE_PREV字段, 值为0x00000005, 也就是page no为5的页。</li>\n<li>结合page 5可以看出, 叶子节点的两个页通过链表进行链接, 每个页内的数据通过记录头中的next_record字段进行链接。</li>\n</ul>\n<ol start=\"6\">\n<li>存储结构图如下,<br><img src=\"https://picturestore.nos-eastchina1.126.net/mysql/innodb%E6%95%B0%E6%8D%AE%E9%A1%B5%E5%AD%98%E5%82%A8%E7%A4%BA%E4%BE%8B2.jpg\" alt=\"image\"></li>\n</ol>\n<ol start=\"7\">\n<li>小结</li>\n</ol>\n<ul>\n<li>对于单页存储不了的情况, 需要进行页分裂, 此时B+树会有多层结构, 最低层为叶子节点, 存储了具体的数据, 上面是索引节点, 只存储主键以及下一层节点所在的页信息</li>\n</ul>\n<h2 id=\"五-总结与思考\"><a href=\"#五-总结与思考\" class=\"headerlink\" title=\"五. 总结与思考\"></a>五. 总结与思考</h2><p>本文介绍了innodb的数据页存储, 以实例的方式讲解了innodb存储引擎如何存储一个表中数据的。但是我们仍然有很多问题没有给出答案,</p>\n<ol>\n<li>查找行记录时, 需要找到某个索引的root page, 这个信息是存储在哪里的?</li>\n<li>我们没有介绍段和区的相关内容, 这些在InnoDB数据存储时是如何使用的?</li>\n<li>我们查看数据时, 都是直接查看磁盘文件, 内存中的页与磁盘中的页有何区别, 内存中的脏页又是如何刷新到磁盘的?</li>\n</ol>\n<p>InnoDB存储引擎较为复杂, 不可能一次性将全部内容学会, 我们不妨每次带入一个问题, 深入寻找这个问题的答案, 关于这些问题, 我会在后续文章中再逐步介绍。</p>\n<h2 id=\"六-参考\"><a href=\"#六-参考\" class=\"headerlink\" title=\"六. 参考\"></a>六. 参考</h2><ol>\n<li>&lt;&lt;Mysql技术内幕 InnoDB存储引擎&gt;&gt;</li>\n<li>淘宝数据库内核月报</li>\n</ol>\n"},{"title":"水平触发与边沿触发","date":"2018-11-05T03:21:50.000Z","_content":"# 一. 基础\n## 1.1 水平触发\n1. 基本概念\n> - 读缓冲区不为空时, 读事件触发。\n> - 写缓冲区不为满时, 写事件触发。\n\n2. 处理流程\n> - accept新的连接, 监听读事件。\n> - 读事件到达, 处理读事件。\n> - 需要写入数据, 向fd中写数据, 一次无法写完, 开启写事件监听。\n> - 写事件到达, 继续写入数据, 写完后关闭写事件。\n\n3. 优缺点\n> - 不会遗漏事件, 易编程。\n> - 长连接需要写入的数据量大时, 会频繁开启关闭写事件。  \n\n## 1.2 边沿触发\n1. 基本概念\n> - 读缓冲区状态变化时, 读事件触发, 网卡接受到新数据。\n> - 写缓冲区状态变化时, 写事件触发, 网卡发出了新数据。\n\n2. 处理流程\n> - accept新的连接, 同时监听读写事件。\n> - 读事件到达, 需要一直读取数据, 直到返回EAGAIN。\n> - 写事件到达, 无数据处理则不处理, 有数据待写入则一直写入，直到写完或者返回EAGAIN。\n\n3. 优缺点\n> - 不需要频繁开启关闭事件, 效率较高。\n> - 读写事件处理不当, 可能导致事件丢失, 编程教复杂。\n\n## 1.3 选择\n1. 概述\n> - 对于读事件而言，总体而言, 采用水平触发方式较好。应用程序在读取数据时，可能会一次无法读取全部数据，边沿触发在下一次可能不会触发。如果能够保证一次读取缓存的全部数据，可以采用边沿触发，效率更高, 但同时编程复杂度也高。\n> - 对于写事件，当客户端服务端采用短连接或者采用长连接但发送的数据量比较少时(例如: Redis), 采用水平触发即可。当客户端与服务端是长连接并且数据写入的量比较大时(例如: nginx), 采用边沿触发, 因为边沿触发效率更高。\n> - 目前，linux不支持读写事件分别设置不同的触发方式，具体采用哪种方式触发，需要根据具体需求。\n\n\n2. 监听套接字事件设置\n> - 监听套接字不需要监听写事件，只需要监听读事件。\n> - 监听套接字一般采用水平触发方式。(nginx开启multi_accept时，会把监听套接字所有可读的事件全部读取，此时可以使用边沿触发。但为了保证连接不丢失，nginx仍然采用水平触发)\n\n3. 通信套接字设置\n> - redis对于与客户端通信使用的套接字默认使用水平触发。\n> - nginx对于与客户端通信使用的套接字默认采用边沿触发。\n\n\n# 二. 参考\n- https://blog.csdn.net/dongfuye/article/details/50880251\n","source":"_posts/LT-ET.md","raw":"---\ntitle: 水平触发与边沿触发\ndate: 2018-11-05 11:21:50\ncategories:\n- 网络编程\n- 基础\ntags:\n- 水平触发\n- 边沿触发\n- 网络编程\n---\n# 一. 基础\n## 1.1 水平触发\n1. 基本概念\n> - 读缓冲区不为空时, 读事件触发。\n> - 写缓冲区不为满时, 写事件触发。\n\n2. 处理流程\n> - accept新的连接, 监听读事件。\n> - 读事件到达, 处理读事件。\n> - 需要写入数据, 向fd中写数据, 一次无法写完, 开启写事件监听。\n> - 写事件到达, 继续写入数据, 写完后关闭写事件。\n\n3. 优缺点\n> - 不会遗漏事件, 易编程。\n> - 长连接需要写入的数据量大时, 会频繁开启关闭写事件。  \n\n## 1.2 边沿触发\n1. 基本概念\n> - 读缓冲区状态变化时, 读事件触发, 网卡接受到新数据。\n> - 写缓冲区状态变化时, 写事件触发, 网卡发出了新数据。\n\n2. 处理流程\n> - accept新的连接, 同时监听读写事件。\n> - 读事件到达, 需要一直读取数据, 直到返回EAGAIN。\n> - 写事件到达, 无数据处理则不处理, 有数据待写入则一直写入，直到写完或者返回EAGAIN。\n\n3. 优缺点\n> - 不需要频繁开启关闭事件, 效率较高。\n> - 读写事件处理不当, 可能导致事件丢失, 编程教复杂。\n\n## 1.3 选择\n1. 概述\n> - 对于读事件而言，总体而言, 采用水平触发方式较好。应用程序在读取数据时，可能会一次无法读取全部数据，边沿触发在下一次可能不会触发。如果能够保证一次读取缓存的全部数据，可以采用边沿触发，效率更高, 但同时编程复杂度也高。\n> - 对于写事件，当客户端服务端采用短连接或者采用长连接但发送的数据量比较少时(例如: Redis), 采用水平触发即可。当客户端与服务端是长连接并且数据写入的量比较大时(例如: nginx), 采用边沿触发, 因为边沿触发效率更高。\n> - 目前，linux不支持读写事件分别设置不同的触发方式，具体采用哪种方式触发，需要根据具体需求。\n\n\n2. 监听套接字事件设置\n> - 监听套接字不需要监听写事件，只需要监听读事件。\n> - 监听套接字一般采用水平触发方式。(nginx开启multi_accept时，会把监听套接字所有可读的事件全部读取，此时可以使用边沿触发。但为了保证连接不丢失，nginx仍然采用水平触发)\n\n3. 通信套接字设置\n> - redis对于与客户端通信使用的套接字默认使用水平触发。\n> - nginx对于与客户端通信使用的套接字默认采用边沿触发。\n\n\n# 二. 参考\n- https://blog.csdn.net/dongfuye/article/details/50880251\n","slug":"LT-ET","published":1,"updated":"2019-05-27T01:49:32.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg5wpdur00046331zehj9egb","content":"<h1 id=\"一-基础\"><a href=\"#一-基础\" class=\"headerlink\" title=\"一. 基础\"></a>一. 基础</h1><h2 id=\"1-1-水平触发\"><a href=\"#1-1-水平触发\" class=\"headerlink\" title=\"1.1 水平触发\"></a>1.1 水平触发</h2><ol>\n<li><p>基本概念</p>\n<blockquote>\n<ul>\n<li>读缓冲区不为空时, 读事件触发。</li>\n<li>写缓冲区不为满时, 写事件触发。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>处理流程</p>\n<blockquote>\n<ul>\n<li>accept新的连接, 监听读事件。</li>\n<li>读事件到达, 处理读事件。</li>\n<li>需要写入数据, 向fd中写数据, 一次无法写完, 开启写事件监听。</li>\n<li>写事件到达, 继续写入数据, 写完后关闭写事件。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>优缺点</p>\n<blockquote>\n<ul>\n<li>不会遗漏事件, 易编程。</li>\n<li>长连接需要写入的数据量大时, 会频繁开启关闭写事件。  </li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"1-2-边沿触发\"><a href=\"#1-2-边沿触发\" class=\"headerlink\" title=\"1.2 边沿触发\"></a>1.2 边沿触发</h2><ol>\n<li><p>基本概念</p>\n<blockquote>\n<ul>\n<li>读缓冲区状态变化时, 读事件触发, 网卡接受到新数据。</li>\n<li>写缓冲区状态变化时, 写事件触发, 网卡发出了新数据。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>处理流程</p>\n<blockquote>\n<ul>\n<li>accept新的连接, 同时监听读写事件。</li>\n<li>读事件到达, 需要一直读取数据, 直到返回EAGAIN。</li>\n<li>写事件到达, 无数据处理则不处理, 有数据待写入则一直写入，直到写完或者返回EAGAIN。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>优缺点</p>\n<blockquote>\n<ul>\n<li>不需要频繁开启关闭事件, 效率较高。</li>\n<li>读写事件处理不当, 可能导致事件丢失, 编程教复杂。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"1-3-选择\"><a href=\"#1-3-选择\" class=\"headerlink\" title=\"1.3 选择\"></a>1.3 选择</h2><ol>\n<li>概述<blockquote>\n<ul>\n<li>对于读事件而言，总体而言, 采用水平触发方式较好。应用程序在读取数据时，可能会一次无法读取全部数据，边沿触发在下一次可能不会触发。如果能够保证一次读取缓存的全部数据，可以采用边沿触发，效率更高, 但同时编程复杂度也高。</li>\n<li>对于写事件，当客户端服务端采用短连接或者采用长连接但发送的数据量比较少时(例如: Redis), 采用水平触发即可。当客户端与服务端是长连接并且数据写入的量比较大时(例如: nginx), 采用边沿触发, 因为边沿触发效率更高。</li>\n<li>目前，linux不支持读写事件分别设置不同的触发方式，具体采用哪种方式触发，需要根据具体需求。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>监听套接字事件设置</p>\n<blockquote>\n<ul>\n<li>监听套接字不需要监听写事件，只需要监听读事件。</li>\n<li>监听套接字一般采用水平触发方式。(nginx开启multi_accept时，会把监听套接字所有可读的事件全部读取，此时可以使用边沿触发。但为了保证连接不丢失，nginx仍然采用水平触发)</li>\n</ul>\n</blockquote>\n</li>\n<li><p>通信套接字设置</p>\n<blockquote>\n<ul>\n<li>redis对于与客户端通信使用的套接字默认使用水平触发。</li>\n<li>nginx对于与客户端通信使用的套接字默认采用边沿触发。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"二-参考\"><a href=\"#二-参考\" class=\"headerlink\" title=\"二. 参考\"></a>二. 参考</h1><ul>\n<li><a href=\"https://blog.csdn.net/dongfuye/article/details/50880251\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/dongfuye/article/details/50880251</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-基础\"><a href=\"#一-基础\" class=\"headerlink\" title=\"一. 基础\"></a>一. 基础</h1><h2 id=\"1-1-水平触发\"><a href=\"#1-1-水平触发\" class=\"headerlink\" title=\"1.1 水平触发\"></a>1.1 水平触发</h2><ol>\n<li><p>基本概念</p>\n<blockquote>\n<ul>\n<li>读缓冲区不为空时, 读事件触发。</li>\n<li>写缓冲区不为满时, 写事件触发。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>处理流程</p>\n<blockquote>\n<ul>\n<li>accept新的连接, 监听读事件。</li>\n<li>读事件到达, 处理读事件。</li>\n<li>需要写入数据, 向fd中写数据, 一次无法写完, 开启写事件监听。</li>\n<li>写事件到达, 继续写入数据, 写完后关闭写事件。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>优缺点</p>\n<blockquote>\n<ul>\n<li>不会遗漏事件, 易编程。</li>\n<li>长连接需要写入的数据量大时, 会频繁开启关闭写事件。  </li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"1-2-边沿触发\"><a href=\"#1-2-边沿触发\" class=\"headerlink\" title=\"1.2 边沿触发\"></a>1.2 边沿触发</h2><ol>\n<li><p>基本概念</p>\n<blockquote>\n<ul>\n<li>读缓冲区状态变化时, 读事件触发, 网卡接受到新数据。</li>\n<li>写缓冲区状态变化时, 写事件触发, 网卡发出了新数据。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>处理流程</p>\n<blockquote>\n<ul>\n<li>accept新的连接, 同时监听读写事件。</li>\n<li>读事件到达, 需要一直读取数据, 直到返回EAGAIN。</li>\n<li>写事件到达, 无数据处理则不处理, 有数据待写入则一直写入，直到写完或者返回EAGAIN。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>优缺点</p>\n<blockquote>\n<ul>\n<li>不需要频繁开启关闭事件, 效率较高。</li>\n<li>读写事件处理不当, 可能导致事件丢失, 编程教复杂。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"1-3-选择\"><a href=\"#1-3-选择\" class=\"headerlink\" title=\"1.3 选择\"></a>1.3 选择</h2><ol>\n<li>概述<blockquote>\n<ul>\n<li>对于读事件而言，总体而言, 采用水平触发方式较好。应用程序在读取数据时，可能会一次无法读取全部数据，边沿触发在下一次可能不会触发。如果能够保证一次读取缓存的全部数据，可以采用边沿触发，效率更高, 但同时编程复杂度也高。</li>\n<li>对于写事件，当客户端服务端采用短连接或者采用长连接但发送的数据量比较少时(例如: Redis), 采用水平触发即可。当客户端与服务端是长连接并且数据写入的量比较大时(例如: nginx), 采用边沿触发, 因为边沿触发效率更高。</li>\n<li>目前，linux不支持读写事件分别设置不同的触发方式，具体采用哪种方式触发，需要根据具体需求。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>监听套接字事件设置</p>\n<blockquote>\n<ul>\n<li>监听套接字不需要监听写事件，只需要监听读事件。</li>\n<li>监听套接字一般采用水平触发方式。(nginx开启multi_accept时，会把监听套接字所有可读的事件全部读取，此时可以使用边沿触发。但为了保证连接不丢失，nginx仍然采用水平触发)</li>\n</ul>\n</blockquote>\n</li>\n<li><p>通信套接字设置</p>\n<blockquote>\n<ul>\n<li>redis对于与客户端通信使用的套接字默认使用水平触发。</li>\n<li>nginx对于与客户端通信使用的套接字默认采用边沿触发。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"二-参考\"><a href=\"#二-参考\" class=\"headerlink\" title=\"二. 参考\"></a>二. 参考</h1><ul>\n<li><a href=\"https://blog.csdn.net/dongfuye/article/details/50880251\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/dongfuye/article/details/50880251</a></li>\n</ul>\n"},{"title":"浅谈C/C++链接库","date":"2019-08-28T08:34:08.000Z","_content":"\n## 一. 说明\n1. 本文后续代码的编译以及执行环境为Centos 7.6 x86_64, g++ 4.8.5\n2. 本文后续会用到linux下nm, ldd命令。nm用于查看文件中的符号, 例如变量, 函数名称。ldd用于查看动态链接库或者可执行文件的依赖库(动态链接库)。\n\n\n## 二. 编译链接\n1. 程序员写出的代码为.c或者.cpp, 这些文件需要经过: **预处理(处理代码中的include, 宏等)、编译(生成汇编代码)、汇编(将汇编代码生成二进制文件)、链接**才能生成可执行程序。**本文将预处理、编译、汇编的过程都看做是编译, 简化读者理解。更多细节可以参考相关资料**。\n2. 生成可执行文件后, 通过终端进行执行\n3. g++参数说明,\n- -std=`c++11`: 使用c++11标准\n- -o: 指定输出文件名称\n4. 链接器ld参数:\n- -L: 指定链接时搜索的动态链接库路径\n- -l: 链接某个库, 例如链接libmath.so, 写为-lmath\n\n\n### 2.1 编译\n1. 对于c或者`c++`项目而言, 我们认为单个c或者cpp文件是一个编译单元, 通过编译器(gcc, g++, clang, clang++)可以生成编译后的**二进制文件**。例如: 编译file1.cpp, 可以生成file1.o。对于单个编译单元而言, 里面会有一些符号, 例如函数名称, 变量名称, 类名。这些符号可以分为三类: \n- 对外提供的, 也就是说其他的编译单元可以使用的\n- 对外依赖的, 也就是说本单元需要外部的其他编译单元提供的符号\n- 自己内部使用的, 这种符号只有本编译单元自身需要使用, 外部不可见\n2. 通过nm, 我们可以查看某个编译单元存在哪些符号\n\n\n### 2.2 链接\n1. C/C++项目中含有很多个c文件或者cpp文件, 这些文件经过编译生成了对应的二进制文件。需要通过链接器将这些文件链接, 进而生成可执行程序。\n2. linux下链接器为ld, 利用该工具我们可以将这些文件链接, 进而生成可执行程序。\n3. **在进行链接时, 每个编译单元需要的符号, 都需要能够找到对应的定义。例如: 某个编译单元需要其他编译单元提供符号fun1, 这是一个函数, 如果链接器没能从其他编译单元找到这个符号, 就会报我们经常看到的未定义错误。若果出现多次, 则会报出重复定义的错误。**\n\n### 2.3 示例\n1. math.h\n```cpp\n#ifndef _MATH_H_\n#define _MATH_H_\n\nint add(int a, int b);\n\n#endif\n```\n2. math.cpp\n```cpp\n#include \"math.h\"\n\nint add(int a, int b){\n    return a + b;\n}\n```\n3. main.cpp\n```cpp\n#include <iostream>\n\n#include \"math.h\"\n\nusing namespace std;\n\nint main(int argc, char **argv){\n    int a = 100, b = 200;\n    int result = add(a, b);\n    cout << result << endl;\n}\n```\n\n4. 生成可执行文件\n- 编译math.cpp: g++ -std=c++11 -c math.cpp, 生成math.o\n- 编译main.cpp: g++ -std=c++11 -c main.cpp, 生成main.o\n- 生成可以执行的文件: g++ -v math.o main.o -o main, 可以看到g++的编译链接过程\n\n```\nUsing built-in specs.\nCOLLECT_GCC=g++\nCOLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/lto-wrapper\nTarget: x86_64-redhat-linux\nConfigured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-linker-build-id --with-linker-hash-style=gnu --enable-languages=c,c++,objc,obj-c++,java,fortran,ada,go,lto --enable-plugin --enable-initfini-array --disable-libgcj --with-isl=/builddir/build/BUILD/gcc-4.8.5-20150702/obj-x86_64-redhat-linux/isl-install --with-cloog=/builddir/build/BUILD/gcc-4.8.5-20150702/obj-x86_64-redhat-linux/cloog-install --enable-gnu-indirect-function --with-tune=generic --with-arch_32=x86-64 --build=x86_64-redhat-linux\nThread model: posix\ngcc version 4.8.5 20150623 (Red Hat 4.8.5-36) (GCC)\nCOMPILER_PATH=/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/:/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/:/usr/libexec/gcc/x86_64-redhat-linux/:/usr/lib/gcc/x86_64-redhat-linux/4.8.5/:/usr/lib/gcc/x86_64-redhat-linux/\nLIBRARY_PATH=/usr/lib/gcc/x86_64-redhat-linux/4.8.5/:/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/:/lib/../lib64/:/usr/lib/../lib64/:/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../:/lib/:/usr/lib/\nCOLLECT_GCC_OPTIONS='-v' '-o' 'main' '-shared-libgcc' '-mtune=generic' '-march=x86-64'\n/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/collect2 --build-id --no-add-needed --eh-frame-hdr --hash-style=gnu -m elf_x86_64 -dynamic-linker /lib64/ld-linux-x86-64.so.2 -o main /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crt1.o /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crti.o /usr/lib/gcc/x86_64-redhat-linux/4.8.5/crtbegin.o -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5 -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64 -L/lib/../lib64 -L/usr/lib/../lib64 -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../.. main.o math.o -lstdc++ -lm -lgcc_s -lgcc -lc -lgcc_s -lgcc /usr/lib/gcc/x86_64-redhat-linux/4.8.5/crtend.o /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crtn.o\n```\n- **其中最后一行调用collect2(对ld进行了包装)会执行真正的链接操作, 我们直接调用这一句也可以生成main可执行文件**\n- 可以看出linux下的链接操作比较复杂, 不是简单的ld main.o math.o即可成功的。\n\n\n## 三. 问题\n通过上面的介绍, 我们知道一个c/cpp文件通过编译链接, 最终生成可执行文件。无论任何语言, 程序员在写代码时, 都不可避免需要使用到库, 本文主要介绍C/C++中的库, 总体而言, 我们将这些库分为静态链接库(通常以.a结尾)，动态链接库(通常以.so结尾)。首先我们来看几个问题:\n1. 什么是静态链接库?什么是动态链接库?\n2. 静态链接库如何生成?动态链接库如何生成?\n3. 静态链接库是否可以依赖其他的静态链接库? 是否可以依赖其他动态链接库?\n4. 动态链接库是否可以依赖其他的静态链接库? 是否可以依赖其他的动态链接库?\n5. 链接静态库时?其依赖的库该如何链接?\n6. 链接动态库时?其依赖的库该如何链接?\n7. 使用第三方库时, 使用静态链接库还是动态链接库?\n\n\n## 四. Hello World\n本节以hello world为例,\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main(int argc, char **argv){\n    cout << \"hello world\" << endl;\n}\n```\n1. 编译程序: g++ -std=c++11 -o main main.cpp\n2. 使用ldd查看main的依赖: ldd main\n\n```\nlinux-vdso.so.1 =>  (0x00007ffcf53fa000)\nlibstdc++.so.6 => /lib64/libstdc++.so.6 (0x00007f7828b3b000)\nlibm.so.6 => /lib64/libm.so.6 (0x00007f7828839000)\nlibgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x00007f7828623000)\nlibc.so.6 => /lib64/libc.so.6 (0x00007f7828256000)\n/lib64/ld-linux-x86-64.so.2 (0x00007f7828e42000)\n```\n- 可以看出, **最简单的hello world程序也需要链接一些库**\n- 上述的几种链接库, 感兴趣的可以逐个研究\n\n\n## 五. 动态链接库 vs 静态链接库\n1. 本节以2.3中的示例代码为例, 将math.h, math.cpp打包为静态链接库以及动态链接库, 在main.cpp中引用\n\n### 5.1 静态链接库\n1. 编译: g++ -std=c++11 -fPIC -c math.cpp\n- fPIC用于生成位置无关的代码, 更多细节可以查找相关资料\n2. 生成静态链接库: ar -crv libmath.a math.o\n3. 使用这个静态链接库:\n- 使用静态库时, 我们需要math.h文件, 这个文件中定义了这个库对外提供的功能\n- 除了math.h文件, 我们需要在链接阶段链接libmath.a\n4. 示例: main.cpp中已经导入了math.h文件, 编译main.c并链接libmath.a, g++ -std=c++11 -o main main.cpp -L. -lmath\n5. ldd main可以看出, main文件不再依赖libmath.a文件\n\n### 5.2 动态链接库\n1. 生成动态链接库: g++ -std=c++11 -shared -fPIC math.cpp -o libmath.so\n2. 使用动态链接库:\n- 需要使用math.h头文件, 该文件定义了库对外提供的功能\n- 链接阶段需要链接libmath.so\n3. 示例: g++ -std=c++11 -o main main.cpp -L. -lmath\n4. 执行main, 会发现无法执行\n```\n./main: error while loading shared libraries: libmath.so: cannot open shared object file: No such file or directory\n```\n5. 我们先用ldd 查看main的依赖库:\n```\nlinux-vdso.so.1 =>  (0x00007ffd2adde000)\nlibmath.so => not found\nlibstdc++.so.6 => /lib64/libstdc++.so.6 (0x00007fd3b7ee6000)\nlibm.so.6 => /lib64/libm.so.6 (0x00007fd3b7be4000)\nlibgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x00007fd3b79ce000)\nlibc.so.6 => /lib64/libc.so.6 (0x00007fd3b7601000)\n/lib64/ld-linux-x86-64.so.2 (0x00007fd3b81ed000)\n```\n很奇怪, libmath.so没有找到, 我们在第三步编译时明明将这个库加入进去了。这个是由于, 在链接阶段, 链接器可以在当前目录找到libmath.so。执行阶段, 搜索动态链接库时, 并没有包含当前目录, 所以报错。我们可以通过export LD_LIBRARY_PATH=/libpath将libmath.so所在路径放入动态链接库的搜索路径中。此时即可成功执行。\n\n### 5.3 对比\n1. 静态链接库, 动态链接库都是二进制文件(ELF格式, 详细信息可以查找相关资料)\n2. 从静态链接库生成的过程来看, 其本质就是将多个编译单元(.o文件), 打包为一个新的文件。链接静态链接库时, 会将静态链接库的代码合并进程序中。\n3. 链接动态链接库时, 并不会将动态链接库的内容合并进代码中, 而是在程序执行时, 搜索动态链接库, 再进行链接。\n\n\n\n## 六. 库之间的依赖\n### 6.1 源代码\n1. first.h\n```cpp\n#ifndef __FIRST_H_\n#define __FIRST_H_\n\n#include <cstdio>\n\nvoid first();\n\n#endif \n```\n2. first.cpp\n```cpp\n#include\"first.h\"\n\nvoid first()\n{\n    printf(\"This is first!\\n\");\n}\n```\n3. second.h\n```cpp\n#ifndef __SECOND_H_\n#define __SECOND_H_\n \n#include <cstdio>\nvoid second();\n\n#endif\n```\n4. second.cpp\n```cpp\n#include\"first.h\"\n#include\"second.h\"\n\nvoid second()\n{\n    printf(\"This is second!\\n\");\n    first();\n}\n```\n5. main.cpp\n```\n#include\"second.h\"\nint main()\n{\n    second();\n    return 0;\n}\n```\n\n\n### 6.2 静态库依赖静态库\n1. 生成libfirst.a静态链接库\n```\ng++ -std=c++11 -fPIC -c first.cpp\nar -crv libfirst.a first.o\n```\n\n2. 生成libsecond.a并链接libfirst.a\n```\ng++ -std=c++11 -c second.cpp -L. -lfirst\nar -crv libsecond.a second.o\n```\n\n3. main.cpp中使用libsecond.a\n执行: g++ -std=c++11 main.cpp -L. -lsecond -o main\n会出现以下错误:\n./libsecond.a(second.o): In function `second()':\nsecond.cpp:(.text+0xf): undefined reference to `first()'\ncollect2: error: ld returned 1 exit status\n\n\n4. 解释说明\n\n- 通过nm, 我们查看libsecond.a中的符号, 找出未定义的符号, 执行nm -u libsecond.a, 即可发现first并没有定义(编译器编译后的符号并不是first, 我这里是_Z5firstv)。我们明明在生成libsecond.a时链接了libfirst.a?\n- 主要的原因是: 生成静态链接库时, 只是将second.cpp生成的second.o打包, 并没有真正的将libfirst.a中的内容链接进libsecond.a\n- 静态库不与其他静态库链接。我们使用archiver工具(例如Linux上的ar)将多个静态链接库打包为一个静态链接库\n\n\n5. 解决方案\n- 将first.cpp, second.cpp打包为一个静态链接库: g++ -std=c++11 -fPIC -c first.cpp second.cpp, ar -crv libsecond.a first.o second.o。main中可以直接链接libsecond.a即可\n- 同时链接libsecond.a, libfirst.a\n\n\n\n### 6.3 动态库依赖静态库\n1. 生成libfirst.a静态链接库, 这一步与5.2节相同\n2. 生成libsecond.so静态链接libfirst.a\n```\ng++ -std=c++11 second.cpp -fPIC -shared -o libsecond.so -L. -lfirst\n```\n- nm -u libseond.so, 我们可以看出, 并没有出现first, 也就是说, libfirst.a已经被链接进libsecond.so中了\n\n3. 编译main.cpp\n```\ng++ -std=c++11 main.cpp -L. -lsecond -o main\n```\n\n\n\n### 6.4 静态库依赖动态库\n1. 生成libfirst.so\n```\ng++ -std=c++11 first.cpp -shared -fPIC -o libfirst.so\n```\n\n2. 生成libsecond.a链接libfirst.so\n```\ng++ -std=c++11 -c second.cpp -fPIC -L. -lfirst\nar crv libsecond.a second.o\n```\n- nm -u libsecond.a, 可以看到_Z5firstv, 说明并没有将libfirst.so中包含进libsecond.a\n\n3. 编译main.cpp\n```\ng++ -std=c++11 main.cpp -L. -lsecond -lfirst -o main\n```\n- 如果没有链接first, 会发现链接错误, 找不到first函数的定义\n\n\n### 6.5 动态库依赖动态库\n\n1. 生成libfirst.so\n```\ng++ -std=c++11 first.cpp -shared -fPIC -o libfirst.so\n```\n\n2. 生成libsecond.so链接libfirst.so\n```\ng++ -std=c++11 second.cpp -shared -fPIC -o libsecond.so -L. -lfirst\n```\n- nm -u libsecond.so, 可以看到_Z5firstv, 这个就是first函数\n- ldd libsecond.so, 也可以看到libfirst.so\n- 可以看出, 使用libsecond.so时, 仍然需要libfirst.so\n\n3. 编译main.cpp\n```\ng++ -std=c++11 main.cpp -L. -lsecond -o main\n```\n- 可以看出, 能够成功编译。\n- 之前讲过libsecond.so需要依赖libfirst.so, 此处为何我们只链接libsecond.so也能成功呢?这里是因为链接器会自动搜索动态链接库的依赖库\n\n\n\n## 七. 总结\n1. c或者cpp文件经过**编译、链接**生成可执行文件\n2. 单个c文件或者cpp文件是一个编译单元。每个编译单元存在3种符号: 自己使用的, 依赖于外部的以及对外提供的。\n3. 链接器是将多个编译单元的符号相互链接以形成可执行文件。\n4. 库可以分为静态链接库(.a)以及动态链接库(.so)。\n5. 使用库时, 除了库文件, 还需要对应的头文件。\n6. 单个c文件或者cpp文件, 可能依赖其他的库文件, 但是在编译时, 只需要有声明, 并不需要有具体的定义。\n7. 静态库没有链接操作, 静态库只是将多个.o文件打包, 并没有其他操作。静态库可能依赖其他的静态库或者其他的动态库, 用户在使用静态库时, 需要手动链接这些依赖。\n8. 动态库有链接操作, 创建动态库时可以链接其他的库, 也可以不链接, 如果链接静态库, 则会将静态库的内容全部放入动态库, 如果链接动态库, 只是放入符号, 在程序初始化时, 将依赖的这些动态库也加载。如果这个动态库依赖了其他库, 但是没有链接, 也可以生成动态库, 但用户在使用这个动态链接库时, 需要手动链接这些依赖, 由于使用者很难知道这些依赖, 所以通常不使用这种方式。\n9. 总体而言, 动态库在程序执行阶段才会装进程序, 静态库则在链接阶段直接放进程序。动态库可以由多个程序共享, 节省内存，易于升级。静态库外部依赖少, 更易于部署。\n\n\n\n## 八. 扩展\n1. 动态库升级问题?假设现在有2个程序: p1, p2, 一个动态链接库libmath.so.1。如果现在math库提供了新版本libmath.so.2, 程序p1需要使用libmath.so.2的新功能, p2则不想使用, 此时该如何升级math库?\n- 如果math不兼容前一版, 则系统中需要同时存在两个版本的math库, p1, p2分别链接不同的版本\n- 如果math兼容前一版, 系统中是否可以只保留新版的math库呢?此时p1, p2又是否需要重新编译呢?这个问题留给读者自行思考。\n\n2. 某个动态链接库**lib1**动态链接了库**libbase**, 现在应用程序中使用了**lib1**以及**libbase**, 编译应用程序时, 是否需要链接**libbase**?\n- 应用程序不仅需要链接**lib1**, 也需要链接**libbase**\n- 链接**lib1**只能保证应用程序依赖**lib1**的部分能够正确解析\n- 虽然**lib1**动态链接了**libbase**, 但是动态链接真正进行符号解析是在程序执行阶段, 编译阶段无法获取**libbase**的相关信息, 应用程序中如果也使用了**libbase**中的函数, 则必须链接**libbase**, 否则会出现符号未定义\n- 如果**lib1**静态链接了**libbase**, 也就是说包含了**libbase**中的函数, 则应用程序不需要在链接**libbase**\n\n3. 菱形依赖问题, A依赖于B以及C, B、C都依赖于D, 但是是不同版本, 例如B依赖于D1, C依赖于D2, 这种情况下如何链接?\n- D2兼容于D1(ABI层面兼容), 程序直接链接D2\n- D2不兼容于D1, 查看B是否可以依赖D2重新编译\n- 链接器的参数, 直接链接两个版本。ld的参数--default-symver或者--version-script\n\n4. 讨论\n- 动态链接会有大量的依赖问题(windows dll hell)\n- 由于采用模块化, 又允许升级单个模块, 菱形依赖问题对于很多语言都是存在的\n- rust, go等语言都开始采用源码编译的方式, 解决依赖问题\n\n\n## 九. 参考\n- http://blog.chinaunix.net/uid-26548237-id-3837099.html\n- https://www.cnblogs.com/fnlingnzb-learner/p/8119729.html\n- https://blog.csdn.net/coolwaterld/article/details/85088288\n- https://blog.habets.se/2012/05/Shared-libraries-diamond-problem.html\n","source":"_posts/link-library-introduce.md","raw":"---\ntitle: 浅谈C/C++链接库\ndate: 2019-08-28 16:34:08\ncategories:\n- C/C++\n- 链接库\ntags:\n- 编译\n- 链接\n- 动态链接库\n- 静态链接库\n---\n\n## 一. 说明\n1. 本文后续代码的编译以及执行环境为Centos 7.6 x86_64, g++ 4.8.5\n2. 本文后续会用到linux下nm, ldd命令。nm用于查看文件中的符号, 例如变量, 函数名称。ldd用于查看动态链接库或者可执行文件的依赖库(动态链接库)。\n\n\n## 二. 编译链接\n1. 程序员写出的代码为.c或者.cpp, 这些文件需要经过: **预处理(处理代码中的include, 宏等)、编译(生成汇编代码)、汇编(将汇编代码生成二进制文件)、链接**才能生成可执行程序。**本文将预处理、编译、汇编的过程都看做是编译, 简化读者理解。更多细节可以参考相关资料**。\n2. 生成可执行文件后, 通过终端进行执行\n3. g++参数说明,\n- -std=`c++11`: 使用c++11标准\n- -o: 指定输出文件名称\n4. 链接器ld参数:\n- -L: 指定链接时搜索的动态链接库路径\n- -l: 链接某个库, 例如链接libmath.so, 写为-lmath\n\n\n### 2.1 编译\n1. 对于c或者`c++`项目而言, 我们认为单个c或者cpp文件是一个编译单元, 通过编译器(gcc, g++, clang, clang++)可以生成编译后的**二进制文件**。例如: 编译file1.cpp, 可以生成file1.o。对于单个编译单元而言, 里面会有一些符号, 例如函数名称, 变量名称, 类名。这些符号可以分为三类: \n- 对外提供的, 也就是说其他的编译单元可以使用的\n- 对外依赖的, 也就是说本单元需要外部的其他编译单元提供的符号\n- 自己内部使用的, 这种符号只有本编译单元自身需要使用, 外部不可见\n2. 通过nm, 我们可以查看某个编译单元存在哪些符号\n\n\n### 2.2 链接\n1. C/C++项目中含有很多个c文件或者cpp文件, 这些文件经过编译生成了对应的二进制文件。需要通过链接器将这些文件链接, 进而生成可执行程序。\n2. linux下链接器为ld, 利用该工具我们可以将这些文件链接, 进而生成可执行程序。\n3. **在进行链接时, 每个编译单元需要的符号, 都需要能够找到对应的定义。例如: 某个编译单元需要其他编译单元提供符号fun1, 这是一个函数, 如果链接器没能从其他编译单元找到这个符号, 就会报我们经常看到的未定义错误。若果出现多次, 则会报出重复定义的错误。**\n\n### 2.3 示例\n1. math.h\n```cpp\n#ifndef _MATH_H_\n#define _MATH_H_\n\nint add(int a, int b);\n\n#endif\n```\n2. math.cpp\n```cpp\n#include \"math.h\"\n\nint add(int a, int b){\n    return a + b;\n}\n```\n3. main.cpp\n```cpp\n#include <iostream>\n\n#include \"math.h\"\n\nusing namespace std;\n\nint main(int argc, char **argv){\n    int a = 100, b = 200;\n    int result = add(a, b);\n    cout << result << endl;\n}\n```\n\n4. 生成可执行文件\n- 编译math.cpp: g++ -std=c++11 -c math.cpp, 生成math.o\n- 编译main.cpp: g++ -std=c++11 -c main.cpp, 生成main.o\n- 生成可以执行的文件: g++ -v math.o main.o -o main, 可以看到g++的编译链接过程\n\n```\nUsing built-in specs.\nCOLLECT_GCC=g++\nCOLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/lto-wrapper\nTarget: x86_64-redhat-linux\nConfigured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-linker-build-id --with-linker-hash-style=gnu --enable-languages=c,c++,objc,obj-c++,java,fortran,ada,go,lto --enable-plugin --enable-initfini-array --disable-libgcj --with-isl=/builddir/build/BUILD/gcc-4.8.5-20150702/obj-x86_64-redhat-linux/isl-install --with-cloog=/builddir/build/BUILD/gcc-4.8.5-20150702/obj-x86_64-redhat-linux/cloog-install --enable-gnu-indirect-function --with-tune=generic --with-arch_32=x86-64 --build=x86_64-redhat-linux\nThread model: posix\ngcc version 4.8.5 20150623 (Red Hat 4.8.5-36) (GCC)\nCOMPILER_PATH=/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/:/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/:/usr/libexec/gcc/x86_64-redhat-linux/:/usr/lib/gcc/x86_64-redhat-linux/4.8.5/:/usr/lib/gcc/x86_64-redhat-linux/\nLIBRARY_PATH=/usr/lib/gcc/x86_64-redhat-linux/4.8.5/:/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/:/lib/../lib64/:/usr/lib/../lib64/:/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../:/lib/:/usr/lib/\nCOLLECT_GCC_OPTIONS='-v' '-o' 'main' '-shared-libgcc' '-mtune=generic' '-march=x86-64'\n/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/collect2 --build-id --no-add-needed --eh-frame-hdr --hash-style=gnu -m elf_x86_64 -dynamic-linker /lib64/ld-linux-x86-64.so.2 -o main /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crt1.o /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crti.o /usr/lib/gcc/x86_64-redhat-linux/4.8.5/crtbegin.o -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5 -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64 -L/lib/../lib64 -L/usr/lib/../lib64 -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../.. main.o math.o -lstdc++ -lm -lgcc_s -lgcc -lc -lgcc_s -lgcc /usr/lib/gcc/x86_64-redhat-linux/4.8.5/crtend.o /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crtn.o\n```\n- **其中最后一行调用collect2(对ld进行了包装)会执行真正的链接操作, 我们直接调用这一句也可以生成main可执行文件**\n- 可以看出linux下的链接操作比较复杂, 不是简单的ld main.o math.o即可成功的。\n\n\n## 三. 问题\n通过上面的介绍, 我们知道一个c/cpp文件通过编译链接, 最终生成可执行文件。无论任何语言, 程序员在写代码时, 都不可避免需要使用到库, 本文主要介绍C/C++中的库, 总体而言, 我们将这些库分为静态链接库(通常以.a结尾)，动态链接库(通常以.so结尾)。首先我们来看几个问题:\n1. 什么是静态链接库?什么是动态链接库?\n2. 静态链接库如何生成?动态链接库如何生成?\n3. 静态链接库是否可以依赖其他的静态链接库? 是否可以依赖其他动态链接库?\n4. 动态链接库是否可以依赖其他的静态链接库? 是否可以依赖其他的动态链接库?\n5. 链接静态库时?其依赖的库该如何链接?\n6. 链接动态库时?其依赖的库该如何链接?\n7. 使用第三方库时, 使用静态链接库还是动态链接库?\n\n\n## 四. Hello World\n本节以hello world为例,\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main(int argc, char **argv){\n    cout << \"hello world\" << endl;\n}\n```\n1. 编译程序: g++ -std=c++11 -o main main.cpp\n2. 使用ldd查看main的依赖: ldd main\n\n```\nlinux-vdso.so.1 =>  (0x00007ffcf53fa000)\nlibstdc++.so.6 => /lib64/libstdc++.so.6 (0x00007f7828b3b000)\nlibm.so.6 => /lib64/libm.so.6 (0x00007f7828839000)\nlibgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x00007f7828623000)\nlibc.so.6 => /lib64/libc.so.6 (0x00007f7828256000)\n/lib64/ld-linux-x86-64.so.2 (0x00007f7828e42000)\n```\n- 可以看出, **最简单的hello world程序也需要链接一些库**\n- 上述的几种链接库, 感兴趣的可以逐个研究\n\n\n## 五. 动态链接库 vs 静态链接库\n1. 本节以2.3中的示例代码为例, 将math.h, math.cpp打包为静态链接库以及动态链接库, 在main.cpp中引用\n\n### 5.1 静态链接库\n1. 编译: g++ -std=c++11 -fPIC -c math.cpp\n- fPIC用于生成位置无关的代码, 更多细节可以查找相关资料\n2. 生成静态链接库: ar -crv libmath.a math.o\n3. 使用这个静态链接库:\n- 使用静态库时, 我们需要math.h文件, 这个文件中定义了这个库对外提供的功能\n- 除了math.h文件, 我们需要在链接阶段链接libmath.a\n4. 示例: main.cpp中已经导入了math.h文件, 编译main.c并链接libmath.a, g++ -std=c++11 -o main main.cpp -L. -lmath\n5. ldd main可以看出, main文件不再依赖libmath.a文件\n\n### 5.2 动态链接库\n1. 生成动态链接库: g++ -std=c++11 -shared -fPIC math.cpp -o libmath.so\n2. 使用动态链接库:\n- 需要使用math.h头文件, 该文件定义了库对外提供的功能\n- 链接阶段需要链接libmath.so\n3. 示例: g++ -std=c++11 -o main main.cpp -L. -lmath\n4. 执行main, 会发现无法执行\n```\n./main: error while loading shared libraries: libmath.so: cannot open shared object file: No such file or directory\n```\n5. 我们先用ldd 查看main的依赖库:\n```\nlinux-vdso.so.1 =>  (0x00007ffd2adde000)\nlibmath.so => not found\nlibstdc++.so.6 => /lib64/libstdc++.so.6 (0x00007fd3b7ee6000)\nlibm.so.6 => /lib64/libm.so.6 (0x00007fd3b7be4000)\nlibgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x00007fd3b79ce000)\nlibc.so.6 => /lib64/libc.so.6 (0x00007fd3b7601000)\n/lib64/ld-linux-x86-64.so.2 (0x00007fd3b81ed000)\n```\n很奇怪, libmath.so没有找到, 我们在第三步编译时明明将这个库加入进去了。这个是由于, 在链接阶段, 链接器可以在当前目录找到libmath.so。执行阶段, 搜索动态链接库时, 并没有包含当前目录, 所以报错。我们可以通过export LD_LIBRARY_PATH=/libpath将libmath.so所在路径放入动态链接库的搜索路径中。此时即可成功执行。\n\n### 5.3 对比\n1. 静态链接库, 动态链接库都是二进制文件(ELF格式, 详细信息可以查找相关资料)\n2. 从静态链接库生成的过程来看, 其本质就是将多个编译单元(.o文件), 打包为一个新的文件。链接静态链接库时, 会将静态链接库的代码合并进程序中。\n3. 链接动态链接库时, 并不会将动态链接库的内容合并进代码中, 而是在程序执行时, 搜索动态链接库, 再进行链接。\n\n\n\n## 六. 库之间的依赖\n### 6.1 源代码\n1. first.h\n```cpp\n#ifndef __FIRST_H_\n#define __FIRST_H_\n\n#include <cstdio>\n\nvoid first();\n\n#endif \n```\n2. first.cpp\n```cpp\n#include\"first.h\"\n\nvoid first()\n{\n    printf(\"This is first!\\n\");\n}\n```\n3. second.h\n```cpp\n#ifndef __SECOND_H_\n#define __SECOND_H_\n \n#include <cstdio>\nvoid second();\n\n#endif\n```\n4. second.cpp\n```cpp\n#include\"first.h\"\n#include\"second.h\"\n\nvoid second()\n{\n    printf(\"This is second!\\n\");\n    first();\n}\n```\n5. main.cpp\n```\n#include\"second.h\"\nint main()\n{\n    second();\n    return 0;\n}\n```\n\n\n### 6.2 静态库依赖静态库\n1. 生成libfirst.a静态链接库\n```\ng++ -std=c++11 -fPIC -c first.cpp\nar -crv libfirst.a first.o\n```\n\n2. 生成libsecond.a并链接libfirst.a\n```\ng++ -std=c++11 -c second.cpp -L. -lfirst\nar -crv libsecond.a second.o\n```\n\n3. main.cpp中使用libsecond.a\n执行: g++ -std=c++11 main.cpp -L. -lsecond -o main\n会出现以下错误:\n./libsecond.a(second.o): In function `second()':\nsecond.cpp:(.text+0xf): undefined reference to `first()'\ncollect2: error: ld returned 1 exit status\n\n\n4. 解释说明\n\n- 通过nm, 我们查看libsecond.a中的符号, 找出未定义的符号, 执行nm -u libsecond.a, 即可发现first并没有定义(编译器编译后的符号并不是first, 我这里是_Z5firstv)。我们明明在生成libsecond.a时链接了libfirst.a?\n- 主要的原因是: 生成静态链接库时, 只是将second.cpp生成的second.o打包, 并没有真正的将libfirst.a中的内容链接进libsecond.a\n- 静态库不与其他静态库链接。我们使用archiver工具(例如Linux上的ar)将多个静态链接库打包为一个静态链接库\n\n\n5. 解决方案\n- 将first.cpp, second.cpp打包为一个静态链接库: g++ -std=c++11 -fPIC -c first.cpp second.cpp, ar -crv libsecond.a first.o second.o。main中可以直接链接libsecond.a即可\n- 同时链接libsecond.a, libfirst.a\n\n\n\n### 6.3 动态库依赖静态库\n1. 生成libfirst.a静态链接库, 这一步与5.2节相同\n2. 生成libsecond.so静态链接libfirst.a\n```\ng++ -std=c++11 second.cpp -fPIC -shared -o libsecond.so -L. -lfirst\n```\n- nm -u libseond.so, 我们可以看出, 并没有出现first, 也就是说, libfirst.a已经被链接进libsecond.so中了\n\n3. 编译main.cpp\n```\ng++ -std=c++11 main.cpp -L. -lsecond -o main\n```\n\n\n\n### 6.4 静态库依赖动态库\n1. 生成libfirst.so\n```\ng++ -std=c++11 first.cpp -shared -fPIC -o libfirst.so\n```\n\n2. 生成libsecond.a链接libfirst.so\n```\ng++ -std=c++11 -c second.cpp -fPIC -L. -lfirst\nar crv libsecond.a second.o\n```\n- nm -u libsecond.a, 可以看到_Z5firstv, 说明并没有将libfirst.so中包含进libsecond.a\n\n3. 编译main.cpp\n```\ng++ -std=c++11 main.cpp -L. -lsecond -lfirst -o main\n```\n- 如果没有链接first, 会发现链接错误, 找不到first函数的定义\n\n\n### 6.5 动态库依赖动态库\n\n1. 生成libfirst.so\n```\ng++ -std=c++11 first.cpp -shared -fPIC -o libfirst.so\n```\n\n2. 生成libsecond.so链接libfirst.so\n```\ng++ -std=c++11 second.cpp -shared -fPIC -o libsecond.so -L. -lfirst\n```\n- nm -u libsecond.so, 可以看到_Z5firstv, 这个就是first函数\n- ldd libsecond.so, 也可以看到libfirst.so\n- 可以看出, 使用libsecond.so时, 仍然需要libfirst.so\n\n3. 编译main.cpp\n```\ng++ -std=c++11 main.cpp -L. -lsecond -o main\n```\n- 可以看出, 能够成功编译。\n- 之前讲过libsecond.so需要依赖libfirst.so, 此处为何我们只链接libsecond.so也能成功呢?这里是因为链接器会自动搜索动态链接库的依赖库\n\n\n\n## 七. 总结\n1. c或者cpp文件经过**编译、链接**生成可执行文件\n2. 单个c文件或者cpp文件是一个编译单元。每个编译单元存在3种符号: 自己使用的, 依赖于外部的以及对外提供的。\n3. 链接器是将多个编译单元的符号相互链接以形成可执行文件。\n4. 库可以分为静态链接库(.a)以及动态链接库(.so)。\n5. 使用库时, 除了库文件, 还需要对应的头文件。\n6. 单个c文件或者cpp文件, 可能依赖其他的库文件, 但是在编译时, 只需要有声明, 并不需要有具体的定义。\n7. 静态库没有链接操作, 静态库只是将多个.o文件打包, 并没有其他操作。静态库可能依赖其他的静态库或者其他的动态库, 用户在使用静态库时, 需要手动链接这些依赖。\n8. 动态库有链接操作, 创建动态库时可以链接其他的库, 也可以不链接, 如果链接静态库, 则会将静态库的内容全部放入动态库, 如果链接动态库, 只是放入符号, 在程序初始化时, 将依赖的这些动态库也加载。如果这个动态库依赖了其他库, 但是没有链接, 也可以生成动态库, 但用户在使用这个动态链接库时, 需要手动链接这些依赖, 由于使用者很难知道这些依赖, 所以通常不使用这种方式。\n9. 总体而言, 动态库在程序执行阶段才会装进程序, 静态库则在链接阶段直接放进程序。动态库可以由多个程序共享, 节省内存，易于升级。静态库外部依赖少, 更易于部署。\n\n\n\n## 八. 扩展\n1. 动态库升级问题?假设现在有2个程序: p1, p2, 一个动态链接库libmath.so.1。如果现在math库提供了新版本libmath.so.2, 程序p1需要使用libmath.so.2的新功能, p2则不想使用, 此时该如何升级math库?\n- 如果math不兼容前一版, 则系统中需要同时存在两个版本的math库, p1, p2分别链接不同的版本\n- 如果math兼容前一版, 系统中是否可以只保留新版的math库呢?此时p1, p2又是否需要重新编译呢?这个问题留给读者自行思考。\n\n2. 某个动态链接库**lib1**动态链接了库**libbase**, 现在应用程序中使用了**lib1**以及**libbase**, 编译应用程序时, 是否需要链接**libbase**?\n- 应用程序不仅需要链接**lib1**, 也需要链接**libbase**\n- 链接**lib1**只能保证应用程序依赖**lib1**的部分能够正确解析\n- 虽然**lib1**动态链接了**libbase**, 但是动态链接真正进行符号解析是在程序执行阶段, 编译阶段无法获取**libbase**的相关信息, 应用程序中如果也使用了**libbase**中的函数, 则必须链接**libbase**, 否则会出现符号未定义\n- 如果**lib1**静态链接了**libbase**, 也就是说包含了**libbase**中的函数, 则应用程序不需要在链接**libbase**\n\n3. 菱形依赖问题, A依赖于B以及C, B、C都依赖于D, 但是是不同版本, 例如B依赖于D1, C依赖于D2, 这种情况下如何链接?\n- D2兼容于D1(ABI层面兼容), 程序直接链接D2\n- D2不兼容于D1, 查看B是否可以依赖D2重新编译\n- 链接器的参数, 直接链接两个版本。ld的参数--default-symver或者--version-script\n\n4. 讨论\n- 动态链接会有大量的依赖问题(windows dll hell)\n- 由于采用模块化, 又允许升级单个模块, 菱形依赖问题对于很多语言都是存在的\n- rust, go等语言都开始采用源码编译的方式, 解决依赖问题\n\n\n## 九. 参考\n- http://blog.chinaunix.net/uid-26548237-id-3837099.html\n- https://www.cnblogs.com/fnlingnzb-learner/p/8119729.html\n- https://blog.csdn.net/coolwaterld/article/details/85088288\n- https://blog.habets.se/2012/05/Shared-libraries-diamond-problem.html\n","slug":"link-library-introduce","published":1,"updated":"2019-08-29T03:13:54.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg5wpdus00056331blwmmgkz","content":"<h2 id=\"一-说明\"><a href=\"#一-说明\" class=\"headerlink\" title=\"一. 说明\"></a>一. 说明</h2><ol>\n<li>本文后续代码的编译以及执行环境为Centos 7.6 x86_64, g++ 4.8.5</li>\n<li>本文后续会用到linux下nm, ldd命令。nm用于查看文件中的符号, 例如变量, 函数名称。ldd用于查看动态链接库或者可执行文件的依赖库(动态链接库)。</li>\n</ol>\n<h2 id=\"二-编译链接\"><a href=\"#二-编译链接\" class=\"headerlink\" title=\"二. 编译链接\"></a>二. 编译链接</h2><ol>\n<li>程序员写出的代码为.c或者.cpp, 这些文件需要经过: <strong>预处理(处理代码中的include, 宏等)、编译(生成汇编代码)、汇编(将汇编代码生成二进制文件)、链接</strong>才能生成可执行程序。<strong>本文将预处理、编译、汇编的过程都看做是编译, 简化读者理解。更多细节可以参考相关资料</strong>。</li>\n<li>生成可执行文件后, 通过终端进行执行</li>\n<li>g++参数说明,</li>\n</ol>\n<ul>\n<li>-std=<code>c++11</code>: 使用c++11标准</li>\n<li>-o: 指定输出文件名称</li>\n</ul>\n<ol start=\"4\">\n<li>链接器ld参数:</li>\n</ol>\n<ul>\n<li>-L: 指定链接时搜索的动态链接库路径</li>\n<li>-l: 链接某个库, 例如链接libmath.so, 写为-lmath</li>\n</ul>\n<h3 id=\"2-1-编译\"><a href=\"#2-1-编译\" class=\"headerlink\" title=\"2.1 编译\"></a>2.1 编译</h3><ol>\n<li>对于c或者<code>c++</code>项目而言, 我们认为单个c或者cpp文件是一个编译单元, 通过编译器(gcc, g++, clang, clang++)可以生成编译后的<strong>二进制文件</strong>。例如: 编译file1.cpp, 可以生成file1.o。对于单个编译单元而言, 里面会有一些符号, 例如函数名称, 变量名称, 类名。这些符号可以分为三类: </li>\n</ol>\n<ul>\n<li>对外提供的, 也就是说其他的编译单元可以使用的</li>\n<li>对外依赖的, 也就是说本单元需要外部的其他编译单元提供的符号</li>\n<li>自己内部使用的, 这种符号只有本编译单元自身需要使用, 外部不可见</li>\n</ul>\n<ol start=\"2\">\n<li>通过nm, 我们可以查看某个编译单元存在哪些符号</li>\n</ol>\n<h3 id=\"2-2-链接\"><a href=\"#2-2-链接\" class=\"headerlink\" title=\"2.2 链接\"></a>2.2 链接</h3><ol>\n<li>C/C++项目中含有很多个c文件或者cpp文件, 这些文件经过编译生成了对应的二进制文件。需要通过链接器将这些文件链接, 进而生成可执行程序。</li>\n<li>linux下链接器为ld, 利用该工具我们可以将这些文件链接, 进而生成可执行程序。</li>\n<li><strong>在进行链接时, 每个编译单元需要的符号, 都需要能够找到对应的定义。例如: 某个编译单元需要其他编译单元提供符号fun1, 这是一个函数, 如果链接器没能从其他编译单元找到这个符号, 就会报我们经常看到的未定义错误。若果出现多次, 则会报出重复定义的错误。</strong></li>\n</ol>\n<h3 id=\"2-3-示例\"><a href=\"#2-3-示例\" class=\"headerlink\" title=\"2.3 示例\"></a>2.3 示例</h3><ol>\n<li><p>math.h</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _MATH_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _MATH_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>math.cpp</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"math.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>main.cpp</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"math.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">100</span>, b = <span class=\"number\">200</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = add(a, b);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; result &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成可执行文件</p>\n</li>\n</ol>\n<ul>\n<li>编译math.cpp: g++ -std=c++11 -c math.cpp, 生成math.o</li>\n<li>编译main.cpp: g++ -std=c++11 -c main.cpp, 生成main.o</li>\n<li>生成可以执行的文件: g++ -v math.o main.o -o main, 可以看到g++的编译链接过程</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Using built-in specs.</span><br><span class=\"line\">COLLECT_GCC=g++</span><br><span class=\"line\">COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/lto-wrapper</span><br><span class=\"line\">Target: x86_64-redhat-linux</span><br><span class=\"line\">Configured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-linker-build-id --with-linker-hash-style=gnu --enable-languages=c,c++,objc,obj-c++,java,fortran,ada,go,lto --enable-plugin --enable-initfini-array --disable-libgcj --with-isl=/builddir/build/BUILD/gcc-4.8.5-20150702/obj-x86_64-redhat-linux/isl-install --with-cloog=/builddir/build/BUILD/gcc-4.8.5-20150702/obj-x86_64-redhat-linux/cloog-install --enable-gnu-indirect-function --with-tune=generic --with-arch_32=x86-64 --build=x86_64-redhat-linux</span><br><span class=\"line\">Thread model: posix</span><br><span class=\"line\">gcc version 4.8.5 20150623 (Red Hat 4.8.5-36) (GCC)</span><br><span class=\"line\">COMPILER_PATH=/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/:/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/:/usr/libexec/gcc/x86_64-redhat-linux/:/usr/lib/gcc/x86_64-redhat-linux/4.8.5/:/usr/lib/gcc/x86_64-redhat-linux/</span><br><span class=\"line\">LIBRARY_PATH=/usr/lib/gcc/x86_64-redhat-linux/4.8.5/:/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/:/lib/../lib64/:/usr/lib/../lib64/:/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../:/lib/:/usr/lib/</span><br><span class=\"line\">COLLECT_GCC_OPTIONS=&apos;-v&apos; &apos;-o&apos; &apos;main&apos; &apos;-shared-libgcc&apos; &apos;-mtune=generic&apos; &apos;-march=x86-64&apos;</span><br><span class=\"line\">/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/collect2 --build-id --no-add-needed --eh-frame-hdr --hash-style=gnu -m elf_x86_64 -dynamic-linker /lib64/ld-linux-x86-64.so.2 -o main /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crt1.o /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crti.o /usr/lib/gcc/x86_64-redhat-linux/4.8.5/crtbegin.o -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5 -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64 -L/lib/../lib64 -L/usr/lib/../lib64 -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../.. main.o math.o -lstdc++ -lm -lgcc_s -lgcc -lc -lgcc_s -lgcc /usr/lib/gcc/x86_64-redhat-linux/4.8.5/crtend.o /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crtn.o</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>其中最后一行调用collect2(对ld进行了包装)会执行真正的链接操作, 我们直接调用这一句也可以生成main可执行文件</strong></li>\n<li>可以看出linux下的链接操作比较复杂, 不是简单的ld main.o math.o即可成功的。</li>\n</ul>\n<h2 id=\"三-问题\"><a href=\"#三-问题\" class=\"headerlink\" title=\"三. 问题\"></a>三. 问题</h2><p>通过上面的介绍, 我们知道一个c/cpp文件通过编译链接, 最终生成可执行文件。无论任何语言, 程序员在写代码时, 都不可避免需要使用到库, 本文主要介绍C/C++中的库, 总体而言, 我们将这些库分为静态链接库(通常以.a结尾)，动态链接库(通常以.so结尾)。首先我们来看几个问题:</p>\n<ol>\n<li>什么是静态链接库?什么是动态链接库?</li>\n<li>静态链接库如何生成?动态链接库如何生成?</li>\n<li>静态链接库是否可以依赖其他的静态链接库? 是否可以依赖其他动态链接库?</li>\n<li>动态链接库是否可以依赖其他的静态链接库? 是否可以依赖其他的动态链接库?</li>\n<li>链接静态库时?其依赖的库该如何链接?</li>\n<li>链接动态库时?其依赖的库该如何链接?</li>\n<li>使用第三方库时, 使用静态链接库还是动态链接库?</li>\n</ol>\n<h2 id=\"四-Hello-World\"><a href=\"#四-Hello-World\" class=\"headerlink\" title=\"四. Hello World\"></a>四. Hello World</h2><p>本节以hello world为例,</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"hello world\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>编译程序: g++ -std=c++11 -o main main.cpp</li>\n<li>使用ldd查看main的依赖: ldd main</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">linux-vdso.so.1 =&gt;  (0x00007ffcf53fa000)</span><br><span class=\"line\">libstdc++.so.6 =&gt; /lib64/libstdc++.so.6 (0x00007f7828b3b000)</span><br><span class=\"line\">libm.so.6 =&gt; /lib64/libm.so.6 (0x00007f7828839000)</span><br><span class=\"line\">libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00007f7828623000)</span><br><span class=\"line\">libc.so.6 =&gt; /lib64/libc.so.6 (0x00007f7828256000)</span><br><span class=\"line\">/lib64/ld-linux-x86-64.so.2 (0x00007f7828e42000)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可以看出, <strong>最简单的hello world程序也需要链接一些库</strong></li>\n<li>上述的几种链接库, 感兴趣的可以逐个研究</li>\n</ul>\n<h2 id=\"五-动态链接库-vs-静态链接库\"><a href=\"#五-动态链接库-vs-静态链接库\" class=\"headerlink\" title=\"五. 动态链接库 vs 静态链接库\"></a>五. 动态链接库 vs 静态链接库</h2><ol>\n<li>本节以2.3中的示例代码为例, 将math.h, math.cpp打包为静态链接库以及动态链接库, 在main.cpp中引用</li>\n</ol>\n<h3 id=\"5-1-静态链接库\"><a href=\"#5-1-静态链接库\" class=\"headerlink\" title=\"5.1 静态链接库\"></a>5.1 静态链接库</h3><ol>\n<li>编译: g++ -std=c++11 -fPIC -c math.cpp</li>\n</ol>\n<ul>\n<li>fPIC用于生成位置无关的代码, 更多细节可以查找相关资料</li>\n</ul>\n<ol start=\"2\">\n<li>生成静态链接库: ar -crv libmath.a math.o</li>\n<li>使用这个静态链接库:</li>\n</ol>\n<ul>\n<li>使用静态库时, 我们需要math.h文件, 这个文件中定义了这个库对外提供的功能</li>\n<li>除了math.h文件, 我们需要在链接阶段链接libmath.a</li>\n</ul>\n<ol start=\"4\">\n<li>示例: main.cpp中已经导入了math.h文件, 编译main.c并链接libmath.a, g++ -std=c++11 -o main main.cpp -L. -lmath</li>\n<li>ldd main可以看出, main文件不再依赖libmath.a文件</li>\n</ol>\n<h3 id=\"5-2-动态链接库\"><a href=\"#5-2-动态链接库\" class=\"headerlink\" title=\"5.2 动态链接库\"></a>5.2 动态链接库</h3><ol>\n<li>生成动态链接库: g++ -std=c++11 -shared -fPIC math.cpp -o libmath.so</li>\n<li>使用动态链接库:</li>\n</ol>\n<ul>\n<li>需要使用math.h头文件, 该文件定义了库对外提供的功能</li>\n<li>链接阶段需要链接libmath.so</li>\n</ul>\n<ol start=\"3\">\n<li>示例: g++ -std=c++11 -o main main.cpp -L. -lmath</li>\n<li><p>执行main, 会发现无法执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./main: error while loading shared libraries: libmath.so: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>我们先用ldd 查看main的依赖库:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">linux-vdso.so.1 =&gt;  (0x00007ffd2adde000)</span><br><span class=\"line\">libmath.so =&gt; not found</span><br><span class=\"line\">libstdc++.so.6 =&gt; /lib64/libstdc++.so.6 (0x00007fd3b7ee6000)</span><br><span class=\"line\">libm.so.6 =&gt; /lib64/libm.so.6 (0x00007fd3b7be4000)</span><br><span class=\"line\">libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00007fd3b79ce000)</span><br><span class=\"line\">libc.so.6 =&gt; /lib64/libc.so.6 (0x00007fd3b7601000)</span><br><span class=\"line\">/lib64/ld-linux-x86-64.so.2 (0x00007fd3b81ed000)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>很奇怪, libmath.so没有找到, 我们在第三步编译时明明将这个库加入进去了。这个是由于, 在链接阶段, 链接器可以在当前目录找到libmath.so。执行阶段, 搜索动态链接库时, 并没有包含当前目录, 所以报错。我们可以通过export LD_LIBRARY_PATH=/libpath将libmath.so所在路径放入动态链接库的搜索路径中。此时即可成功执行。</p>\n<h3 id=\"5-3-对比\"><a href=\"#5-3-对比\" class=\"headerlink\" title=\"5.3 对比\"></a>5.3 对比</h3><ol>\n<li>静态链接库, 动态链接库都是二进制文件(ELF格式, 详细信息可以查找相关资料)</li>\n<li>从静态链接库生成的过程来看, 其本质就是将多个编译单元(.o文件), 打包为一个新的文件。链接静态链接库时, 会将静态链接库的代码合并进程序中。</li>\n<li>链接动态链接库时, 并不会将动态链接库的内容合并进代码中, 而是在程序执行时, 搜索动态链接库, 再进行链接。</li>\n</ol>\n<h2 id=\"六-库之间的依赖\"><a href=\"#六-库之间的依赖\" class=\"headerlink\" title=\"六. 库之间的依赖\"></a>六. 库之间的依赖</h2><h3 id=\"6-1-源代码\"><a href=\"#6-1-源代码\" class=\"headerlink\" title=\"6.1 源代码\"></a>6.1 源代码</h3><ol>\n<li><p>first.h</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __FIRST_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __FIRST_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">first</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>first.cpp</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"first.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">first</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is first!\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>second.h</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __SECOND_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __SECOND_H_</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">second</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>second.cpp</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"first.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"second.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">second</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is second!\\n\"</span>);</span><br><span class=\"line\">    first();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>main.cpp</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&quot;second.h&quot;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    second();</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"6-2-静态库依赖静态库\"><a href=\"#6-2-静态库依赖静态库\" class=\"headerlink\" title=\"6.2 静态库依赖静态库\"></a>6.2 静态库依赖静态库</h3><ol>\n<li><p>生成libfirst.a静态链接库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -std=c++11 -fPIC -c first.cpp</span><br><span class=\"line\">ar -crv libfirst.a first.o</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成libsecond.a并链接libfirst.a</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -std=c++11 -c second.cpp -L. -lfirst</span><br><span class=\"line\">ar -crv libsecond.a second.o</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>main.cpp中使用libsecond.a<br>执行: g++ -std=c++11 main.cpp -L. -lsecond -o main<br>会出现以下错误:<br>./libsecond.a(second.o): In function <code>second()&#39;:\nsecond.cpp:(.text+0xf): undefined reference to</code>first()’<br>collect2: error: ld returned 1 exit status</p>\n</li>\n</ol>\n<ol start=\"4\">\n<li>解释说明</li>\n</ol>\n<ul>\n<li>通过nm, 我们查看libsecond.a中的符号, 找出未定义的符号, 执行nm -u libsecond.a, 即可发现first并没有定义(编译器编译后的符号并不是first, 我这里是_Z5firstv)。我们明明在生成libsecond.a时链接了libfirst.a?</li>\n<li>主要的原因是: 生成静态链接库时, 只是将second.cpp生成的second.o打包, 并没有真正的将libfirst.a中的内容链接进libsecond.a</li>\n<li>静态库不与其他静态库链接。我们使用archiver工具(例如Linux上的ar)将多个静态链接库打包为一个静态链接库</li>\n</ul>\n<ol start=\"5\">\n<li>解决方案</li>\n</ol>\n<ul>\n<li>将first.cpp, second.cpp打包为一个静态链接库: g++ -std=c++11 -fPIC -c first.cpp second.cpp, ar -crv libsecond.a first.o second.o。main中可以直接链接libsecond.a即可</li>\n<li>同时链接libsecond.a, libfirst.a</li>\n</ul>\n<h3 id=\"6-3-动态库依赖静态库\"><a href=\"#6-3-动态库依赖静态库\" class=\"headerlink\" title=\"6.3 动态库依赖静态库\"></a>6.3 动态库依赖静态库</h3><ol>\n<li>生成libfirst.a静态链接库, 这一步与5.2节相同</li>\n<li>生成libsecond.so静态链接libfirst.a<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -std=c++11 second.cpp -fPIC -shared -o libsecond.so -L. -lfirst</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>nm -u libseond.so, 我们可以看出, 并没有出现first, 也就是说, libfirst.a已经被链接进libsecond.so中了</li>\n</ul>\n<ol start=\"3\">\n<li>编译main.cpp<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -std=c++11 main.cpp -L. -lsecond -o main</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"6-4-静态库依赖动态库\"><a href=\"#6-4-静态库依赖动态库\" class=\"headerlink\" title=\"6.4 静态库依赖动态库\"></a>6.4 静态库依赖动态库</h3><ol>\n<li><p>生成libfirst.so</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -std=c++11 first.cpp -shared -fPIC -o libfirst.so</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成libsecond.a链接libfirst.so</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -std=c++11 -c second.cpp -fPIC -L. -lfirst</span><br><span class=\"line\">ar crv libsecond.a second.o</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>nm -u libsecond.a, 可以看到_Z5firstv, 说明并没有将libfirst.so中包含进libsecond.a</li>\n</ul>\n<ol start=\"3\">\n<li>编译main.cpp<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -std=c++11 main.cpp -L. -lsecond -lfirst -o main</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>如果没有链接first, 会发现链接错误, 找不到first函数的定义</li>\n</ul>\n<h3 id=\"6-5-动态库依赖动态库\"><a href=\"#6-5-动态库依赖动态库\" class=\"headerlink\" title=\"6.5 动态库依赖动态库\"></a>6.5 动态库依赖动态库</h3><ol>\n<li><p>生成libfirst.so</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -std=c++11 first.cpp -shared -fPIC -o libfirst.so</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成libsecond.so链接libfirst.so</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -std=c++11 second.cpp -shared -fPIC -o libsecond.so -L. -lfirst</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>nm -u libsecond.so, 可以看到_Z5firstv, 这个就是first函数</li>\n<li>ldd libsecond.so, 也可以看到libfirst.so</li>\n<li>可以看出, 使用libsecond.so时, 仍然需要libfirst.so</li>\n</ul>\n<ol start=\"3\">\n<li>编译main.cpp<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -std=c++11 main.cpp -L. -lsecond -o main</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>可以看出, 能够成功编译。</li>\n<li>之前讲过libsecond.so需要依赖libfirst.so, 此处为何我们只链接libsecond.so也能成功呢?这里是因为链接器会自动搜索动态链接库的依赖库</li>\n</ul>\n<h2 id=\"七-总结\"><a href=\"#七-总结\" class=\"headerlink\" title=\"七. 总结\"></a>七. 总结</h2><ol>\n<li>c或者cpp文件经过<strong>编译、链接</strong>生成可执行文件</li>\n<li>单个c文件或者cpp文件是一个编译单元。每个编译单元存在3种符号: 自己使用的, 依赖于外部的以及对外提供的。</li>\n<li>链接器是将多个编译单元的符号相互链接以形成可执行文件。</li>\n<li>库可以分为静态链接库(.a)以及动态链接库(.so)。</li>\n<li>使用库时, 除了库文件, 还需要对应的头文件。</li>\n<li>单个c文件或者cpp文件, 可能依赖其他的库文件, 但是在编译时, 只需要有声明, 并不需要有具体的定义。</li>\n<li>静态库没有链接操作, 静态库只是将多个.o文件打包, 并没有其他操作。静态库可能依赖其他的静态库或者其他的动态库, 用户在使用静态库时, 需要手动链接这些依赖。</li>\n<li>动态库有链接操作, 创建动态库时可以链接其他的库, 也可以不链接, 如果链接静态库, 则会将静态库的内容全部放入动态库, 如果链接动态库, 只是放入符号, 在程序初始化时, 将依赖的这些动态库也加载。如果这个动态库依赖了其他库, 但是没有链接, 也可以生成动态库, 但用户在使用这个动态链接库时, 需要手动链接这些依赖, 由于使用者很难知道这些依赖, 所以通常不使用这种方式。</li>\n<li>总体而言, 动态库在程序执行阶段才会装进程序, 静态库则在链接阶段直接放进程序。动态库可以由多个程序共享, 节省内存，易于升级。静态库外部依赖少, 更易于部署。</li>\n</ol>\n<h2 id=\"八-扩展\"><a href=\"#八-扩展\" class=\"headerlink\" title=\"八. 扩展\"></a>八. 扩展</h2><ol>\n<li>动态库升级问题?假设现在有2个程序: p1, p2, 一个动态链接库libmath.so.1。如果现在math库提供了新版本libmath.so.2, 程序p1需要使用libmath.so.2的新功能, p2则不想使用, 此时该如何升级math库?</li>\n</ol>\n<ul>\n<li>如果math不兼容前一版, 则系统中需要同时存在两个版本的math库, p1, p2分别链接不同的版本</li>\n<li>如果math兼容前一版, 系统中是否可以只保留新版的math库呢?此时p1, p2又是否需要重新编译呢?这个问题留给读者自行思考。</li>\n</ul>\n<ol start=\"2\">\n<li>某个动态链接库<strong>lib1</strong>动态链接了库<strong>libbase</strong>, 现在应用程序中使用了<strong>lib1</strong>以及<strong>libbase</strong>, 编译应用程序时, 是否需要链接<strong>libbase</strong>?</li>\n</ol>\n<ul>\n<li>应用程序不仅需要链接<strong>lib1</strong>, 也需要链接<strong>libbase</strong></li>\n<li>链接<strong>lib1</strong>只能保证应用程序依赖<strong>lib1</strong>的部分能够正确解析</li>\n<li>虽然<strong>lib1</strong>动态链接了<strong>libbase</strong>, 但是动态链接真正进行符号解析是在程序执行阶段, 编译阶段无法获取<strong>libbase</strong>的相关信息, 应用程序中如果也使用了<strong>libbase</strong>中的函数, 则必须链接<strong>libbase</strong>, 否则会出现符号未定义</li>\n<li>如果<strong>lib1</strong>静态链接了<strong>libbase</strong>, 也就是说包含了<strong>libbase</strong>中的函数, 则应用程序不需要在链接<strong>libbase</strong></li>\n</ul>\n<ol start=\"3\">\n<li>菱形依赖问题, A依赖于B以及C, B、C都依赖于D, 但是是不同版本, 例如B依赖于D1, C依赖于D2, 这种情况下如何链接?</li>\n</ol>\n<ul>\n<li>D2兼容于D1(ABI层面兼容), 程序直接链接D2</li>\n<li>D2不兼容于D1, 查看B是否可以依赖D2重新编译</li>\n<li>链接器的参数, 直接链接两个版本。ld的参数–default-symver或者–version-script</li>\n</ul>\n<ol start=\"4\">\n<li>讨论</li>\n</ol>\n<ul>\n<li>动态链接会有大量的依赖问题(windows dll hell)</li>\n<li>由于采用模块化, 又允许升级单个模块, 菱形依赖问题对于很多语言都是存在的</li>\n<li>rust, go等语言都开始采用源码编译的方式, 解决依赖问题</li>\n</ul>\n<h2 id=\"九-参考\"><a href=\"#九-参考\" class=\"headerlink\" title=\"九. 参考\"></a>九. 参考</h2><ul>\n<li><a href=\"http://blog.chinaunix.net/uid-26548237-id-3837099.html\" target=\"_blank\" rel=\"noopener\">http://blog.chinaunix.net/uid-26548237-id-3837099.html</a></li>\n<li><a href=\"https://www.cnblogs.com/fnlingnzb-learner/p/8119729.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/fnlingnzb-learner/p/8119729.html</a></li>\n<li><a href=\"https://blog.csdn.net/coolwaterld/article/details/85088288\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/coolwaterld/article/details/85088288</a></li>\n<li><a href=\"https://blog.habets.se/2012/05/Shared-libraries-diamond-problem.html\" target=\"_blank\" rel=\"noopener\">https://blog.habets.se/2012/05/Shared-libraries-diamond-problem.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-说明\"><a href=\"#一-说明\" class=\"headerlink\" title=\"一. 说明\"></a>一. 说明</h2><ol>\n<li>本文后续代码的编译以及执行环境为Centos 7.6 x86_64, g++ 4.8.5</li>\n<li>本文后续会用到linux下nm, ldd命令。nm用于查看文件中的符号, 例如变量, 函数名称。ldd用于查看动态链接库或者可执行文件的依赖库(动态链接库)。</li>\n</ol>\n<h2 id=\"二-编译链接\"><a href=\"#二-编译链接\" class=\"headerlink\" title=\"二. 编译链接\"></a>二. 编译链接</h2><ol>\n<li>程序员写出的代码为.c或者.cpp, 这些文件需要经过: <strong>预处理(处理代码中的include, 宏等)、编译(生成汇编代码)、汇编(将汇编代码生成二进制文件)、链接</strong>才能生成可执行程序。<strong>本文将预处理、编译、汇编的过程都看做是编译, 简化读者理解。更多细节可以参考相关资料</strong>。</li>\n<li>生成可执行文件后, 通过终端进行执行</li>\n<li>g++参数说明,</li>\n</ol>\n<ul>\n<li>-std=<code>c++11</code>: 使用c++11标准</li>\n<li>-o: 指定输出文件名称</li>\n</ul>\n<ol start=\"4\">\n<li>链接器ld参数:</li>\n</ol>\n<ul>\n<li>-L: 指定链接时搜索的动态链接库路径</li>\n<li>-l: 链接某个库, 例如链接libmath.so, 写为-lmath</li>\n</ul>\n<h3 id=\"2-1-编译\"><a href=\"#2-1-编译\" class=\"headerlink\" title=\"2.1 编译\"></a>2.1 编译</h3><ol>\n<li>对于c或者<code>c++</code>项目而言, 我们认为单个c或者cpp文件是一个编译单元, 通过编译器(gcc, g++, clang, clang++)可以生成编译后的<strong>二进制文件</strong>。例如: 编译file1.cpp, 可以生成file1.o。对于单个编译单元而言, 里面会有一些符号, 例如函数名称, 变量名称, 类名。这些符号可以分为三类: </li>\n</ol>\n<ul>\n<li>对外提供的, 也就是说其他的编译单元可以使用的</li>\n<li>对外依赖的, 也就是说本单元需要外部的其他编译单元提供的符号</li>\n<li>自己内部使用的, 这种符号只有本编译单元自身需要使用, 外部不可见</li>\n</ul>\n<ol start=\"2\">\n<li>通过nm, 我们可以查看某个编译单元存在哪些符号</li>\n</ol>\n<h3 id=\"2-2-链接\"><a href=\"#2-2-链接\" class=\"headerlink\" title=\"2.2 链接\"></a>2.2 链接</h3><ol>\n<li>C/C++项目中含有很多个c文件或者cpp文件, 这些文件经过编译生成了对应的二进制文件。需要通过链接器将这些文件链接, 进而生成可执行程序。</li>\n<li>linux下链接器为ld, 利用该工具我们可以将这些文件链接, 进而生成可执行程序。</li>\n<li><strong>在进行链接时, 每个编译单元需要的符号, 都需要能够找到对应的定义。例如: 某个编译单元需要其他编译单元提供符号fun1, 这是一个函数, 如果链接器没能从其他编译单元找到这个符号, 就会报我们经常看到的未定义错误。若果出现多次, 则会报出重复定义的错误。</strong></li>\n</ol>\n<h3 id=\"2-3-示例\"><a href=\"#2-3-示例\" class=\"headerlink\" title=\"2.3 示例\"></a>2.3 示例</h3><ol>\n<li><p>math.h</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _MATH_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _MATH_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>math.cpp</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"math.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>main.cpp</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"math.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">100</span>, b = <span class=\"number\">200</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = add(a, b);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; result &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成可执行文件</p>\n</li>\n</ol>\n<ul>\n<li>编译math.cpp: g++ -std=c++11 -c math.cpp, 生成math.o</li>\n<li>编译main.cpp: g++ -std=c++11 -c main.cpp, 生成main.o</li>\n<li>生成可以执行的文件: g++ -v math.o main.o -o main, 可以看到g++的编译链接过程</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Using built-in specs.</span><br><span class=\"line\">COLLECT_GCC=g++</span><br><span class=\"line\">COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/lto-wrapper</span><br><span class=\"line\">Target: x86_64-redhat-linux</span><br><span class=\"line\">Configured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-linker-build-id --with-linker-hash-style=gnu --enable-languages=c,c++,objc,obj-c++,java,fortran,ada,go,lto --enable-plugin --enable-initfini-array --disable-libgcj --with-isl=/builddir/build/BUILD/gcc-4.8.5-20150702/obj-x86_64-redhat-linux/isl-install --with-cloog=/builddir/build/BUILD/gcc-4.8.5-20150702/obj-x86_64-redhat-linux/cloog-install --enable-gnu-indirect-function --with-tune=generic --with-arch_32=x86-64 --build=x86_64-redhat-linux</span><br><span class=\"line\">Thread model: posix</span><br><span class=\"line\">gcc version 4.8.5 20150623 (Red Hat 4.8.5-36) (GCC)</span><br><span class=\"line\">COMPILER_PATH=/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/:/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/:/usr/libexec/gcc/x86_64-redhat-linux/:/usr/lib/gcc/x86_64-redhat-linux/4.8.5/:/usr/lib/gcc/x86_64-redhat-linux/</span><br><span class=\"line\">LIBRARY_PATH=/usr/lib/gcc/x86_64-redhat-linux/4.8.5/:/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/:/lib/../lib64/:/usr/lib/../lib64/:/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../:/lib/:/usr/lib/</span><br><span class=\"line\">COLLECT_GCC_OPTIONS=&apos;-v&apos; &apos;-o&apos; &apos;main&apos; &apos;-shared-libgcc&apos; &apos;-mtune=generic&apos; &apos;-march=x86-64&apos;</span><br><span class=\"line\">/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/collect2 --build-id --no-add-needed --eh-frame-hdr --hash-style=gnu -m elf_x86_64 -dynamic-linker /lib64/ld-linux-x86-64.so.2 -o main /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crt1.o /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crti.o /usr/lib/gcc/x86_64-redhat-linux/4.8.5/crtbegin.o -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5 -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64 -L/lib/../lib64 -L/usr/lib/../lib64 -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../.. main.o math.o -lstdc++ -lm -lgcc_s -lgcc -lc -lgcc_s -lgcc /usr/lib/gcc/x86_64-redhat-linux/4.8.5/crtend.o /usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64/crtn.o</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>其中最后一行调用collect2(对ld进行了包装)会执行真正的链接操作, 我们直接调用这一句也可以生成main可执行文件</strong></li>\n<li>可以看出linux下的链接操作比较复杂, 不是简单的ld main.o math.o即可成功的。</li>\n</ul>\n<h2 id=\"三-问题\"><a href=\"#三-问题\" class=\"headerlink\" title=\"三. 问题\"></a>三. 问题</h2><p>通过上面的介绍, 我们知道一个c/cpp文件通过编译链接, 最终生成可执行文件。无论任何语言, 程序员在写代码时, 都不可避免需要使用到库, 本文主要介绍C/C++中的库, 总体而言, 我们将这些库分为静态链接库(通常以.a结尾)，动态链接库(通常以.so结尾)。首先我们来看几个问题:</p>\n<ol>\n<li>什么是静态链接库?什么是动态链接库?</li>\n<li>静态链接库如何生成?动态链接库如何生成?</li>\n<li>静态链接库是否可以依赖其他的静态链接库? 是否可以依赖其他动态链接库?</li>\n<li>动态链接库是否可以依赖其他的静态链接库? 是否可以依赖其他的动态链接库?</li>\n<li>链接静态库时?其依赖的库该如何链接?</li>\n<li>链接动态库时?其依赖的库该如何链接?</li>\n<li>使用第三方库时, 使用静态链接库还是动态链接库?</li>\n</ol>\n<h2 id=\"四-Hello-World\"><a href=\"#四-Hello-World\" class=\"headerlink\" title=\"四. Hello World\"></a>四. Hello World</h2><p>本节以hello world为例,</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"hello world\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>编译程序: g++ -std=c++11 -o main main.cpp</li>\n<li>使用ldd查看main的依赖: ldd main</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">linux-vdso.so.1 =&gt;  (0x00007ffcf53fa000)</span><br><span class=\"line\">libstdc++.so.6 =&gt; /lib64/libstdc++.so.6 (0x00007f7828b3b000)</span><br><span class=\"line\">libm.so.6 =&gt; /lib64/libm.so.6 (0x00007f7828839000)</span><br><span class=\"line\">libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00007f7828623000)</span><br><span class=\"line\">libc.so.6 =&gt; /lib64/libc.so.6 (0x00007f7828256000)</span><br><span class=\"line\">/lib64/ld-linux-x86-64.so.2 (0x00007f7828e42000)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可以看出, <strong>最简单的hello world程序也需要链接一些库</strong></li>\n<li>上述的几种链接库, 感兴趣的可以逐个研究</li>\n</ul>\n<h2 id=\"五-动态链接库-vs-静态链接库\"><a href=\"#五-动态链接库-vs-静态链接库\" class=\"headerlink\" title=\"五. 动态链接库 vs 静态链接库\"></a>五. 动态链接库 vs 静态链接库</h2><ol>\n<li>本节以2.3中的示例代码为例, 将math.h, math.cpp打包为静态链接库以及动态链接库, 在main.cpp中引用</li>\n</ol>\n<h3 id=\"5-1-静态链接库\"><a href=\"#5-1-静态链接库\" class=\"headerlink\" title=\"5.1 静态链接库\"></a>5.1 静态链接库</h3><ol>\n<li>编译: g++ -std=c++11 -fPIC -c math.cpp</li>\n</ol>\n<ul>\n<li>fPIC用于生成位置无关的代码, 更多细节可以查找相关资料</li>\n</ul>\n<ol start=\"2\">\n<li>生成静态链接库: ar -crv libmath.a math.o</li>\n<li>使用这个静态链接库:</li>\n</ol>\n<ul>\n<li>使用静态库时, 我们需要math.h文件, 这个文件中定义了这个库对外提供的功能</li>\n<li>除了math.h文件, 我们需要在链接阶段链接libmath.a</li>\n</ul>\n<ol start=\"4\">\n<li>示例: main.cpp中已经导入了math.h文件, 编译main.c并链接libmath.a, g++ -std=c++11 -o main main.cpp -L. -lmath</li>\n<li>ldd main可以看出, main文件不再依赖libmath.a文件</li>\n</ol>\n<h3 id=\"5-2-动态链接库\"><a href=\"#5-2-动态链接库\" class=\"headerlink\" title=\"5.2 动态链接库\"></a>5.2 动态链接库</h3><ol>\n<li>生成动态链接库: g++ -std=c++11 -shared -fPIC math.cpp -o libmath.so</li>\n<li>使用动态链接库:</li>\n</ol>\n<ul>\n<li>需要使用math.h头文件, 该文件定义了库对外提供的功能</li>\n<li>链接阶段需要链接libmath.so</li>\n</ul>\n<ol start=\"3\">\n<li>示例: g++ -std=c++11 -o main main.cpp -L. -lmath</li>\n<li><p>执行main, 会发现无法执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./main: error while loading shared libraries: libmath.so: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>我们先用ldd 查看main的依赖库:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">linux-vdso.so.1 =&gt;  (0x00007ffd2adde000)</span><br><span class=\"line\">libmath.so =&gt; not found</span><br><span class=\"line\">libstdc++.so.6 =&gt; /lib64/libstdc++.so.6 (0x00007fd3b7ee6000)</span><br><span class=\"line\">libm.so.6 =&gt; /lib64/libm.so.6 (0x00007fd3b7be4000)</span><br><span class=\"line\">libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00007fd3b79ce000)</span><br><span class=\"line\">libc.so.6 =&gt; /lib64/libc.so.6 (0x00007fd3b7601000)</span><br><span class=\"line\">/lib64/ld-linux-x86-64.so.2 (0x00007fd3b81ed000)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>很奇怪, libmath.so没有找到, 我们在第三步编译时明明将这个库加入进去了。这个是由于, 在链接阶段, 链接器可以在当前目录找到libmath.so。执行阶段, 搜索动态链接库时, 并没有包含当前目录, 所以报错。我们可以通过export LD_LIBRARY_PATH=/libpath将libmath.so所在路径放入动态链接库的搜索路径中。此时即可成功执行。</p>\n<h3 id=\"5-3-对比\"><a href=\"#5-3-对比\" class=\"headerlink\" title=\"5.3 对比\"></a>5.3 对比</h3><ol>\n<li>静态链接库, 动态链接库都是二进制文件(ELF格式, 详细信息可以查找相关资料)</li>\n<li>从静态链接库生成的过程来看, 其本质就是将多个编译单元(.o文件), 打包为一个新的文件。链接静态链接库时, 会将静态链接库的代码合并进程序中。</li>\n<li>链接动态链接库时, 并不会将动态链接库的内容合并进代码中, 而是在程序执行时, 搜索动态链接库, 再进行链接。</li>\n</ol>\n<h2 id=\"六-库之间的依赖\"><a href=\"#六-库之间的依赖\" class=\"headerlink\" title=\"六. 库之间的依赖\"></a>六. 库之间的依赖</h2><h3 id=\"6-1-源代码\"><a href=\"#6-1-源代码\" class=\"headerlink\" title=\"6.1 源代码\"></a>6.1 源代码</h3><ol>\n<li><p>first.h</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __FIRST_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __FIRST_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">first</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>first.cpp</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"first.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">first</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is first!\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>second.h</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> __SECOND_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __SECOND_H_</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">second</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>second.cpp</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"first.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">\"second.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">second</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is second!\\n\"</span>);</span><br><span class=\"line\">    first();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>main.cpp</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&quot;second.h&quot;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    second();</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"6-2-静态库依赖静态库\"><a href=\"#6-2-静态库依赖静态库\" class=\"headerlink\" title=\"6.2 静态库依赖静态库\"></a>6.2 静态库依赖静态库</h3><ol>\n<li><p>生成libfirst.a静态链接库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -std=c++11 -fPIC -c first.cpp</span><br><span class=\"line\">ar -crv libfirst.a first.o</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成libsecond.a并链接libfirst.a</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -std=c++11 -c second.cpp -L. -lfirst</span><br><span class=\"line\">ar -crv libsecond.a second.o</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>main.cpp中使用libsecond.a<br>执行: g++ -std=c++11 main.cpp -L. -lsecond -o main<br>会出现以下错误:<br>./libsecond.a(second.o): In function <code>second()&#39;:\nsecond.cpp:(.text+0xf): undefined reference to</code>first()’<br>collect2: error: ld returned 1 exit status</p>\n</li>\n</ol>\n<ol start=\"4\">\n<li>解释说明</li>\n</ol>\n<ul>\n<li>通过nm, 我们查看libsecond.a中的符号, 找出未定义的符号, 执行nm -u libsecond.a, 即可发现first并没有定义(编译器编译后的符号并不是first, 我这里是_Z5firstv)。我们明明在生成libsecond.a时链接了libfirst.a?</li>\n<li>主要的原因是: 生成静态链接库时, 只是将second.cpp生成的second.o打包, 并没有真正的将libfirst.a中的内容链接进libsecond.a</li>\n<li>静态库不与其他静态库链接。我们使用archiver工具(例如Linux上的ar)将多个静态链接库打包为一个静态链接库</li>\n</ul>\n<ol start=\"5\">\n<li>解决方案</li>\n</ol>\n<ul>\n<li>将first.cpp, second.cpp打包为一个静态链接库: g++ -std=c++11 -fPIC -c first.cpp second.cpp, ar -crv libsecond.a first.o second.o。main中可以直接链接libsecond.a即可</li>\n<li>同时链接libsecond.a, libfirst.a</li>\n</ul>\n<h3 id=\"6-3-动态库依赖静态库\"><a href=\"#6-3-动态库依赖静态库\" class=\"headerlink\" title=\"6.3 动态库依赖静态库\"></a>6.3 动态库依赖静态库</h3><ol>\n<li>生成libfirst.a静态链接库, 这一步与5.2节相同</li>\n<li>生成libsecond.so静态链接libfirst.a<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -std=c++11 second.cpp -fPIC -shared -o libsecond.so -L. -lfirst</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>nm -u libseond.so, 我们可以看出, 并没有出现first, 也就是说, libfirst.a已经被链接进libsecond.so中了</li>\n</ul>\n<ol start=\"3\">\n<li>编译main.cpp<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -std=c++11 main.cpp -L. -lsecond -o main</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"6-4-静态库依赖动态库\"><a href=\"#6-4-静态库依赖动态库\" class=\"headerlink\" title=\"6.4 静态库依赖动态库\"></a>6.4 静态库依赖动态库</h3><ol>\n<li><p>生成libfirst.so</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -std=c++11 first.cpp -shared -fPIC -o libfirst.so</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成libsecond.a链接libfirst.so</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -std=c++11 -c second.cpp -fPIC -L. -lfirst</span><br><span class=\"line\">ar crv libsecond.a second.o</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>nm -u libsecond.a, 可以看到_Z5firstv, 说明并没有将libfirst.so中包含进libsecond.a</li>\n</ul>\n<ol start=\"3\">\n<li>编译main.cpp<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -std=c++11 main.cpp -L. -lsecond -lfirst -o main</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>如果没有链接first, 会发现链接错误, 找不到first函数的定义</li>\n</ul>\n<h3 id=\"6-5-动态库依赖动态库\"><a href=\"#6-5-动态库依赖动态库\" class=\"headerlink\" title=\"6.5 动态库依赖动态库\"></a>6.5 动态库依赖动态库</h3><ol>\n<li><p>生成libfirst.so</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -std=c++11 first.cpp -shared -fPIC -o libfirst.so</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成libsecond.so链接libfirst.so</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -std=c++11 second.cpp -shared -fPIC -o libsecond.so -L. -lfirst</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>nm -u libsecond.so, 可以看到_Z5firstv, 这个就是first函数</li>\n<li>ldd libsecond.so, 也可以看到libfirst.so</li>\n<li>可以看出, 使用libsecond.so时, 仍然需要libfirst.so</li>\n</ul>\n<ol start=\"3\">\n<li>编译main.cpp<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -std=c++11 main.cpp -L. -lsecond -o main</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>可以看出, 能够成功编译。</li>\n<li>之前讲过libsecond.so需要依赖libfirst.so, 此处为何我们只链接libsecond.so也能成功呢?这里是因为链接器会自动搜索动态链接库的依赖库</li>\n</ul>\n<h2 id=\"七-总结\"><a href=\"#七-总结\" class=\"headerlink\" title=\"七. 总结\"></a>七. 总结</h2><ol>\n<li>c或者cpp文件经过<strong>编译、链接</strong>生成可执行文件</li>\n<li>单个c文件或者cpp文件是一个编译单元。每个编译单元存在3种符号: 自己使用的, 依赖于外部的以及对外提供的。</li>\n<li>链接器是将多个编译单元的符号相互链接以形成可执行文件。</li>\n<li>库可以分为静态链接库(.a)以及动态链接库(.so)。</li>\n<li>使用库时, 除了库文件, 还需要对应的头文件。</li>\n<li>单个c文件或者cpp文件, 可能依赖其他的库文件, 但是在编译时, 只需要有声明, 并不需要有具体的定义。</li>\n<li>静态库没有链接操作, 静态库只是将多个.o文件打包, 并没有其他操作。静态库可能依赖其他的静态库或者其他的动态库, 用户在使用静态库时, 需要手动链接这些依赖。</li>\n<li>动态库有链接操作, 创建动态库时可以链接其他的库, 也可以不链接, 如果链接静态库, 则会将静态库的内容全部放入动态库, 如果链接动态库, 只是放入符号, 在程序初始化时, 将依赖的这些动态库也加载。如果这个动态库依赖了其他库, 但是没有链接, 也可以生成动态库, 但用户在使用这个动态链接库时, 需要手动链接这些依赖, 由于使用者很难知道这些依赖, 所以通常不使用这种方式。</li>\n<li>总体而言, 动态库在程序执行阶段才会装进程序, 静态库则在链接阶段直接放进程序。动态库可以由多个程序共享, 节省内存，易于升级。静态库外部依赖少, 更易于部署。</li>\n</ol>\n<h2 id=\"八-扩展\"><a href=\"#八-扩展\" class=\"headerlink\" title=\"八. 扩展\"></a>八. 扩展</h2><ol>\n<li>动态库升级问题?假设现在有2个程序: p1, p2, 一个动态链接库libmath.so.1。如果现在math库提供了新版本libmath.so.2, 程序p1需要使用libmath.so.2的新功能, p2则不想使用, 此时该如何升级math库?</li>\n</ol>\n<ul>\n<li>如果math不兼容前一版, 则系统中需要同时存在两个版本的math库, p1, p2分别链接不同的版本</li>\n<li>如果math兼容前一版, 系统中是否可以只保留新版的math库呢?此时p1, p2又是否需要重新编译呢?这个问题留给读者自行思考。</li>\n</ul>\n<ol start=\"2\">\n<li>某个动态链接库<strong>lib1</strong>动态链接了库<strong>libbase</strong>, 现在应用程序中使用了<strong>lib1</strong>以及<strong>libbase</strong>, 编译应用程序时, 是否需要链接<strong>libbase</strong>?</li>\n</ol>\n<ul>\n<li>应用程序不仅需要链接<strong>lib1</strong>, 也需要链接<strong>libbase</strong></li>\n<li>链接<strong>lib1</strong>只能保证应用程序依赖<strong>lib1</strong>的部分能够正确解析</li>\n<li>虽然<strong>lib1</strong>动态链接了<strong>libbase</strong>, 但是动态链接真正进行符号解析是在程序执行阶段, 编译阶段无法获取<strong>libbase</strong>的相关信息, 应用程序中如果也使用了<strong>libbase</strong>中的函数, 则必须链接<strong>libbase</strong>, 否则会出现符号未定义</li>\n<li>如果<strong>lib1</strong>静态链接了<strong>libbase</strong>, 也就是说包含了<strong>libbase</strong>中的函数, 则应用程序不需要在链接<strong>libbase</strong></li>\n</ul>\n<ol start=\"3\">\n<li>菱形依赖问题, A依赖于B以及C, B、C都依赖于D, 但是是不同版本, 例如B依赖于D1, C依赖于D2, 这种情况下如何链接?</li>\n</ol>\n<ul>\n<li>D2兼容于D1(ABI层面兼容), 程序直接链接D2</li>\n<li>D2不兼容于D1, 查看B是否可以依赖D2重新编译</li>\n<li>链接器的参数, 直接链接两个版本。ld的参数–default-symver或者–version-script</li>\n</ul>\n<ol start=\"4\">\n<li>讨论</li>\n</ol>\n<ul>\n<li>动态链接会有大量的依赖问题(windows dll hell)</li>\n<li>由于采用模块化, 又允许升级单个模块, 菱形依赖问题对于很多语言都是存在的</li>\n<li>rust, go等语言都开始采用源码编译的方式, 解决依赖问题</li>\n</ul>\n<h2 id=\"九-参考\"><a href=\"#九-参考\" class=\"headerlink\" title=\"九. 参考\"></a>九. 参考</h2><ul>\n<li><a href=\"http://blog.chinaunix.net/uid-26548237-id-3837099.html\" target=\"_blank\" rel=\"noopener\">http://blog.chinaunix.net/uid-26548237-id-3837099.html</a></li>\n<li><a href=\"https://www.cnblogs.com/fnlingnzb-learner/p/8119729.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/fnlingnzb-learner/p/8119729.html</a></li>\n<li><a href=\"https://blog.csdn.net/coolwaterld/article/details/85088288\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/coolwaterld/article/details/85088288</a></li>\n<li><a href=\"https://blog.habets.se/2012/05/Shared-libraries-diamond-problem.html\" target=\"_blank\" rel=\"noopener\">https://blog.habets.se/2012/05/Shared-libraries-diamond-problem.html</a></li>\n</ul>\n"},{"title":"nginx 配置存储概述","date":"2018-11-13T07:56:40.000Z","_content":"\n# 一. 基础\nnginx的一般配置如下所示:\n```cpp\n...\nwork_porcess: xx;\nevents{\n    ...\n    work_connections xx;\n}\nhttp{\n    //第一级别的配置块\n    ...\n    upstream xx{\n        //第二级别的配置块\n        ...\n    }\n    server{\n        //第二级别的配置块\n        ...\n        location /{\n            //第三级别的配置块\n            ....\n            location /{\n                //第四级别的配置块\n                ...\n            }\n        }\n    }\n    server{\n        //第二级别的配置块\n        ...\n    }\n}\n```\n1. 如何存储上述结构?\n> - 由于配置中存在嵌套, 可以使用树型结构进行存储\n2. 如何使用上述配置?\n> - 从上到下, 按层查找\n3. 配置解析核心?\n> - 对于块中嵌套块的模块存储(例如http), 核心在于要以块为单位进行分析。例如, 最外层为http块, 属于一级配置; http中的server或者upstream属于二级配置块; server中的location属于三级配置块; 依次类推, 每块都看作一个完整的结构。\n> - 由于存在块中嵌套, 内层的块有些配置需要从外层块继承, 有些配置不能继承, 故而每块的配置需要按区域划分。\n> - 二级配置块需要放到一级配置块中, 这样才能从一级配置块中找到所有的二级配置块, 以此类推。\n> - 由于配置解析是依靠各个模块完成的, 故而配置存储的树形结构中需要以模块为单位存储(也就是每个模块具有自己的存储结构, 可以放在树形结构的某个位置上)。\n\n\n# 二. nginx配置存储结构\n由于结构比较复杂, 此处分为2部分。\n1. 第一部分配置存储结构图\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A81.png)\n\n> - 图中只给出了http中的server配置, 没有画出server中的location以及location嵌套的location\n\n2. 第二部分配置存储结构图\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A82.png)\n\n\n# 三. http块存储结构\n对于http的配置存储, 应当以块为单位进行分析,\n1. 总体而言, http块按树形存储\n2. 大体上可以分为3个级别(不考虑location中的location), 每个级别的配置分为3块(main块, srv块, loc块)\n3. 第二级别的配置继承第一级别的main块配置\n4. 第三级别的配置继承第二级别的main块以及srv块配置\n5. 第四及其后续级别的配置继承前一级的main块, srv块配置\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A8-http%E6%A6%82%E5%86%B5.png)\n\n\n# 四. nginx upstream块存储\n1. upstream的配置与server类似, 属于第二级别配置块\n2. upstream的配置块中main块从第一级别的main块继承\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A83-upstream.png)\n\n\n# 五. nginx proxy存储\n1. proxy_pass出现在location块中, 属于第三或者之后级别的配置。\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A84-proxy.png)\n\n\n\n","source":"_posts/nginx-config-store-summarize.md","raw":"---\ntitle: nginx 配置存储概述\ndate: 2018-11-13 15:56:40\ncategories:\n- nginx\n- 配置解析\ntags:\n- nginx\n- 配置存储\n---\n\n# 一. 基础\nnginx的一般配置如下所示:\n```cpp\n...\nwork_porcess: xx;\nevents{\n    ...\n    work_connections xx;\n}\nhttp{\n    //第一级别的配置块\n    ...\n    upstream xx{\n        //第二级别的配置块\n        ...\n    }\n    server{\n        //第二级别的配置块\n        ...\n        location /{\n            //第三级别的配置块\n            ....\n            location /{\n                //第四级别的配置块\n                ...\n            }\n        }\n    }\n    server{\n        //第二级别的配置块\n        ...\n    }\n}\n```\n1. 如何存储上述结构?\n> - 由于配置中存在嵌套, 可以使用树型结构进行存储\n2. 如何使用上述配置?\n> - 从上到下, 按层查找\n3. 配置解析核心?\n> - 对于块中嵌套块的模块存储(例如http), 核心在于要以块为单位进行分析。例如, 最外层为http块, 属于一级配置; http中的server或者upstream属于二级配置块; server中的location属于三级配置块; 依次类推, 每块都看作一个完整的结构。\n> - 由于存在块中嵌套, 内层的块有些配置需要从外层块继承, 有些配置不能继承, 故而每块的配置需要按区域划分。\n> - 二级配置块需要放到一级配置块中, 这样才能从一级配置块中找到所有的二级配置块, 以此类推。\n> - 由于配置解析是依靠各个模块完成的, 故而配置存储的树形结构中需要以模块为单位存储(也就是每个模块具有自己的存储结构, 可以放在树形结构的某个位置上)。\n\n\n# 二. nginx配置存储结构\n由于结构比较复杂, 此处分为2部分。\n1. 第一部分配置存储结构图\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A81.png)\n\n> - 图中只给出了http中的server配置, 没有画出server中的location以及location嵌套的location\n\n2. 第二部分配置存储结构图\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A82.png)\n\n\n# 三. http块存储结构\n对于http的配置存储, 应当以块为单位进行分析,\n1. 总体而言, http块按树形存储\n2. 大体上可以分为3个级别(不考虑location中的location), 每个级别的配置分为3块(main块, srv块, loc块)\n3. 第二级别的配置继承第一级别的main块配置\n4. 第三级别的配置继承第二级别的main块以及srv块配置\n5. 第四及其后续级别的配置继承前一级的main块, srv块配置\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A8-http%E6%A6%82%E5%86%B5.png)\n\n\n# 四. nginx upstream块存储\n1. upstream的配置与server类似, 属于第二级别配置块\n2. upstream的配置块中main块从第一级别的main块继承\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A83-upstream.png)\n\n\n# 五. nginx proxy存储\n1. proxy_pass出现在location块中, 属于第三或者之后级别的配置。\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A84-proxy.png)\n\n\n\n","slug":"nginx-config-store-summarize","published":1,"updated":"2019-05-27T01:49:32.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg5wpdz900146331ru8x3w6w","content":"<h1 id=\"一-基础\"><a href=\"#一-基础\" class=\"headerlink\" title=\"一. 基础\"></a>一. 基础</h1><p>nginx的一般配置如下所示:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">work_porcess: xx;</span><br><span class=\"line\">events&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    work_connections xx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http&#123;</span><br><span class=\"line\">    <span class=\"comment\">//第一级别的配置块</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    upstream xx&#123;</span><br><span class=\"line\">        <span class=\"comment\">//第二级别的配置块</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">        <span class=\"comment\">//第二级别的配置块</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        location /&#123;</span><br><span class=\"line\">            <span class=\"comment\">//第三级别的配置块</span></span><br><span class=\"line\">            ....</span><br><span class=\"line\">            location /&#123;</span><br><span class=\"line\">                <span class=\"comment\">//第四级别的配置块</span></span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">        <span class=\"comment\">//第二级别的配置块</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>如何存储上述结构?<blockquote>\n<ul>\n<li>由于配置中存在嵌套, 可以使用树型结构进行存储</li>\n</ul>\n</blockquote>\n</li>\n<li>如何使用上述配置?<blockquote>\n<ul>\n<li>从上到下, 按层查找</li>\n</ul>\n</blockquote>\n</li>\n<li>配置解析核心?<blockquote>\n<ul>\n<li>对于块中嵌套块的模块存储(例如http), 核心在于要以块为单位进行分析。例如, 最外层为http块, 属于一级配置; http中的server或者upstream属于二级配置块; server中的location属于三级配置块; 依次类推, 每块都看作一个完整的结构。</li>\n<li>由于存在块中嵌套, 内层的块有些配置需要从外层块继承, 有些配置不能继承, 故而每块的配置需要按区域划分。</li>\n<li>二级配置块需要放到一级配置块中, 这样才能从一级配置块中找到所有的二级配置块, 以此类推。</li>\n<li>由于配置解析是依靠各个模块完成的, 故而配置存储的树形结构中需要以模块为单位存储(也就是每个模块具有自己的存储结构, 可以放在树形结构的某个位置上)。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"二-nginx配置存储结构\"><a href=\"#二-nginx配置存储结构\" class=\"headerlink\" title=\"二. nginx配置存储结构\"></a>二. nginx配置存储结构</h1><p>由于结构比较复杂, 此处分为2部分。</p>\n<ol>\n<li>第一部分配置存储结构图<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A81.png\" alt=\"image\"></li>\n</ol>\n<blockquote>\n<ul>\n<li>图中只给出了http中的server配置, 没有画出server中的location以及location嵌套的location</li>\n</ul>\n</blockquote>\n<ol start=\"2\">\n<li>第二部分配置存储结构图<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A82.png\" alt=\"image\"></li>\n</ol>\n<h1 id=\"三-http块存储结构\"><a href=\"#三-http块存储结构\" class=\"headerlink\" title=\"三. http块存储结构\"></a>三. http块存储结构</h1><p>对于http的配置存储, 应当以块为单位进行分析,</p>\n<ol>\n<li>总体而言, http块按树形存储</li>\n<li>大体上可以分为3个级别(不考虑location中的location), 每个级别的配置分为3块(main块, srv块, loc块)</li>\n<li>第二级别的配置继承第一级别的main块配置</li>\n<li>第三级别的配置继承第二级别的main块以及srv块配置</li>\n<li>第四及其后续级别的配置继承前一级的main块, srv块配置<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A8-http%E6%A6%82%E5%86%B5.png\" alt=\"image\"></li>\n</ol>\n<h1 id=\"四-nginx-upstream块存储\"><a href=\"#四-nginx-upstream块存储\" class=\"headerlink\" title=\"四. nginx upstream块存储\"></a>四. nginx upstream块存储</h1><ol>\n<li>upstream的配置与server类似, 属于第二级别配置块</li>\n<li>upstream的配置块中main块从第一级别的main块继承<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A83-upstream.png\" alt=\"image\"></li>\n</ol>\n<h1 id=\"五-nginx-proxy存储\"><a href=\"#五-nginx-proxy存储\" class=\"headerlink\" title=\"五. nginx proxy存储\"></a>五. nginx proxy存储</h1><ol>\n<li>proxy_pass出现在location块中, 属于第三或者之后级别的配置。<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A84-proxy.png\" alt=\"image\"></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-基础\"><a href=\"#一-基础\" class=\"headerlink\" title=\"一. 基础\"></a>一. 基础</h1><p>nginx的一般配置如下所示:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">work_porcess: xx;</span><br><span class=\"line\">events&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    work_connections xx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http&#123;</span><br><span class=\"line\">    <span class=\"comment\">//第一级别的配置块</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    upstream xx&#123;</span><br><span class=\"line\">        <span class=\"comment\">//第二级别的配置块</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">        <span class=\"comment\">//第二级别的配置块</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        location /&#123;</span><br><span class=\"line\">            <span class=\"comment\">//第三级别的配置块</span></span><br><span class=\"line\">            ....</span><br><span class=\"line\">            location /&#123;</span><br><span class=\"line\">                <span class=\"comment\">//第四级别的配置块</span></span><br><span class=\"line\">                ...</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server&#123;</span><br><span class=\"line\">        <span class=\"comment\">//第二级别的配置块</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>如何存储上述结构?<blockquote>\n<ul>\n<li>由于配置中存在嵌套, 可以使用树型结构进行存储</li>\n</ul>\n</blockquote>\n</li>\n<li>如何使用上述配置?<blockquote>\n<ul>\n<li>从上到下, 按层查找</li>\n</ul>\n</blockquote>\n</li>\n<li>配置解析核心?<blockquote>\n<ul>\n<li>对于块中嵌套块的模块存储(例如http), 核心在于要以块为单位进行分析。例如, 最外层为http块, 属于一级配置; http中的server或者upstream属于二级配置块; server中的location属于三级配置块; 依次类推, 每块都看作一个完整的结构。</li>\n<li>由于存在块中嵌套, 内层的块有些配置需要从外层块继承, 有些配置不能继承, 故而每块的配置需要按区域划分。</li>\n<li>二级配置块需要放到一级配置块中, 这样才能从一级配置块中找到所有的二级配置块, 以此类推。</li>\n<li>由于配置解析是依靠各个模块完成的, 故而配置存储的树形结构中需要以模块为单位存储(也就是每个模块具有自己的存储结构, 可以放在树形结构的某个位置上)。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"二-nginx配置存储结构\"><a href=\"#二-nginx配置存储结构\" class=\"headerlink\" title=\"二. nginx配置存储结构\"></a>二. nginx配置存储结构</h1><p>由于结构比较复杂, 此处分为2部分。</p>\n<ol>\n<li>第一部分配置存储结构图<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A81.png\" alt=\"image\"></li>\n</ol>\n<blockquote>\n<ul>\n<li>图中只给出了http中的server配置, 没有画出server中的location以及location嵌套的location</li>\n</ul>\n</blockquote>\n<ol start=\"2\">\n<li>第二部分配置存储结构图<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A82.png\" alt=\"image\"></li>\n</ol>\n<h1 id=\"三-http块存储结构\"><a href=\"#三-http块存储结构\" class=\"headerlink\" title=\"三. http块存储结构\"></a>三. http块存储结构</h1><p>对于http的配置存储, 应当以块为单位进行分析,</p>\n<ol>\n<li>总体而言, http块按树形存储</li>\n<li>大体上可以分为3个级别(不考虑location中的location), 每个级别的配置分为3块(main块, srv块, loc块)</li>\n<li>第二级别的配置继承第一级别的main块配置</li>\n<li>第三级别的配置继承第二级别的main块以及srv块配置</li>\n<li>第四及其后续级别的配置继承前一级的main块, srv块配置<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A8-http%E6%A6%82%E5%86%B5.png\" alt=\"image\"></li>\n</ol>\n<h1 id=\"四-nginx-upstream块存储\"><a href=\"#四-nginx-upstream块存储\" class=\"headerlink\" title=\"四. nginx upstream块存储\"></a>四. nginx upstream块存储</h1><ol>\n<li>upstream的配置与server类似, 属于第二级别配置块</li>\n<li>upstream的配置块中main块从第一级别的main块继承<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A83-upstream.png\" alt=\"image\"></li>\n</ol>\n<h1 id=\"五-nginx-proxy存储\"><a href=\"#五-nginx-proxy存储\" class=\"headerlink\" title=\"五. nginx proxy存储\"></a>五. nginx proxy存储</h1><ol>\n<li>proxy_pass出现在location块中, 属于第三或者之后级别的配置。<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A84-proxy.png\" alt=\"image\"></li>\n</ol>\n"},{"title":"结构体传输","date":"2018-11-05T12:10:41.000Z","_content":"\n# 一. 基础\n1. 结构体传输基本上有两种方式,序列化(Json,Xml等)以及直接传输结构体。\n2. 下面考虑32位系统，直接发送结构体进行传输。\n\n# 二. 结构体\n```cpp\nstruct Data{\n    char v1;\n    int v2;\n    char v3;\n}\n```\n# 三. 源码\n## 3.1 发送方\n```cpp\n//将data写入buf\nbool send(char *buf, int bufLen, const Data *data){\n    if(bufLen < sizeof(*data)) return false;\n    memcpy(buf, data, sizeof(*data);\n    return true;\n}\n\n//main function\nint main(int argc, char **argv){\n    char sendBuf[256] = {};\n    Data data;\n    data.v1 = 'a';\n    data.v2 = htonl(2);\n    data.v3 = 'b';\n    $ans = send(sendBuf, sizeof(sendBuf), &data);\n    if($ans == false) return -1;\n    //send data\n}\n```\n## 3.2 接收方\n```cpp\n//deal data\nbool parseData(char *buf, int bufLen, Data *data){\n    if(bufLen < sizeof(*data)) return false;\n    memecpy(buf, data, sizeof(*data));\n    data.v2 = ntohl(data.v2);\n    return true;\n}\n\n//main\nint main(int argc, char **argv){\n    char recvBuf[256] = {};\n    //read socket recv data\n    //deal data\n    Data data;\n    $ans = parseData(buf, sizeof(recvBuf), &data);\n    if($ans == false) return -1;\n    //Deal data\n}\n```\n## 3.3 测试\n```cpp\n#include <iostream>\n#include <string>\n#include <arpa/inet.h>\n\nusing namespace std;\n\nstruct Data{\n    char v1;\n    int v2;\n    char v3;\n};\n\nvoid parse(char *buf, Data *data){\n    memcpy(data, buf, sizeof(*data));\n    data->v2 = ntohl(data->v2);\n}\n\nint main (int argc, char **argv){\n    Data data;\n    data.v1 = 'a';\n    data.v2 = htonl(2);\n    data.v3 = 'b';\n    char buf[128] = {};\n    memcpy(buf, &data, sizeof(data));\n    Data newData;\n    parse(buf, &newData);\n    std::cout << newData.v1 << ' ' << newData.v2 << ' ' << newData.v3 << std::endl;\n    return 0;\n}\n//输出: a, 2, b\n```\n\n# 四. 注意事项\n1. sizeof(data) = 12;\n2. 结构体要考虑对齐,发送方与接收方的对齐方式应该是一致的。\n3. 发送方按照网络字节序存储,接收方得到网络字节序的数据后，解析成本机字节序。\n","source":"_posts/struct-transmission.md","raw":"---\ntitle: 结构体传输\ndate: 2018-11-05 20:10:41\ncategories:\n- 网络编程\n- 基础\ntags:\n- 网络编程\n---\n\n# 一. 基础\n1. 结构体传输基本上有两种方式,序列化(Json,Xml等)以及直接传输结构体。\n2. 下面考虑32位系统，直接发送结构体进行传输。\n\n# 二. 结构体\n```cpp\nstruct Data{\n    char v1;\n    int v2;\n    char v3;\n}\n```\n# 三. 源码\n## 3.1 发送方\n```cpp\n//将data写入buf\nbool send(char *buf, int bufLen, const Data *data){\n    if(bufLen < sizeof(*data)) return false;\n    memcpy(buf, data, sizeof(*data);\n    return true;\n}\n\n//main function\nint main(int argc, char **argv){\n    char sendBuf[256] = {};\n    Data data;\n    data.v1 = 'a';\n    data.v2 = htonl(2);\n    data.v3 = 'b';\n    $ans = send(sendBuf, sizeof(sendBuf), &data);\n    if($ans == false) return -1;\n    //send data\n}\n```\n## 3.2 接收方\n```cpp\n//deal data\nbool parseData(char *buf, int bufLen, Data *data){\n    if(bufLen < sizeof(*data)) return false;\n    memecpy(buf, data, sizeof(*data));\n    data.v2 = ntohl(data.v2);\n    return true;\n}\n\n//main\nint main(int argc, char **argv){\n    char recvBuf[256] = {};\n    //read socket recv data\n    //deal data\n    Data data;\n    $ans = parseData(buf, sizeof(recvBuf), &data);\n    if($ans == false) return -1;\n    //Deal data\n}\n```\n## 3.3 测试\n```cpp\n#include <iostream>\n#include <string>\n#include <arpa/inet.h>\n\nusing namespace std;\n\nstruct Data{\n    char v1;\n    int v2;\n    char v3;\n};\n\nvoid parse(char *buf, Data *data){\n    memcpy(data, buf, sizeof(*data));\n    data->v2 = ntohl(data->v2);\n}\n\nint main (int argc, char **argv){\n    Data data;\n    data.v1 = 'a';\n    data.v2 = htonl(2);\n    data.v3 = 'b';\n    char buf[128] = {};\n    memcpy(buf, &data, sizeof(data));\n    Data newData;\n    parse(buf, &newData);\n    std::cout << newData.v1 << ' ' << newData.v2 << ' ' << newData.v3 << std::endl;\n    return 0;\n}\n//输出: a, 2, b\n```\n\n# 四. 注意事项\n1. sizeof(data) = 12;\n2. 结构体要考虑对齐,发送方与接收方的对齐方式应该是一致的。\n3. 发送方按照网络字节序存储,接收方得到网络字节序的数据后，解析成本机字节序。\n","slug":"struct-transmission","published":1,"updated":"2019-05-27T01:49:32.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg5wpdzl00166331tdv9d1kd","content":"<h1 id=\"一-基础\"><a href=\"#一-基础\" class=\"headerlink\" title=\"一. 基础\"></a>一. 基础</h1><ol>\n<li>结构体传输基本上有两种方式,序列化(Json,Xml等)以及直接传输结构体。</li>\n<li>下面考虑32位系统，直接发送结构体进行传输。</li>\n</ol>\n<h1 id=\"二-结构体\"><a href=\"#二-结构体\" class=\"headerlink\" title=\"二. 结构体\"></a>二. 结构体</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Data</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> v1;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v2;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> v3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"三-源码\"><a href=\"#三-源码\" class=\"headerlink\" title=\"三. 源码\"></a>三. 源码</h1><h2 id=\"3-1-发送方\"><a href=\"#3-1-发送方\" class=\"headerlink\" title=\"3.1 发送方\"></a>3.1 发送方</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将data写入buf</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">send</span><span class=\"params\">(<span class=\"keyword\">char</span> *buf, <span class=\"keyword\">int</span> bufLen, <span class=\"keyword\">const</span> Data *data)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(bufLen &lt; <span class=\"keyword\">sizeof</span>(*data)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(buf, data, <span class=\"keyword\">sizeof</span>(*data);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main function</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> sendBuf[<span class=\"number\">256</span>] = &#123;&#125;;</span><br><span class=\"line\">    Data data;</span><br><span class=\"line\">    data.v1 = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">    data.v2 = htonl(<span class=\"number\">2</span>);</span><br><span class=\"line\">    data.v3 = <span class=\"string\">'b'</span>;</span><br><span class=\"line\">    $ans = send(sendBuf, <span class=\"keyword\">sizeof</span>(sendBuf), &amp;data);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($ans == <span class=\"literal\">false</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//send data</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-接收方\"><a href=\"#3-2-接收方\" class=\"headerlink\" title=\"3.2 接收方\"></a>3.2 接收方</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//deal data</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">parseData</span><span class=\"params\">(<span class=\"keyword\">char</span> *buf, <span class=\"keyword\">int</span> bufLen, Data *data)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(bufLen &lt; <span class=\"keyword\">sizeof</span>(*data)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    memecpy(buf, data, <span class=\"keyword\">sizeof</span>(*data));</span><br><span class=\"line\">    data.v2 = ntohl(data.v2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> recvBuf[<span class=\"number\">256</span>] = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//read socket recv data</span></span><br><span class=\"line\">    <span class=\"comment\">//deal data</span></span><br><span class=\"line\">    Data data;</span><br><span class=\"line\">    $ans = parseData(buf, <span class=\"keyword\">sizeof</span>(recvBuf), &amp;data);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($ans == <span class=\"literal\">false</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//Deal data</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-测试\"><a href=\"#3-3-测试\" class=\"headerlink\" title=\"3.3 测试\"></a>3.3 测试</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Data</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> v1;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v2;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> v3;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">parse</span><span class=\"params\">(<span class=\"keyword\">char</span> *buf, Data *data)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(data, buf, <span class=\"keyword\">sizeof</span>(*data));</span><br><span class=\"line\">    data-&gt;v2 = ntohl(data-&gt;v2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">    Data data;</span><br><span class=\"line\">    data.v1 = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">    data.v2 = htonl(<span class=\"number\">2</span>);</span><br><span class=\"line\">    data.v3 = <span class=\"string\">'b'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[<span class=\"number\">128</span>] = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(buf, &amp;data, <span class=\"keyword\">sizeof</span>(data));</span><br><span class=\"line\">    Data newData;</span><br><span class=\"line\">    parse(buf, &amp;newData);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; newData.v1 &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; newData.v2 &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; newData.v3 &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出: a, 2, b</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"四-注意事项\"><a href=\"#四-注意事项\" class=\"headerlink\" title=\"四. 注意事项\"></a>四. 注意事项</h1><ol>\n<li>sizeof(data) = 12;</li>\n<li>结构体要考虑对齐,发送方与接收方的对齐方式应该是一致的。</li>\n<li>发送方按照网络字节序存储,接收方得到网络字节序的数据后，解析成本机字节序。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-基础\"><a href=\"#一-基础\" class=\"headerlink\" title=\"一. 基础\"></a>一. 基础</h1><ol>\n<li>结构体传输基本上有两种方式,序列化(Json,Xml等)以及直接传输结构体。</li>\n<li>下面考虑32位系统，直接发送结构体进行传输。</li>\n</ol>\n<h1 id=\"二-结构体\"><a href=\"#二-结构体\" class=\"headerlink\" title=\"二. 结构体\"></a>二. 结构体</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Data</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> v1;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v2;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> v3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"三-源码\"><a href=\"#三-源码\" class=\"headerlink\" title=\"三. 源码\"></a>三. 源码</h1><h2 id=\"3-1-发送方\"><a href=\"#3-1-发送方\" class=\"headerlink\" title=\"3.1 发送方\"></a>3.1 发送方</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将data写入buf</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">send</span><span class=\"params\">(<span class=\"keyword\">char</span> *buf, <span class=\"keyword\">int</span> bufLen, <span class=\"keyword\">const</span> Data *data)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(bufLen &lt; <span class=\"keyword\">sizeof</span>(*data)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(buf, data, <span class=\"keyword\">sizeof</span>(*data);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main function</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> sendBuf[<span class=\"number\">256</span>] = &#123;&#125;;</span><br><span class=\"line\">    Data data;</span><br><span class=\"line\">    data.v1 = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">    data.v2 = htonl(<span class=\"number\">2</span>);</span><br><span class=\"line\">    data.v3 = <span class=\"string\">'b'</span>;</span><br><span class=\"line\">    $ans = send(sendBuf, <span class=\"keyword\">sizeof</span>(sendBuf), &amp;data);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($ans == <span class=\"literal\">false</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//send data</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2-接收方\"><a href=\"#3-2-接收方\" class=\"headerlink\" title=\"3.2 接收方\"></a>3.2 接收方</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//deal data</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">parseData</span><span class=\"params\">(<span class=\"keyword\">char</span> *buf, <span class=\"keyword\">int</span> bufLen, Data *data)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(bufLen &lt; <span class=\"keyword\">sizeof</span>(*data)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    memecpy(buf, data, <span class=\"keyword\">sizeof</span>(*data));</span><br><span class=\"line\">    data.v2 = ntohl(data.v2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> recvBuf[<span class=\"number\">256</span>] = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//read socket recv data</span></span><br><span class=\"line\">    <span class=\"comment\">//deal data</span></span><br><span class=\"line\">    Data data;</span><br><span class=\"line\">    $ans = parseData(buf, <span class=\"keyword\">sizeof</span>(recvBuf), &amp;data);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($ans == <span class=\"literal\">false</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"comment\">//Deal data</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-3-测试\"><a href=\"#3-3-测试\" class=\"headerlink\" title=\"3.3 测试\"></a>3.3 测试</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Data</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> v1;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> v2;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> v3;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">parse</span><span class=\"params\">(<span class=\"keyword\">char</span> *buf, Data *data)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(data, buf, <span class=\"keyword\">sizeof</span>(*data));</span><br><span class=\"line\">    data-&gt;v2 = ntohl(data-&gt;v2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">    Data data;</span><br><span class=\"line\">    data.v1 = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">    data.v2 = htonl(<span class=\"number\">2</span>);</span><br><span class=\"line\">    data.v3 = <span class=\"string\">'b'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[<span class=\"number\">128</span>] = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(buf, &amp;data, <span class=\"keyword\">sizeof</span>(data));</span><br><span class=\"line\">    Data newData;</span><br><span class=\"line\">    parse(buf, &amp;newData);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; newData.v1 &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; newData.v2 &lt;&lt; <span class=\"string\">' '</span> &lt;&lt; newData.v3 &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出: a, 2, b</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"四-注意事项\"><a href=\"#四-注意事项\" class=\"headerlink\" title=\"四. 注意事项\"></a>四. 注意事项</h1><ol>\n<li>sizeof(data) = 12;</li>\n<li>结构体要考虑对齐,发送方与接收方的对齐方式应该是一致的。</li>\n<li>发送方按照网络字节序存储,接收方得到网络字节序的数据后，解析成本机字节序。</li>\n</ol>\n"},{"title":"负载均衡","date":"2018-11-01T05:54:24.000Z","_content":"\n# 一. 基础知识\n## 1.1 基础\n1. 什么是负载均衡?\n> 当单机提供的并发量不能满足需求时，我们需要多台服务器同时服务。当客户请求到达时，如何为客户选择最合适的服务器?这个问题就是负载均衡问题。\n2. 负载均衡主要需要解决的问题是哪些?\n> - 从客户端的角度上看，客户需要最快速的得到服务器的相应，负载均衡时需要找出能最快相应客户需求的服务器进行服务。\n> - 从服务端来看如何使得每台服务器都能达到较高的利用率，最大限制的为用户提供快速、可靠的服务是服务端需要考虑的主要问题。\n\n\n## 1.2 负载均衡分类\n1. 硬件\n> - F5\n\n2. 软件\n> - dns负载均衡\n> - LVS负载均衡(4层)\n> - nginx, haproxy(7层)\n\n# 二. F5负载均衡\n1. F5是一家美国的公司，该公司生产一些硬件设备可以作为负载均衡器使用(例如:big-ip), 本文后续部分所说的F5是指其负载均衡器产品。\n2. 不同的产品实现的功能不一致，具体情况需要根据产品说明书。\n3. F5可以在4-7层内做负载均衡，用户可以根据需求进行配置。\n4. 由于F5可以做7层负载均衡，故而可以实现会话管理，http处理等。\n\n## 2.1 数据转发模式\n1. standard类型, 这种模式下，客户端与F5服务器建立连接，F5服务器与真实服务器建立连接，F5服务器将客户需求转发给真实服务器，并将真实服务器的相应转发给客户端，此时F5可以查看请求和相应的所有信息。\n2. 四层转发模式(performance L4), 这种模式下，F5只处理4层以下的数据。客户端将数据发送给F5, F5仅将数据转发给真实服务器，包括TCP的握手数据包以及挥手数据包，真实服务器需要先将数据发送给F5服务器，F5将其转发给客户端。\n3. 路由模式, 这种模式与LVS的DR模式类似。\n4. ...\n\n## 2.2 负载均衡算法\n1. 轮询，加权轮询。\n2. 源地址哈希\n3. ...\n\n## 2.3 小结\nF5的优势在于功能强大，并发量高，能满足客户的大多数需求，但其成本较高，一般大型国企可能会使用。\n\n## 2.4 参考\n- https://f5.com/zh\n- https://www.jianshu.com/p/2b55aa4c21e2\n- https://wenku.baidu.com/view/450b8643cc7931b765ce15c1.html\n\n# 三. dns负载均衡\n1. dns负载均衡由dns服务提供厂商提供。\n2. 最初的dns负载均衡提供简单轮询，不能根据客户端或者服务端状态进行选择。\n3. 目前，有些dns服务厂商可以提供智能dns服务，用户可以设置负载均衡方案，例如：根据客户端ip地址，选择就近的服务器。\n4. 对于目前大多数的公司而言，为了更好的服务用户，通常会使用dns负载均衡，将用户按照就近原则，分配到某个集群服务器上。之后，集群内再采用其他的负载均衡方案。\n\n# 四. Linux Virtual Server(LVS)\n1. LVS通过修改数据包Ip地址，Mac地址实现负载均衡。\n2. LVS由ipvs(内核中), ipvsadm(用户态)组成。LVS需要理解tcp，ip头部。\n3. 当tcp握手信号，SYN数据包达到时，ipvs选择一个后端服务器，将数据包进行转发。在此之后，所有包含相同的ip，tcp头部的数据包都会被转发到之前选择的服务器上。很明显，ipvs无法感知数据包内容。\n\n## 4.1 分类\n- LVS-NAT\n- LVS-DR\n- LVS-TUN\n\n## 4.2 基本原理\n### 4.2.1 LVS-DR\nLVS-DR模式的基本原理如下图所示:\n![image](https://picturestore.nos-eastchina1.126.net/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/lvs-dr.png)\n\n### 4.2.2 LVS-NAT\nLVS-NAT模式的基本原理如下图所示:\n![image](https://picturestore.nos-eastchina1.126.net/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/lvs-nat.png)\n\n## 4.3 负载均衡算法\n### 4.3.1 静态算法\n1. 轮询(Round Robin, RR)\n2. 加权轮询(Weight Round Robin, WRR)\n3. 源地址Hash(Source Hash, SH)\n4. 目的地址Hash(Destination Hash, DH), 可以设置多个VIP\n\n### 4.3.2 动态算法\n1. 最少连接(Least Connections, LC)，找出当前连接数最小的服务器\n2. 加权最少连接(Weighted Least Connections, WLC)\n3. 最短期望延迟(Shortest Expected Delay Scheduling, SED) 基于WLC。例如: 现有A, B, C三台服务器，权重分别为100,200,300，当前的连接数分别为1,2,3,下一个连接到达时，通过计算期望时延选择服务器(1+1)/100, (2+1)/200, (3+1)/300, 故而选择C服务器。\n4. 永不排队(Never Queue Scheduling, NQ)， 改进的sed, 如果某台服务器连接数为0，直接连接过去，不在进行sed计算。\n5. 基于局部性的最少连接(locality-Based Least Connections, LBLC)，根据目标ip, 找出目标ip最近使用的服务器，如果服务器存在并且负载没有大于一个阈值，则将新的连接分配到这个服务器上，否则按照最少连接找出一个服务器处理该请求。\n6. 带复制的基于局部性最少连接(Locality-Based Least Connections with Replication, LBLCR)，根据目标ip，维护一个服务器组，每次从组中挑选服务器，如果服务器不可以处理，则从所有服务器中按照最少连接挑选出一台服务器，并将其加入到目标ip的处理组服务器中。\n\n## 4.3 参考\n- https://liangshuang.name/2017/11/19/lvs/\n\n# 五. Nginx Load Balance\n1. nginx负载均衡工作在7层，它会与client、upstream分别建立tcp连接，nginx需要维护这两个连接的状态。\n2. nginx的stream模块可以用于4层负载均衡，但一般很少使用。\n\n## 5.1 基本原理\nnginx做7层负载均衡的基本原理如下图所示:\n![image](https://picturestore.nos-eastchina1.126.net/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png)\n\n\n## 5.2 负载均衡算法\n1. 轮询(默认)\n2. 加权轮询\n3. 源ip哈希\n4. 响应时间\n5. url 哈希\n","source":"_posts/load_balance.md","raw":"---\ntitle: 负载均衡\ndate: 2018-11-01 13:54:24\ncategories:\n- 架构\n- 负载均衡\ntags:\n- 负载均衡\n- 分布式技术\n---\n\n# 一. 基础知识\n## 1.1 基础\n1. 什么是负载均衡?\n> 当单机提供的并发量不能满足需求时，我们需要多台服务器同时服务。当客户请求到达时，如何为客户选择最合适的服务器?这个问题就是负载均衡问题。\n2. 负载均衡主要需要解决的问题是哪些?\n> - 从客户端的角度上看，客户需要最快速的得到服务器的相应，负载均衡时需要找出能最快相应客户需求的服务器进行服务。\n> - 从服务端来看如何使得每台服务器都能达到较高的利用率，最大限制的为用户提供快速、可靠的服务是服务端需要考虑的主要问题。\n\n\n## 1.2 负载均衡分类\n1. 硬件\n> - F5\n\n2. 软件\n> - dns负载均衡\n> - LVS负载均衡(4层)\n> - nginx, haproxy(7层)\n\n# 二. F5负载均衡\n1. F5是一家美国的公司，该公司生产一些硬件设备可以作为负载均衡器使用(例如:big-ip), 本文后续部分所说的F5是指其负载均衡器产品。\n2. 不同的产品实现的功能不一致，具体情况需要根据产品说明书。\n3. F5可以在4-7层内做负载均衡，用户可以根据需求进行配置。\n4. 由于F5可以做7层负载均衡，故而可以实现会话管理，http处理等。\n\n## 2.1 数据转发模式\n1. standard类型, 这种模式下，客户端与F5服务器建立连接，F5服务器与真实服务器建立连接，F5服务器将客户需求转发给真实服务器，并将真实服务器的相应转发给客户端，此时F5可以查看请求和相应的所有信息。\n2. 四层转发模式(performance L4), 这种模式下，F5只处理4层以下的数据。客户端将数据发送给F5, F5仅将数据转发给真实服务器，包括TCP的握手数据包以及挥手数据包，真实服务器需要先将数据发送给F5服务器，F5将其转发给客户端。\n3. 路由模式, 这种模式与LVS的DR模式类似。\n4. ...\n\n## 2.2 负载均衡算法\n1. 轮询，加权轮询。\n2. 源地址哈希\n3. ...\n\n## 2.3 小结\nF5的优势在于功能强大，并发量高，能满足客户的大多数需求，但其成本较高，一般大型国企可能会使用。\n\n## 2.4 参考\n- https://f5.com/zh\n- https://www.jianshu.com/p/2b55aa4c21e2\n- https://wenku.baidu.com/view/450b8643cc7931b765ce15c1.html\n\n# 三. dns负载均衡\n1. dns负载均衡由dns服务提供厂商提供。\n2. 最初的dns负载均衡提供简单轮询，不能根据客户端或者服务端状态进行选择。\n3. 目前，有些dns服务厂商可以提供智能dns服务，用户可以设置负载均衡方案，例如：根据客户端ip地址，选择就近的服务器。\n4. 对于目前大多数的公司而言，为了更好的服务用户，通常会使用dns负载均衡，将用户按照就近原则，分配到某个集群服务器上。之后，集群内再采用其他的负载均衡方案。\n\n# 四. Linux Virtual Server(LVS)\n1. LVS通过修改数据包Ip地址，Mac地址实现负载均衡。\n2. LVS由ipvs(内核中), ipvsadm(用户态)组成。LVS需要理解tcp，ip头部。\n3. 当tcp握手信号，SYN数据包达到时，ipvs选择一个后端服务器，将数据包进行转发。在此之后，所有包含相同的ip，tcp头部的数据包都会被转发到之前选择的服务器上。很明显，ipvs无法感知数据包内容。\n\n## 4.1 分类\n- LVS-NAT\n- LVS-DR\n- LVS-TUN\n\n## 4.2 基本原理\n### 4.2.1 LVS-DR\nLVS-DR模式的基本原理如下图所示:\n![image](https://picturestore.nos-eastchina1.126.net/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/lvs-dr.png)\n\n### 4.2.2 LVS-NAT\nLVS-NAT模式的基本原理如下图所示:\n![image](https://picturestore.nos-eastchina1.126.net/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/lvs-nat.png)\n\n## 4.3 负载均衡算法\n### 4.3.1 静态算法\n1. 轮询(Round Robin, RR)\n2. 加权轮询(Weight Round Robin, WRR)\n3. 源地址Hash(Source Hash, SH)\n4. 目的地址Hash(Destination Hash, DH), 可以设置多个VIP\n\n### 4.3.2 动态算法\n1. 最少连接(Least Connections, LC)，找出当前连接数最小的服务器\n2. 加权最少连接(Weighted Least Connections, WLC)\n3. 最短期望延迟(Shortest Expected Delay Scheduling, SED) 基于WLC。例如: 现有A, B, C三台服务器，权重分别为100,200,300，当前的连接数分别为1,2,3,下一个连接到达时，通过计算期望时延选择服务器(1+1)/100, (2+1)/200, (3+1)/300, 故而选择C服务器。\n4. 永不排队(Never Queue Scheduling, NQ)， 改进的sed, 如果某台服务器连接数为0，直接连接过去，不在进行sed计算。\n5. 基于局部性的最少连接(locality-Based Least Connections, LBLC)，根据目标ip, 找出目标ip最近使用的服务器，如果服务器存在并且负载没有大于一个阈值，则将新的连接分配到这个服务器上，否则按照最少连接找出一个服务器处理该请求。\n6. 带复制的基于局部性最少连接(Locality-Based Least Connections with Replication, LBLCR)，根据目标ip，维护一个服务器组，每次从组中挑选服务器，如果服务器不可以处理，则从所有服务器中按照最少连接挑选出一台服务器，并将其加入到目标ip的处理组服务器中。\n\n## 4.3 参考\n- https://liangshuang.name/2017/11/19/lvs/\n\n# 五. Nginx Load Balance\n1. nginx负载均衡工作在7层，它会与client、upstream分别建立tcp连接，nginx需要维护这两个连接的状态。\n2. nginx的stream模块可以用于4层负载均衡，但一般很少使用。\n\n## 5.1 基本原理\nnginx做7层负载均衡的基本原理如下图所示:\n![image](https://picturestore.nos-eastchina1.126.net/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png)\n\n\n## 5.2 负载均衡算法\n1. 轮询(默认)\n2. 加权轮询\n3. 源ip哈希\n4. 响应时间\n5. url 哈希\n","slug":"load_balance","published":1,"updated":"2019-05-27T01:49:32.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg5wpdzp001a6331824d53xh","content":"<h1 id=\"一-基础知识\"><a href=\"#一-基础知识\" class=\"headerlink\" title=\"一. 基础知识\"></a>一. 基础知识</h1><h2 id=\"1-1-基础\"><a href=\"#1-1-基础\" class=\"headerlink\" title=\"1.1 基础\"></a>1.1 基础</h2><ol>\n<li>什么是负载均衡?<blockquote>\n<p>当单机提供的并发量不能满足需求时，我们需要多台服务器同时服务。当客户请求到达时，如何为客户选择最合适的服务器?这个问题就是负载均衡问题。</p>\n</blockquote>\n</li>\n<li>负载均衡主要需要解决的问题是哪些?<blockquote>\n<ul>\n<li>从客户端的角度上看，客户需要最快速的得到服务器的相应，负载均衡时需要找出能最快相应客户需求的服务器进行服务。</li>\n<li>从服务端来看如何使得每台服务器都能达到较高的利用率，最大限制的为用户提供快速、可靠的服务是服务端需要考虑的主要问题。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"1-2-负载均衡分类\"><a href=\"#1-2-负载均衡分类\" class=\"headerlink\" title=\"1.2 负载均衡分类\"></a>1.2 负载均衡分类</h2><ol>\n<li><p>硬件</p>\n<blockquote>\n<ul>\n<li>F5</li>\n</ul>\n</blockquote>\n</li>\n<li><p>软件</p>\n<blockquote>\n<ul>\n<li>dns负载均衡</li>\n<li>LVS负载均衡(4层)</li>\n<li>nginx, haproxy(7层)</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"二-F5负载均衡\"><a href=\"#二-F5负载均衡\" class=\"headerlink\" title=\"二. F5负载均衡\"></a>二. F5负载均衡</h1><ol>\n<li>F5是一家美国的公司，该公司生产一些硬件设备可以作为负载均衡器使用(例如:big-ip), 本文后续部分所说的F5是指其负载均衡器产品。</li>\n<li>不同的产品实现的功能不一致，具体情况需要根据产品说明书。</li>\n<li>F5可以在4-7层内做负载均衡，用户可以根据需求进行配置。</li>\n<li>由于F5可以做7层负载均衡，故而可以实现会话管理，http处理等。</li>\n</ol>\n<h2 id=\"2-1-数据转发模式\"><a href=\"#2-1-数据转发模式\" class=\"headerlink\" title=\"2.1 数据转发模式\"></a>2.1 数据转发模式</h2><ol>\n<li>standard类型, 这种模式下，客户端与F5服务器建立连接，F5服务器与真实服务器建立连接，F5服务器将客户需求转发给真实服务器，并将真实服务器的相应转发给客户端，此时F5可以查看请求和相应的所有信息。</li>\n<li>四层转发模式(performance L4), 这种模式下，F5只处理4层以下的数据。客户端将数据发送给F5, F5仅将数据转发给真实服务器，包括TCP的握手数据包以及挥手数据包，真实服务器需要先将数据发送给F5服务器，F5将其转发给客户端。</li>\n<li>路由模式, 这种模式与LVS的DR模式类似。</li>\n<li>…</li>\n</ol>\n<h2 id=\"2-2-负载均衡算法\"><a href=\"#2-2-负载均衡算法\" class=\"headerlink\" title=\"2.2 负载均衡算法\"></a>2.2 负载均衡算法</h2><ol>\n<li>轮询，加权轮询。</li>\n<li>源地址哈希</li>\n<li>…</li>\n</ol>\n<h2 id=\"2-3-小结\"><a href=\"#2-3-小结\" class=\"headerlink\" title=\"2.3 小结\"></a>2.3 小结</h2><p>F5的优势在于功能强大，并发量高，能满足客户的大多数需求，但其成本较高，一般大型国企可能会使用。</p>\n<h2 id=\"2-4-参考\"><a href=\"#2-4-参考\" class=\"headerlink\" title=\"2.4 参考\"></a>2.4 参考</h2><ul>\n<li><a href=\"https://f5.com/zh\" target=\"_blank\" rel=\"noopener\">https://f5.com/zh</a></li>\n<li><a href=\"https://www.jianshu.com/p/2b55aa4c21e2\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/2b55aa4c21e2</a></li>\n<li><a href=\"https://wenku.baidu.com/view/450b8643cc7931b765ce15c1.html\" target=\"_blank\" rel=\"noopener\">https://wenku.baidu.com/view/450b8643cc7931b765ce15c1.html</a></li>\n</ul>\n<h1 id=\"三-dns负载均衡\"><a href=\"#三-dns负载均衡\" class=\"headerlink\" title=\"三. dns负载均衡\"></a>三. dns负载均衡</h1><ol>\n<li>dns负载均衡由dns服务提供厂商提供。</li>\n<li>最初的dns负载均衡提供简单轮询，不能根据客户端或者服务端状态进行选择。</li>\n<li>目前，有些dns服务厂商可以提供智能dns服务，用户可以设置负载均衡方案，例如：根据客户端ip地址，选择就近的服务器。</li>\n<li>对于目前大多数的公司而言，为了更好的服务用户，通常会使用dns负载均衡，将用户按照就近原则，分配到某个集群服务器上。之后，集群内再采用其他的负载均衡方案。</li>\n</ol>\n<h1 id=\"四-Linux-Virtual-Server-LVS\"><a href=\"#四-Linux-Virtual-Server-LVS\" class=\"headerlink\" title=\"四. Linux Virtual Server(LVS)\"></a>四. Linux Virtual Server(LVS)</h1><ol>\n<li>LVS通过修改数据包Ip地址，Mac地址实现负载均衡。</li>\n<li>LVS由ipvs(内核中), ipvsadm(用户态)组成。LVS需要理解tcp，ip头部。</li>\n<li>当tcp握手信号，SYN数据包达到时，ipvs选择一个后端服务器，将数据包进行转发。在此之后，所有包含相同的ip，tcp头部的数据包都会被转发到之前选择的服务器上。很明显，ipvs无法感知数据包内容。</li>\n</ol>\n<h2 id=\"4-1-分类\"><a href=\"#4-1-分类\" class=\"headerlink\" title=\"4.1 分类\"></a>4.1 分类</h2><ul>\n<li>LVS-NAT</li>\n<li>LVS-DR</li>\n<li>LVS-TUN</li>\n</ul>\n<h2 id=\"4-2-基本原理\"><a href=\"#4-2-基本原理\" class=\"headerlink\" title=\"4.2 基本原理\"></a>4.2 基本原理</h2><h3 id=\"4-2-1-LVS-DR\"><a href=\"#4-2-1-LVS-DR\" class=\"headerlink\" title=\"4.2.1 LVS-DR\"></a>4.2.1 LVS-DR</h3><p>LVS-DR模式的基本原理如下图所示:<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/lvs-dr.png\" alt=\"image\"></p>\n<h3 id=\"4-2-2-LVS-NAT\"><a href=\"#4-2-2-LVS-NAT\" class=\"headerlink\" title=\"4.2.2 LVS-NAT\"></a>4.2.2 LVS-NAT</h3><p>LVS-NAT模式的基本原理如下图所示:<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/lvs-nat.png\" alt=\"image\"></p>\n<h2 id=\"4-3-负载均衡算法\"><a href=\"#4-3-负载均衡算法\" class=\"headerlink\" title=\"4.3 负载均衡算法\"></a>4.3 负载均衡算法</h2><h3 id=\"4-3-1-静态算法\"><a href=\"#4-3-1-静态算法\" class=\"headerlink\" title=\"4.3.1 静态算法\"></a>4.3.1 静态算法</h3><ol>\n<li>轮询(Round Robin, RR)</li>\n<li>加权轮询(Weight Round Robin, WRR)</li>\n<li>源地址Hash(Source Hash, SH)</li>\n<li>目的地址Hash(Destination Hash, DH), 可以设置多个VIP</li>\n</ol>\n<h3 id=\"4-3-2-动态算法\"><a href=\"#4-3-2-动态算法\" class=\"headerlink\" title=\"4.3.2 动态算法\"></a>4.3.2 动态算法</h3><ol>\n<li>最少连接(Least Connections, LC)，找出当前连接数最小的服务器</li>\n<li>加权最少连接(Weighted Least Connections, WLC)</li>\n<li>最短期望延迟(Shortest Expected Delay Scheduling, SED) 基于WLC。例如: 现有A, B, C三台服务器，权重分别为100,200,300，当前的连接数分别为1,2,3,下一个连接到达时，通过计算期望时延选择服务器(1+1)/100, (2+1)/200, (3+1)/300, 故而选择C服务器。</li>\n<li>永不排队(Never Queue Scheduling, NQ)， 改进的sed, 如果某台服务器连接数为0，直接连接过去，不在进行sed计算。</li>\n<li>基于局部性的最少连接(locality-Based Least Connections, LBLC)，根据目标ip, 找出目标ip最近使用的服务器，如果服务器存在并且负载没有大于一个阈值，则将新的连接分配到这个服务器上，否则按照最少连接找出一个服务器处理该请求。</li>\n<li>带复制的基于局部性最少连接(Locality-Based Least Connections with Replication, LBLCR)，根据目标ip，维护一个服务器组，每次从组中挑选服务器，如果服务器不可以处理，则从所有服务器中按照最少连接挑选出一台服务器，并将其加入到目标ip的处理组服务器中。</li>\n</ol>\n<h2 id=\"4-3-参考\"><a href=\"#4-3-参考\" class=\"headerlink\" title=\"4.3 参考\"></a>4.3 参考</h2><ul>\n<li><a href=\"https://liangshuang.name/2017/11/19/lvs/\" target=\"_blank\" rel=\"noopener\">https://liangshuang.name/2017/11/19/lvs/</a></li>\n</ul>\n<h1 id=\"五-Nginx-Load-Balance\"><a href=\"#五-Nginx-Load-Balance\" class=\"headerlink\" title=\"五. Nginx Load Balance\"></a>五. Nginx Load Balance</h1><ol>\n<li>nginx负载均衡工作在7层，它会与client、upstream分别建立tcp连接，nginx需要维护这两个连接的状态。</li>\n<li>nginx的stream模块可以用于4层负载均衡，但一般很少使用。</li>\n</ol>\n<h2 id=\"5-1-基本原理\"><a href=\"#5-1-基本原理\" class=\"headerlink\" title=\"5.1 基本原理\"></a>5.1 基本原理</h2><p>nginx做7层负载均衡的基本原理如下图所示:<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png\" alt=\"image\"></p>\n<h2 id=\"5-2-负载均衡算法\"><a href=\"#5-2-负载均衡算法\" class=\"headerlink\" title=\"5.2 负载均衡算法\"></a>5.2 负载均衡算法</h2><ol>\n<li>轮询(默认)</li>\n<li>加权轮询</li>\n<li>源ip哈希</li>\n<li>响应时间</li>\n<li>url 哈希</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-基础知识\"><a href=\"#一-基础知识\" class=\"headerlink\" title=\"一. 基础知识\"></a>一. 基础知识</h1><h2 id=\"1-1-基础\"><a href=\"#1-1-基础\" class=\"headerlink\" title=\"1.1 基础\"></a>1.1 基础</h2><ol>\n<li>什么是负载均衡?<blockquote>\n<p>当单机提供的并发量不能满足需求时，我们需要多台服务器同时服务。当客户请求到达时，如何为客户选择最合适的服务器?这个问题就是负载均衡问题。</p>\n</blockquote>\n</li>\n<li>负载均衡主要需要解决的问题是哪些?<blockquote>\n<ul>\n<li>从客户端的角度上看，客户需要最快速的得到服务器的相应，负载均衡时需要找出能最快相应客户需求的服务器进行服务。</li>\n<li>从服务端来看如何使得每台服务器都能达到较高的利用率，最大限制的为用户提供快速、可靠的服务是服务端需要考虑的主要问题。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"1-2-负载均衡分类\"><a href=\"#1-2-负载均衡分类\" class=\"headerlink\" title=\"1.2 负载均衡分类\"></a>1.2 负载均衡分类</h2><ol>\n<li><p>硬件</p>\n<blockquote>\n<ul>\n<li>F5</li>\n</ul>\n</blockquote>\n</li>\n<li><p>软件</p>\n<blockquote>\n<ul>\n<li>dns负载均衡</li>\n<li>LVS负载均衡(4层)</li>\n<li>nginx, haproxy(7层)</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"二-F5负载均衡\"><a href=\"#二-F5负载均衡\" class=\"headerlink\" title=\"二. F5负载均衡\"></a>二. F5负载均衡</h1><ol>\n<li>F5是一家美国的公司，该公司生产一些硬件设备可以作为负载均衡器使用(例如:big-ip), 本文后续部分所说的F5是指其负载均衡器产品。</li>\n<li>不同的产品实现的功能不一致，具体情况需要根据产品说明书。</li>\n<li>F5可以在4-7层内做负载均衡，用户可以根据需求进行配置。</li>\n<li>由于F5可以做7层负载均衡，故而可以实现会话管理，http处理等。</li>\n</ol>\n<h2 id=\"2-1-数据转发模式\"><a href=\"#2-1-数据转发模式\" class=\"headerlink\" title=\"2.1 数据转发模式\"></a>2.1 数据转发模式</h2><ol>\n<li>standard类型, 这种模式下，客户端与F5服务器建立连接，F5服务器与真实服务器建立连接，F5服务器将客户需求转发给真实服务器，并将真实服务器的相应转发给客户端，此时F5可以查看请求和相应的所有信息。</li>\n<li>四层转发模式(performance L4), 这种模式下，F5只处理4层以下的数据。客户端将数据发送给F5, F5仅将数据转发给真实服务器，包括TCP的握手数据包以及挥手数据包，真实服务器需要先将数据发送给F5服务器，F5将其转发给客户端。</li>\n<li>路由模式, 这种模式与LVS的DR模式类似。</li>\n<li>…</li>\n</ol>\n<h2 id=\"2-2-负载均衡算法\"><a href=\"#2-2-负载均衡算法\" class=\"headerlink\" title=\"2.2 负载均衡算法\"></a>2.2 负载均衡算法</h2><ol>\n<li>轮询，加权轮询。</li>\n<li>源地址哈希</li>\n<li>…</li>\n</ol>\n<h2 id=\"2-3-小结\"><a href=\"#2-3-小结\" class=\"headerlink\" title=\"2.3 小结\"></a>2.3 小结</h2><p>F5的优势在于功能强大，并发量高，能满足客户的大多数需求，但其成本较高，一般大型国企可能会使用。</p>\n<h2 id=\"2-4-参考\"><a href=\"#2-4-参考\" class=\"headerlink\" title=\"2.4 参考\"></a>2.4 参考</h2><ul>\n<li><a href=\"https://f5.com/zh\" target=\"_blank\" rel=\"noopener\">https://f5.com/zh</a></li>\n<li><a href=\"https://www.jianshu.com/p/2b55aa4c21e2\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/2b55aa4c21e2</a></li>\n<li><a href=\"https://wenku.baidu.com/view/450b8643cc7931b765ce15c1.html\" target=\"_blank\" rel=\"noopener\">https://wenku.baidu.com/view/450b8643cc7931b765ce15c1.html</a></li>\n</ul>\n<h1 id=\"三-dns负载均衡\"><a href=\"#三-dns负载均衡\" class=\"headerlink\" title=\"三. dns负载均衡\"></a>三. dns负载均衡</h1><ol>\n<li>dns负载均衡由dns服务提供厂商提供。</li>\n<li>最初的dns负载均衡提供简单轮询，不能根据客户端或者服务端状态进行选择。</li>\n<li>目前，有些dns服务厂商可以提供智能dns服务，用户可以设置负载均衡方案，例如：根据客户端ip地址，选择就近的服务器。</li>\n<li>对于目前大多数的公司而言，为了更好的服务用户，通常会使用dns负载均衡，将用户按照就近原则，分配到某个集群服务器上。之后，集群内再采用其他的负载均衡方案。</li>\n</ol>\n<h1 id=\"四-Linux-Virtual-Server-LVS\"><a href=\"#四-Linux-Virtual-Server-LVS\" class=\"headerlink\" title=\"四. Linux Virtual Server(LVS)\"></a>四. Linux Virtual Server(LVS)</h1><ol>\n<li>LVS通过修改数据包Ip地址，Mac地址实现负载均衡。</li>\n<li>LVS由ipvs(内核中), ipvsadm(用户态)组成。LVS需要理解tcp，ip头部。</li>\n<li>当tcp握手信号，SYN数据包达到时，ipvs选择一个后端服务器，将数据包进行转发。在此之后，所有包含相同的ip，tcp头部的数据包都会被转发到之前选择的服务器上。很明显，ipvs无法感知数据包内容。</li>\n</ol>\n<h2 id=\"4-1-分类\"><a href=\"#4-1-分类\" class=\"headerlink\" title=\"4.1 分类\"></a>4.1 分类</h2><ul>\n<li>LVS-NAT</li>\n<li>LVS-DR</li>\n<li>LVS-TUN</li>\n</ul>\n<h2 id=\"4-2-基本原理\"><a href=\"#4-2-基本原理\" class=\"headerlink\" title=\"4.2 基本原理\"></a>4.2 基本原理</h2><h3 id=\"4-2-1-LVS-DR\"><a href=\"#4-2-1-LVS-DR\" class=\"headerlink\" title=\"4.2.1 LVS-DR\"></a>4.2.1 LVS-DR</h3><p>LVS-DR模式的基本原理如下图所示:<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/lvs-dr.png\" alt=\"image\"></p>\n<h3 id=\"4-2-2-LVS-NAT\"><a href=\"#4-2-2-LVS-NAT\" class=\"headerlink\" title=\"4.2.2 LVS-NAT\"></a>4.2.2 LVS-NAT</h3><p>LVS-NAT模式的基本原理如下图所示:<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/lvs-nat.png\" alt=\"image\"></p>\n<h2 id=\"4-3-负载均衡算法\"><a href=\"#4-3-负载均衡算法\" class=\"headerlink\" title=\"4.3 负载均衡算法\"></a>4.3 负载均衡算法</h2><h3 id=\"4-3-1-静态算法\"><a href=\"#4-3-1-静态算法\" class=\"headerlink\" title=\"4.3.1 静态算法\"></a>4.3.1 静态算法</h3><ol>\n<li>轮询(Round Robin, RR)</li>\n<li>加权轮询(Weight Round Robin, WRR)</li>\n<li>源地址Hash(Source Hash, SH)</li>\n<li>目的地址Hash(Destination Hash, DH), 可以设置多个VIP</li>\n</ol>\n<h3 id=\"4-3-2-动态算法\"><a href=\"#4-3-2-动态算法\" class=\"headerlink\" title=\"4.3.2 动态算法\"></a>4.3.2 动态算法</h3><ol>\n<li>最少连接(Least Connections, LC)，找出当前连接数最小的服务器</li>\n<li>加权最少连接(Weighted Least Connections, WLC)</li>\n<li>最短期望延迟(Shortest Expected Delay Scheduling, SED) 基于WLC。例如: 现有A, B, C三台服务器，权重分别为100,200,300，当前的连接数分别为1,2,3,下一个连接到达时，通过计算期望时延选择服务器(1+1)/100, (2+1)/200, (3+1)/300, 故而选择C服务器。</li>\n<li>永不排队(Never Queue Scheduling, NQ)， 改进的sed, 如果某台服务器连接数为0，直接连接过去，不在进行sed计算。</li>\n<li>基于局部性的最少连接(locality-Based Least Connections, LBLC)，根据目标ip, 找出目标ip最近使用的服务器，如果服务器存在并且负载没有大于一个阈值，则将新的连接分配到这个服务器上，否则按照最少连接找出一个服务器处理该请求。</li>\n<li>带复制的基于局部性最少连接(Locality-Based Least Connections with Replication, LBLCR)，根据目标ip，维护一个服务器组，每次从组中挑选服务器，如果服务器不可以处理，则从所有服务器中按照最少连接挑选出一台服务器，并将其加入到目标ip的处理组服务器中。</li>\n</ol>\n<h2 id=\"4-3-参考\"><a href=\"#4-3-参考\" class=\"headerlink\" title=\"4.3 参考\"></a>4.3 参考</h2><ul>\n<li><a href=\"https://liangshuang.name/2017/11/19/lvs/\" target=\"_blank\" rel=\"noopener\">https://liangshuang.name/2017/11/19/lvs/</a></li>\n</ul>\n<h1 id=\"五-Nginx-Load-Balance\"><a href=\"#五-Nginx-Load-Balance\" class=\"headerlink\" title=\"五. Nginx Load Balance\"></a>五. Nginx Load Balance</h1><ol>\n<li>nginx负载均衡工作在7层，它会与client、upstream分别建立tcp连接，nginx需要维护这两个连接的状态。</li>\n<li>nginx的stream模块可以用于4层负载均衡，但一般很少使用。</li>\n</ol>\n<h2 id=\"5-1-基本原理\"><a href=\"#5-1-基本原理\" class=\"headerlink\" title=\"5.1 基本原理\"></a>5.1 基本原理</h2><p>nginx做7层负载均衡的基本原理如下图所示:<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png\" alt=\"image\"></p>\n<h2 id=\"5-2-负载均衡算法\"><a href=\"#5-2-负载均衡算法\" class=\"headerlink\" title=\"5.2 负载均衡算法\"></a>5.2 负载均衡算法</h2><ol>\n<li>轮询(默认)</li>\n<li>加权轮询</li>\n<li>源ip哈希</li>\n<li>响应时间</li>\n<li>url 哈希</li>\n</ol>\n"},{"title":"字节序与位序","date":"2018-11-05T11:52:07.000Z","_content":"\n# 一. 本机字节序\n1. 小端: 低位字节存在低地址。\n2. 大端: 低位字节存在高地址。\n\n# 二. 本机位序\n一般情况下，本机位序与本机的字节序一致。\n1. 小端字节序: 低位bit存在低地址。\n2. 大端字节序: 低位bit存在高地址。\n\n# 三. 网络序\n1. 网络字节序(大端)，先传送高位字节，再传送低位字节。\n2. 在传输一个字节时，先传送低位bit, 再传送高位bit。\n\n注: 指针指向变量或者数组的起始地址，即指向低地址。\n\n# 四. 代码示例\n```cpp\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main (int argc, char **argv){\n    union byte_order{\n        int a;\n        unsigned char b[4];\n    };\n    byte_order val;\n    val.a = 0x01020304;\n    printf(\"address 0x%x byte: 0x%x\\n\", &val.b[0], val.b[0]);\n    printf(\"address 0x%x byte: 0x%x\\n\", &val.b[1], val.b[1]);\n    printf(\"address 0x%x byte: 0x%x\\n\", &val.b[2], val.b[2]);\n    printf(\"address 0x%x byte: 0x%x\\n\", &val.b[3], val.b[3]);\n\n    struct  bit_order{\n        unsigned char a:4;\n        unsigned char b:4;\n    };\n    unsigned char tmp = 0x04;\n    bit_order *val1 = (bit_order*)&tmp;\n    printf(\"low bit %d\\n\", val1->a);\n    printf(\"high bit %d\\n\", val1->b);\n}\n\n//输出:\naddress 0x56074a68 byte: 0x4\naddress 0x56074a69 byte: 0x3\naddress 0x56074a6a byte: 0x2\naddress 0x56074a6b byte: 0x1\nlow bit 4\nhigh bit 0\n```\n","source":"_posts/net-byte-order.md","raw":"---\ntitle: 字节序与位序\ndate: 2018-11-05 19:52:07\ncategories:\n- 网络编程\n- 基础\ntags:\n- 网络编程\n- 数据传输顺序\n---\n\n# 一. 本机字节序\n1. 小端: 低位字节存在低地址。\n2. 大端: 低位字节存在高地址。\n\n# 二. 本机位序\n一般情况下，本机位序与本机的字节序一致。\n1. 小端字节序: 低位bit存在低地址。\n2. 大端字节序: 低位bit存在高地址。\n\n# 三. 网络序\n1. 网络字节序(大端)，先传送高位字节，再传送低位字节。\n2. 在传输一个字节时，先传送低位bit, 再传送高位bit。\n\n注: 指针指向变量或者数组的起始地址，即指向低地址。\n\n# 四. 代码示例\n```cpp\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main (int argc, char **argv){\n    union byte_order{\n        int a;\n        unsigned char b[4];\n    };\n    byte_order val;\n    val.a = 0x01020304;\n    printf(\"address 0x%x byte: 0x%x\\n\", &val.b[0], val.b[0]);\n    printf(\"address 0x%x byte: 0x%x\\n\", &val.b[1], val.b[1]);\n    printf(\"address 0x%x byte: 0x%x\\n\", &val.b[2], val.b[2]);\n    printf(\"address 0x%x byte: 0x%x\\n\", &val.b[3], val.b[3]);\n\n    struct  bit_order{\n        unsigned char a:4;\n        unsigned char b:4;\n    };\n    unsigned char tmp = 0x04;\n    bit_order *val1 = (bit_order*)&tmp;\n    printf(\"low bit %d\\n\", val1->a);\n    printf(\"high bit %d\\n\", val1->b);\n}\n\n//输出:\naddress 0x56074a68 byte: 0x4\naddress 0x56074a69 byte: 0x3\naddress 0x56074a6a byte: 0x2\naddress 0x56074a6b byte: 0x1\nlow bit 4\nhigh bit 0\n```\n","slug":"net-byte-order","published":1,"updated":"2019-05-27T01:49:32.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg5wpdzr001c63318i3fwlwg","content":"<h1 id=\"一-本机字节序\"><a href=\"#一-本机字节序\" class=\"headerlink\" title=\"一. 本机字节序\"></a>一. 本机字节序</h1><ol>\n<li>小端: 低位字节存在低地址。</li>\n<li>大端: 低位字节存在高地址。</li>\n</ol>\n<h1 id=\"二-本机位序\"><a href=\"#二-本机位序\" class=\"headerlink\" title=\"二. 本机位序\"></a>二. 本机位序</h1><p>一般情况下，本机位序与本机的字节序一致。</p>\n<ol>\n<li>小端字节序: 低位bit存在低地址。</li>\n<li>大端字节序: 低位bit存在高地址。</li>\n</ol>\n<h1 id=\"三-网络序\"><a href=\"#三-网络序\" class=\"headerlink\" title=\"三. 网络序\"></a>三. 网络序</h1><ol>\n<li>网络字节序(大端)，先传送高位字节，再传送低位字节。</li>\n<li>在传输一个字节时，先传送低位bit, 再传送高位bit。</li>\n</ol>\n<p>注: 指针指向变量或者数组的起始地址，即指向低地址。</p>\n<h1 id=\"四-代码示例\"><a href=\"#四-代码示例\" class=\"headerlink\" title=\"四. 代码示例\"></a>四. 代码示例</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">union</span> byte_order&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> b[<span class=\"number\">4</span>];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    byte_order val;</span><br><span class=\"line\">    val.a = <span class=\"number\">0x01020304</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"address 0x%x byte: 0x%x\\n\"</span>, &amp;val.b[<span class=\"number\">0</span>], val.b[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"address 0x%x byte: 0x%x\\n\"</span>, &amp;val.b[<span class=\"number\">1</span>], val.b[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"address 0x%x byte: 0x%x\\n\"</span>, &amp;val.b[<span class=\"number\">2</span>], val.b[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"address 0x%x byte: 0x%x\\n\"</span>, &amp;val.b[<span class=\"number\">3</span>], val.b[<span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span>  <span class=\"title\">bit_order</span>&#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> a:<span class=\"number\">4</span>;</span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> b:<span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> tmp = <span class=\"number\">0x04</span>;</span><br><span class=\"line\">    bit_order *val1 = (bit_order*)&amp;tmp;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"low bit %d\\n\"</span>, val1-&gt;a);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"high bit %d\\n\"</span>, val1-&gt;b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出:</span></span><br><span class=\"line\">address <span class=\"number\">0x56074a68</span> byte: <span class=\"number\">0x4</span></span><br><span class=\"line\">address <span class=\"number\">0x56074a69</span> byte: <span class=\"number\">0x3</span></span><br><span class=\"line\">address <span class=\"number\">0x56074a6a</span> byte: <span class=\"number\">0x2</span></span><br><span class=\"line\">address <span class=\"number\">0x56074a6b</span> byte: <span class=\"number\">0x1</span></span><br><span class=\"line\">low bit <span class=\"number\">4</span></span><br><span class=\"line\">high bit <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-本机字节序\"><a href=\"#一-本机字节序\" class=\"headerlink\" title=\"一. 本机字节序\"></a>一. 本机字节序</h1><ol>\n<li>小端: 低位字节存在低地址。</li>\n<li>大端: 低位字节存在高地址。</li>\n</ol>\n<h1 id=\"二-本机位序\"><a href=\"#二-本机位序\" class=\"headerlink\" title=\"二. 本机位序\"></a>二. 本机位序</h1><p>一般情况下，本机位序与本机的字节序一致。</p>\n<ol>\n<li>小端字节序: 低位bit存在低地址。</li>\n<li>大端字节序: 低位bit存在高地址。</li>\n</ol>\n<h1 id=\"三-网络序\"><a href=\"#三-网络序\" class=\"headerlink\" title=\"三. 网络序\"></a>三. 网络序</h1><ol>\n<li>网络字节序(大端)，先传送高位字节，再传送低位字节。</li>\n<li>在传输一个字节时，先传送低位bit, 再传送高位bit。</li>\n</ol>\n<p>注: 指针指向变量或者数组的起始地址，即指向低地址。</p>\n<h1 id=\"四-代码示例\"><a href=\"#四-代码示例\" class=\"headerlink\" title=\"四. 代码示例\"></a>四. 代码示例</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">union</span> byte_order&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> b[<span class=\"number\">4</span>];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    byte_order val;</span><br><span class=\"line\">    val.a = <span class=\"number\">0x01020304</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"address 0x%x byte: 0x%x\\n\"</span>, &amp;val.b[<span class=\"number\">0</span>], val.b[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"address 0x%x byte: 0x%x\\n\"</span>, &amp;val.b[<span class=\"number\">1</span>], val.b[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"address 0x%x byte: 0x%x\\n\"</span>, &amp;val.b[<span class=\"number\">2</span>], val.b[<span class=\"number\">2</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"address 0x%x byte: 0x%x\\n\"</span>, &amp;val.b[<span class=\"number\">3</span>], val.b[<span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span>  <span class=\"title\">bit_order</span>&#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> a:<span class=\"number\">4</span>;</span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> b:<span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> tmp = <span class=\"number\">0x04</span>;</span><br><span class=\"line\">    bit_order *val1 = (bit_order*)&amp;tmp;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"low bit %d\\n\"</span>, val1-&gt;a);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"high bit %d\\n\"</span>, val1-&gt;b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出:</span></span><br><span class=\"line\">address <span class=\"number\">0x56074a68</span> byte: <span class=\"number\">0x4</span></span><br><span class=\"line\">address <span class=\"number\">0x56074a69</span> byte: <span class=\"number\">0x3</span></span><br><span class=\"line\">address <span class=\"number\">0x56074a6a</span> byte: <span class=\"number\">0x2</span></span><br><span class=\"line\">address <span class=\"number\">0x56074a6b</span> byte: <span class=\"number\">0x1</span></span><br><span class=\"line\">low bit <span class=\"number\">4</span></span><br><span class=\"line\">high bit <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n"},{"title":"nginx内存管理","date":"2018-10-31T05:48:37.000Z","_content":"\n# 一. 概述\n1. 应用程序的内存可以简单分为堆内存，栈内存。对于栈内存而言，在函数编译时，编译器会插入移动栈当前指针位置的代码，实现栈空间的自管理。而对于堆内存，通常需要程序员进行管理。我们通常说的内存管理亦是只堆空间内存管理。\n\n\n2. 对于内存，我们的使用可以简化为3步，申请内存、使用内存、释放内存。申请内存，使用内存通常需要程序员显示操作，释放内存却并不一定需要程序员显示操作，目前很多的高级语言提供了垃圾回收机制，可以自行选择时机释放内存，例如: Go、Java已经实现垃圾回收, C语言目前尚未实现垃圾回收，C++中可以通过智能指针达到垃圾回收的目的。\n\n\n3. 除了语言层面的内存管理外，有时我们需要在程序中自行管理内存，总体而言，对于内存管理，我认为主要是解决以下问题:\n- 用户申请内存时，如何快速查找到满足用户需求的内存块？ \n- 用户释放内存时，如何避免内存碎片化？\n\n> 无论是语言层面实现的内存管理还是应用程序自行实现的内存管理，大都将内存按照大小分为几种，每种采用不同的管理模式。常见的分类是按照2的整数次幂分，将不同种类的内存通过链表链接，查询时，从相应大小的链表中寻找，如果找不到，则可以考虑从更大块内存中，拿取一块，将其分为多个小点的内存。当然，对于特别大的内存，语言层面的内存管理可以直接调用内存管理相关的系统调用，应用层面的内存管理则可以直接使用语言层面的内存管理。\n\n4. nginx内存管理整体可以分为2个部分，\n- 第一部分是常规的内存池，用于进程平时所需的内存管理；\n- 第二部分是共享内存的管理。总体而言，共享内存教内存池要复杂的多。\n\n\n# 二. nginx内存池管理\n## 2.1 说明\n1. 本部分使用的nginx版本为1.15.3\n2. 具体源码参见src/core/ngx_palloc.c文件\n\n\n## 2.2 nginx实现\n### 2.2.1 使用流程\nnginx内存池的使用较为简单,可以分为3步，\n- 调用ngx_create_pool函数获取ngx_pool_t指针。\n```cpp\n//size代表ngx_pool_t一块的大小\nngx_pool_t* ngx_create_pool(size_t size, ngx_log_t *log)\n```\n\n- 调用ngx_palloc申请内存使用\n```cpp\n//从pool中申请size大小的内存\nvoid* ngx_palloc(ngx_pool_t *pool, size_t size)\n```\n\n- 释放内存(可以释放大块内存或者释放整个内存池)\n```cpp\n//释放从pool中申请的大块内存\nngx_int_t ngx_pfree(ngx_pool_t *pool, void *p)\n//释放整个内存池\nvoid ngx_destroy_pool(ngx_pool_t *pool)\n```\n\n### 2.2.2 具体实现\n1. 如下图所示，nginx将内存分为2种，一种是小内存，一种是大内存，当申请的空间大于pool->max时，我们认为是大内存空间，否则是小内存空间。\n```cpp\n//创建内存池的参数size减去头部管理结构ngx_pool_t的大小\npool->max = size - sizeof(ngx_pool_t);\n```\n![image](https://picturestore.nos-eastchina1.126.net/nginx/%E5%86%85%E5%AD%98%E6%B1%A0.png)\n\n2. 对于小块内存空间, nginx首先查看当前内存块待分配的空间中，是否能够满足用户需求，如果可以，则直接将这部分内存返回。如果不能满足用户需求，则需要重新申请一个内存块，申请的内存块与当前块空间大小相同，将新申请的内存块通过链表链接到上一个内存块，从新的内存块中分配用户所需的内存。\n\n> 小块内存并不释放，用户申请后直接使用，即使后期不再使用也不需要释放该内存。由于用户有时并不知道自己使用的内存块是大是小，此时也可以调用ngx_pfree函数释放该空间，该函数会从大空间链表中查找内存，找到则释放内存。对于小内存而言，并未做任何处理。\n\n\n\n3. 对于大块内存, nginx会将这些内存放到链表中存储，通过pool->large进行管理。值得注意的是，用户管理大内存的ngx_pool_large_t结构是从本内存池的小块内存中申请而来，也就意味着无法释放这些内存，nginx则是直接复用ngx_pool_large_t结构体。当用户需要申请大内存空间时，利用c函数库malloc申请空间，然后将其挂载某个ngx_pool_large_t结构体上。nginx在需要一个新的ngx_pool_large_t结构时，会首先pool->large链表的前3个元素中，查看是否有可用的,如果有则直接使用，否则新建ngx_pool_large_t结构。\n\n\n# 三. nginx共享内存管理\n## 3.1 说明\n1. 本部分使用的nginx版本是1.15.3\n2. 本部分源码详见src/core/ngx_slab.c, src/core/ngx_shmtx.c\n3. nginx共享内存内容相对较多，本文仅做简单概述。\n\n\n## 3.2 直接使用共享内存\n### 3.2.1 基础\n1. nginx中需要创建互斥锁，用于后面多进程同步使用。除此之外，nginx可能需要一些统计信息，例如设置(stat_stub),对于这些变量，我们并不需要特意管理，只需要开辟共享空间后，直接使用即可。\n2. 设置stat_stub后所需的统计信息，亦是放到共享内存中，我们此处仅以nginx中的互斥锁进行说明。\n\n### 3.2.2 nginx互斥锁的实现\n1. nginx互斥锁，有两种方案，当系统支持原子操作时，采用原子操作，不支持时采用文件锁。本节源码见ngx_event_module_init函数。\n2. 下图为文件锁实现互斥锁的示意图。\n![image](https://picturestore.nos-eastchina1.126.net/nginx/ngxin%E6%96%87%E4%BB%B6%E9%94%81%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%BA%92%E6%96%A5%E9%94%81.png)\n3. 下图为原子操作实现互斥锁的示意图。\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0%E4%BA%92%E6%96%A5%E9%94%81.png)\n\n4. 问题\n\n> 1. reload时，新启动的master向老的master发送信号后直接退出，旧的master,重新加载配置(ngx_init_cycle函数), 新创建工作进程, 新的工作进程与旧的工作进程使用的锁是相同的。\n> 2. 平滑升级时, 旧的master会创建新的master, 新的master会继承旧的master监听的端口(通过环境变量传递监听套接字对应的fd)，新的进程并没有重新绑定监听端口。可能存在新老worker同时监听某个端口的情况，此时操作系统会保证只会有一个进程处理该事件(虽然epoll_wait都会被唤醒)。\n\n\n## 3.3 通过slab管理共享内存\n1. nginx允许各个模块开辟共享空间以供使用,例如ngx_http_limit_conn_module模块。\n2. nginx共享内存管理的基本思想有:\n\n> 1. 将内存按照页进行分配，每页的大小相同, 此处设为page_size。\n> 2. 将内存块按照2的整数次幂进行划分, 最小为8bit, 最大为page_size/2。例如，假设每页大小为4Kb, 则将内存分为8, 16, 32, 64, 128, 256, 512, 1024, 2048共9种，每种对应一个slot, 此时slots数组的大小n即为9。申请小块内存(申请内存大小size <= page_size/2)时，直接给用户这9种中的一种，例如，需要30bit时，找大小为32的内存块提供给用户。\n> 3. 每个页只会划分一种类型的内存块。例如，某次申请内存时，现有内存无法满足要求，此时会使用一个新的页，则这个新页此后只会分配这种大小的内存。\n> 4. 通过双向链表将所有空闲的页连接。图中ngx_slab_pool_t中的free变量即使用来链接空闲页的。\n> 5. 通过slots数组将所有小块内存所使用的页链接起来。\n> 6. 对于大于等于页面大小的空间请求，计算所需页数，找到连续的空闲页，将空闲页的首页地址返回给客户使用，通过每页的管理结构ngx_slab_page_t进行标识。\n> 7. 所有页面只会有3中状态，空闲、未满、已满。空闲，未满都是通过双向链表进行整合，已满页面则不存在与任何页面，当空间被释放时，会将其加入到某个链表。\n\n\n3. nginx共享内存的基本结构图如下:\n\n![image](https://picturestore.nos-eastchina1.126.net/nginx/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%9B%BE.png)\n\n- 在上图中，除了最右侧的ngx_slab_pool_t接口开始的一段内存位于共享内存区外，其他内存都不是共享内存。\n- 共享内存最终是从page中分配而来。\n\n\n","source":"_posts/nginx_memory_manage.md","raw":"---\ntitle: nginx内存管理\ndate: 2018-10-31 13:48:37\ncategories:\n- nginx\n- 内存管理\ntags:\n- nginx\n---\n\n# 一. 概述\n1. 应用程序的内存可以简单分为堆内存，栈内存。对于栈内存而言，在函数编译时，编译器会插入移动栈当前指针位置的代码，实现栈空间的自管理。而对于堆内存，通常需要程序员进行管理。我们通常说的内存管理亦是只堆空间内存管理。\n\n\n2. 对于内存，我们的使用可以简化为3步，申请内存、使用内存、释放内存。申请内存，使用内存通常需要程序员显示操作，释放内存却并不一定需要程序员显示操作，目前很多的高级语言提供了垃圾回收机制，可以自行选择时机释放内存，例如: Go、Java已经实现垃圾回收, C语言目前尚未实现垃圾回收，C++中可以通过智能指针达到垃圾回收的目的。\n\n\n3. 除了语言层面的内存管理外，有时我们需要在程序中自行管理内存，总体而言，对于内存管理，我认为主要是解决以下问题:\n- 用户申请内存时，如何快速查找到满足用户需求的内存块？ \n- 用户释放内存时，如何避免内存碎片化？\n\n> 无论是语言层面实现的内存管理还是应用程序自行实现的内存管理，大都将内存按照大小分为几种，每种采用不同的管理模式。常见的分类是按照2的整数次幂分，将不同种类的内存通过链表链接，查询时，从相应大小的链表中寻找，如果找不到，则可以考虑从更大块内存中，拿取一块，将其分为多个小点的内存。当然，对于特别大的内存，语言层面的内存管理可以直接调用内存管理相关的系统调用，应用层面的内存管理则可以直接使用语言层面的内存管理。\n\n4. nginx内存管理整体可以分为2个部分，\n- 第一部分是常规的内存池，用于进程平时所需的内存管理；\n- 第二部分是共享内存的管理。总体而言，共享内存教内存池要复杂的多。\n\n\n# 二. nginx内存池管理\n## 2.1 说明\n1. 本部分使用的nginx版本为1.15.3\n2. 具体源码参见src/core/ngx_palloc.c文件\n\n\n## 2.2 nginx实现\n### 2.2.1 使用流程\nnginx内存池的使用较为简单,可以分为3步，\n- 调用ngx_create_pool函数获取ngx_pool_t指针。\n```cpp\n//size代表ngx_pool_t一块的大小\nngx_pool_t* ngx_create_pool(size_t size, ngx_log_t *log)\n```\n\n- 调用ngx_palloc申请内存使用\n```cpp\n//从pool中申请size大小的内存\nvoid* ngx_palloc(ngx_pool_t *pool, size_t size)\n```\n\n- 释放内存(可以释放大块内存或者释放整个内存池)\n```cpp\n//释放从pool中申请的大块内存\nngx_int_t ngx_pfree(ngx_pool_t *pool, void *p)\n//释放整个内存池\nvoid ngx_destroy_pool(ngx_pool_t *pool)\n```\n\n### 2.2.2 具体实现\n1. 如下图所示，nginx将内存分为2种，一种是小内存，一种是大内存，当申请的空间大于pool->max时，我们认为是大内存空间，否则是小内存空间。\n```cpp\n//创建内存池的参数size减去头部管理结构ngx_pool_t的大小\npool->max = size - sizeof(ngx_pool_t);\n```\n![image](https://picturestore.nos-eastchina1.126.net/nginx/%E5%86%85%E5%AD%98%E6%B1%A0.png)\n\n2. 对于小块内存空间, nginx首先查看当前内存块待分配的空间中，是否能够满足用户需求，如果可以，则直接将这部分内存返回。如果不能满足用户需求，则需要重新申请一个内存块，申请的内存块与当前块空间大小相同，将新申请的内存块通过链表链接到上一个内存块，从新的内存块中分配用户所需的内存。\n\n> 小块内存并不释放，用户申请后直接使用，即使后期不再使用也不需要释放该内存。由于用户有时并不知道自己使用的内存块是大是小，此时也可以调用ngx_pfree函数释放该空间，该函数会从大空间链表中查找内存，找到则释放内存。对于小内存而言，并未做任何处理。\n\n\n\n3. 对于大块内存, nginx会将这些内存放到链表中存储，通过pool->large进行管理。值得注意的是，用户管理大内存的ngx_pool_large_t结构是从本内存池的小块内存中申请而来，也就意味着无法释放这些内存，nginx则是直接复用ngx_pool_large_t结构体。当用户需要申请大内存空间时，利用c函数库malloc申请空间，然后将其挂载某个ngx_pool_large_t结构体上。nginx在需要一个新的ngx_pool_large_t结构时，会首先pool->large链表的前3个元素中，查看是否有可用的,如果有则直接使用，否则新建ngx_pool_large_t结构。\n\n\n# 三. nginx共享内存管理\n## 3.1 说明\n1. 本部分使用的nginx版本是1.15.3\n2. 本部分源码详见src/core/ngx_slab.c, src/core/ngx_shmtx.c\n3. nginx共享内存内容相对较多，本文仅做简单概述。\n\n\n## 3.2 直接使用共享内存\n### 3.2.1 基础\n1. nginx中需要创建互斥锁，用于后面多进程同步使用。除此之外，nginx可能需要一些统计信息，例如设置(stat_stub),对于这些变量，我们并不需要特意管理，只需要开辟共享空间后，直接使用即可。\n2. 设置stat_stub后所需的统计信息，亦是放到共享内存中，我们此处仅以nginx中的互斥锁进行说明。\n\n### 3.2.2 nginx互斥锁的实现\n1. nginx互斥锁，有两种方案，当系统支持原子操作时，采用原子操作，不支持时采用文件锁。本节源码见ngx_event_module_init函数。\n2. 下图为文件锁实现互斥锁的示意图。\n![image](https://picturestore.nos-eastchina1.126.net/nginx/ngxin%E6%96%87%E4%BB%B6%E9%94%81%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%BA%92%E6%96%A5%E9%94%81.png)\n3. 下图为原子操作实现互斥锁的示意图。\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0%E4%BA%92%E6%96%A5%E9%94%81.png)\n\n4. 问题\n\n> 1. reload时，新启动的master向老的master发送信号后直接退出，旧的master,重新加载配置(ngx_init_cycle函数), 新创建工作进程, 新的工作进程与旧的工作进程使用的锁是相同的。\n> 2. 平滑升级时, 旧的master会创建新的master, 新的master会继承旧的master监听的端口(通过环境变量传递监听套接字对应的fd)，新的进程并没有重新绑定监听端口。可能存在新老worker同时监听某个端口的情况，此时操作系统会保证只会有一个进程处理该事件(虽然epoll_wait都会被唤醒)。\n\n\n## 3.3 通过slab管理共享内存\n1. nginx允许各个模块开辟共享空间以供使用,例如ngx_http_limit_conn_module模块。\n2. nginx共享内存管理的基本思想有:\n\n> 1. 将内存按照页进行分配，每页的大小相同, 此处设为page_size。\n> 2. 将内存块按照2的整数次幂进行划分, 最小为8bit, 最大为page_size/2。例如，假设每页大小为4Kb, 则将内存分为8, 16, 32, 64, 128, 256, 512, 1024, 2048共9种，每种对应一个slot, 此时slots数组的大小n即为9。申请小块内存(申请内存大小size <= page_size/2)时，直接给用户这9种中的一种，例如，需要30bit时，找大小为32的内存块提供给用户。\n> 3. 每个页只会划分一种类型的内存块。例如，某次申请内存时，现有内存无法满足要求，此时会使用一个新的页，则这个新页此后只会分配这种大小的内存。\n> 4. 通过双向链表将所有空闲的页连接。图中ngx_slab_pool_t中的free变量即使用来链接空闲页的。\n> 5. 通过slots数组将所有小块内存所使用的页链接起来。\n> 6. 对于大于等于页面大小的空间请求，计算所需页数，找到连续的空闲页，将空闲页的首页地址返回给客户使用，通过每页的管理结构ngx_slab_page_t进行标识。\n> 7. 所有页面只会有3中状态，空闲、未满、已满。空闲，未满都是通过双向链表进行整合，已满页面则不存在与任何页面，当空间被释放时，会将其加入到某个链表。\n\n\n3. nginx共享内存的基本结构图如下:\n\n![image](https://picturestore.nos-eastchina1.126.net/nginx/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%9B%BE.png)\n\n- 在上图中，除了最右侧的ngx_slab_pool_t接口开始的一段内存位于共享内存区外，其他内存都不是共享内存。\n- 共享内存最终是从page中分配而来。\n\n\n","slug":"nginx_memory_manage","published":1,"updated":"2019-05-27T01:49:32.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg5wpdzt001d63314vdvha97","content":"<h1 id=\"一-概述\"><a href=\"#一-概述\" class=\"headerlink\" title=\"一. 概述\"></a>一. 概述</h1><ol>\n<li>应用程序的内存可以简单分为堆内存，栈内存。对于栈内存而言，在函数编译时，编译器会插入移动栈当前指针位置的代码，实现栈空间的自管理。而对于堆内存，通常需要程序员进行管理。我们通常说的内存管理亦是只堆空间内存管理。</li>\n</ol>\n<ol start=\"2\">\n<li>对于内存，我们的使用可以简化为3步，申请内存、使用内存、释放内存。申请内存，使用内存通常需要程序员显示操作，释放内存却并不一定需要程序员显示操作，目前很多的高级语言提供了垃圾回收机制，可以自行选择时机释放内存，例如: Go、Java已经实现垃圾回收, C语言目前尚未实现垃圾回收，C++中可以通过智能指针达到垃圾回收的目的。</li>\n</ol>\n<ol start=\"3\">\n<li>除了语言层面的内存管理外，有时我们需要在程序中自行管理内存，总体而言，对于内存管理，我认为主要是解决以下问题:</li>\n</ol>\n<ul>\n<li>用户申请内存时，如何快速查找到满足用户需求的内存块？ </li>\n<li>用户释放内存时，如何避免内存碎片化？</li>\n</ul>\n<blockquote>\n<p>无论是语言层面实现的内存管理还是应用程序自行实现的内存管理，大都将内存按照大小分为几种，每种采用不同的管理模式。常见的分类是按照2的整数次幂分，将不同种类的内存通过链表链接，查询时，从相应大小的链表中寻找，如果找不到，则可以考虑从更大块内存中，拿取一块，将其分为多个小点的内存。当然，对于特别大的内存，语言层面的内存管理可以直接调用内存管理相关的系统调用，应用层面的内存管理则可以直接使用语言层面的内存管理。</p>\n</blockquote>\n<ol start=\"4\">\n<li>nginx内存管理整体可以分为2个部分，</li>\n</ol>\n<ul>\n<li>第一部分是常规的内存池，用于进程平时所需的内存管理；</li>\n<li>第二部分是共享内存的管理。总体而言，共享内存教内存池要复杂的多。</li>\n</ul>\n<h1 id=\"二-nginx内存池管理\"><a href=\"#二-nginx内存池管理\" class=\"headerlink\" title=\"二. nginx内存池管理\"></a>二. nginx内存池管理</h1><h2 id=\"2-1-说明\"><a href=\"#2-1-说明\" class=\"headerlink\" title=\"2.1 说明\"></a>2.1 说明</h2><ol>\n<li>本部分使用的nginx版本为1.15.3</li>\n<li>具体源码参见src/core/ngx_palloc.c文件</li>\n</ol>\n<h2 id=\"2-2-nginx实现\"><a href=\"#2-2-nginx实现\" class=\"headerlink\" title=\"2.2 nginx实现\"></a>2.2 nginx实现</h2><h3 id=\"2-2-1-使用流程\"><a href=\"#2-2-1-使用流程\" class=\"headerlink\" title=\"2.2.1 使用流程\"></a>2.2.1 使用流程</h3><p>nginx内存池的使用较为简单,可以分为3步，</p>\n<ul>\n<li><p>调用ngx_create_pool函数获取ngx_pool_t指针。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//size代表ngx_pool_t一块的大小</span></span><br><span class=\"line\"><span class=\"keyword\">ngx_pool_t</span>* ngx_create_pool(<span class=\"keyword\">size_t</span> size, <span class=\"keyword\">ngx_log_t</span> *<span class=\"built_in\">log</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>调用ngx_palloc申请内存使用</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从pool中申请size大小的内存</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">ngx_palloc</span><span class=\"params\">(<span class=\"keyword\">ngx_pool_t</span> *pool, <span class=\"keyword\">size_t</span> size)</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>释放内存(可以释放大块内存或者释放整个内存池)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//释放从pool中申请的大块内存</span></span><br><span class=\"line\"><span class=\"keyword\">ngx_int_t</span> ngx_pfree(<span class=\"keyword\">ngx_pool_t</span> *pool, <span class=\"keyword\">void</span> *p)</span><br><span class=\"line\"><span class=\"comment\">//释放整个内存池</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ngx_destroy_pool</span><span class=\"params\">(<span class=\"keyword\">ngx_pool_t</span> *pool)</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-2-2-具体实现\"><a href=\"#2-2-2-具体实现\" class=\"headerlink\" title=\"2.2.2 具体实现\"></a>2.2.2 具体实现</h3><ol>\n<li>如下图所示，nginx将内存分为2种，一种是小内存，一种是大内存，当申请的空间大于pool-&gt;max时，我们认为是大内存空间，否则是小内存空间。<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建内存池的参数size减去头部管理结构ngx_pool_t的大小</span></span><br><span class=\"line\">pool-&gt;max = size - <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">ngx_pool_t</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/%E5%86%85%E5%AD%98%E6%B1%A0.png\" alt=\"image\"></p>\n<ol start=\"2\">\n<li>对于小块内存空间, nginx首先查看当前内存块待分配的空间中，是否能够满足用户需求，如果可以，则直接将这部分内存返回。如果不能满足用户需求，则需要重新申请一个内存块，申请的内存块与当前块空间大小相同，将新申请的内存块通过链表链接到上一个内存块，从新的内存块中分配用户所需的内存。</li>\n</ol>\n<blockquote>\n<p>小块内存并不释放，用户申请后直接使用，即使后期不再使用也不需要释放该内存。由于用户有时并不知道自己使用的内存块是大是小，此时也可以调用ngx_pfree函数释放该空间，该函数会从大空间链表中查找内存，找到则释放内存。对于小内存而言，并未做任何处理。</p>\n</blockquote>\n<ol start=\"3\">\n<li>对于大块内存, nginx会将这些内存放到链表中存储，通过pool-&gt;large进行管理。值得注意的是，用户管理大内存的ngx_pool_large_t结构是从本内存池的小块内存中申请而来，也就意味着无法释放这些内存，nginx则是直接复用ngx_pool_large_t结构体。当用户需要申请大内存空间时，利用c函数库malloc申请空间，然后将其挂载某个ngx_pool_large_t结构体上。nginx在需要一个新的ngx_pool_large_t结构时，会首先pool-&gt;large链表的前3个元素中，查看是否有可用的,如果有则直接使用，否则新建ngx_pool_large_t结构。</li>\n</ol>\n<h1 id=\"三-nginx共享内存管理\"><a href=\"#三-nginx共享内存管理\" class=\"headerlink\" title=\"三. nginx共享内存管理\"></a>三. nginx共享内存管理</h1><h2 id=\"3-1-说明\"><a href=\"#3-1-说明\" class=\"headerlink\" title=\"3.1 说明\"></a>3.1 说明</h2><ol>\n<li>本部分使用的nginx版本是1.15.3</li>\n<li>本部分源码详见src/core/ngx_slab.c, src/core/ngx_shmtx.c</li>\n<li>nginx共享内存内容相对较多，本文仅做简单概述。</li>\n</ol>\n<h2 id=\"3-2-直接使用共享内存\"><a href=\"#3-2-直接使用共享内存\" class=\"headerlink\" title=\"3.2 直接使用共享内存\"></a>3.2 直接使用共享内存</h2><h3 id=\"3-2-1-基础\"><a href=\"#3-2-1-基础\" class=\"headerlink\" title=\"3.2.1 基础\"></a>3.2.1 基础</h3><ol>\n<li>nginx中需要创建互斥锁，用于后面多进程同步使用。除此之外，nginx可能需要一些统计信息，例如设置(stat_stub),对于这些变量，我们并不需要特意管理，只需要开辟共享空间后，直接使用即可。</li>\n<li>设置stat_stub后所需的统计信息，亦是放到共享内存中，我们此处仅以nginx中的互斥锁进行说明。</li>\n</ol>\n<h3 id=\"3-2-2-nginx互斥锁的实现\"><a href=\"#3-2-2-nginx互斥锁的实现\" class=\"headerlink\" title=\"3.2.2 nginx互斥锁的实现\"></a>3.2.2 nginx互斥锁的实现</h3><ol>\n<li>nginx互斥锁，有两种方案，当系统支持原子操作时，采用原子操作，不支持时采用文件锁。本节源码见ngx_event_module_init函数。</li>\n<li>下图为文件锁实现互斥锁的示意图。<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/ngxin%E6%96%87%E4%BB%B6%E9%94%81%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%BA%92%E6%96%A5%E9%94%81.png\" alt=\"image\"></li>\n<li><p>下图为原子操作实现互斥锁的示意图。<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0%E4%BA%92%E6%96%A5%E9%94%81.png\" alt=\"image\"></p>\n</li>\n<li><p>问题</p>\n</li>\n</ol>\n<blockquote>\n<ol>\n<li>reload时，新启动的master向老的master发送信号后直接退出，旧的master,重新加载配置(ngx_init_cycle函数), 新创建工作进程, 新的工作进程与旧的工作进程使用的锁是相同的。</li>\n<li>平滑升级时, 旧的master会创建新的master, 新的master会继承旧的master监听的端口(通过环境变量传递监听套接字对应的fd)，新的进程并没有重新绑定监听端口。可能存在新老worker同时监听某个端口的情况，此时操作系统会保证只会有一个进程处理该事件(虽然epoll_wait都会被唤醒)。</li>\n</ol>\n</blockquote>\n<h2 id=\"3-3-通过slab管理共享内存\"><a href=\"#3-3-通过slab管理共享内存\" class=\"headerlink\" title=\"3.3 通过slab管理共享内存\"></a>3.3 通过slab管理共享内存</h2><ol>\n<li>nginx允许各个模块开辟共享空间以供使用,例如ngx_http_limit_conn_module模块。</li>\n<li>nginx共享内存管理的基本思想有:</li>\n</ol>\n<blockquote>\n<ol>\n<li>将内存按照页进行分配，每页的大小相同, 此处设为page_size。</li>\n<li>将内存块按照2的整数次幂进行划分, 最小为8bit, 最大为page_size/2。例如，假设每页大小为4Kb, 则将内存分为8, 16, 32, 64, 128, 256, 512, 1024, 2048共9种，每种对应一个slot, 此时slots数组的大小n即为9。申请小块内存(申请内存大小size &lt;= page_size/2)时，直接给用户这9种中的一种，例如，需要30bit时，找大小为32的内存块提供给用户。</li>\n<li>每个页只会划分一种类型的内存块。例如，某次申请内存时，现有内存无法满足要求，此时会使用一个新的页，则这个新页此后只会分配这种大小的内存。</li>\n<li>通过双向链表将所有空闲的页连接。图中ngx_slab_pool_t中的free变量即使用来链接空闲页的。</li>\n<li>通过slots数组将所有小块内存所使用的页链接起来。</li>\n<li>对于大于等于页面大小的空间请求，计算所需页数，找到连续的空闲页，将空闲页的首页地址返回给客户使用，通过每页的管理结构ngx_slab_page_t进行标识。</li>\n<li>所有页面只会有3中状态，空闲、未满、已满。空闲，未满都是通过双向链表进行整合，已满页面则不存在与任何页面，当空间被释放时，会将其加入到某个链表。</li>\n</ol>\n</blockquote>\n<ol start=\"3\">\n<li>nginx共享内存的基本结构图如下:</li>\n</ol>\n<p><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%9B%BE.png\" alt=\"image\"></p>\n<ul>\n<li>在上图中，除了最右侧的ngx_slab_pool_t接口开始的一段内存位于共享内存区外，其他内存都不是共享内存。</li>\n<li>共享内存最终是从page中分配而来。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-概述\"><a href=\"#一-概述\" class=\"headerlink\" title=\"一. 概述\"></a>一. 概述</h1><ol>\n<li>应用程序的内存可以简单分为堆内存，栈内存。对于栈内存而言，在函数编译时，编译器会插入移动栈当前指针位置的代码，实现栈空间的自管理。而对于堆内存，通常需要程序员进行管理。我们通常说的内存管理亦是只堆空间内存管理。</li>\n</ol>\n<ol start=\"2\">\n<li>对于内存，我们的使用可以简化为3步，申请内存、使用内存、释放内存。申请内存，使用内存通常需要程序员显示操作，释放内存却并不一定需要程序员显示操作，目前很多的高级语言提供了垃圾回收机制，可以自行选择时机释放内存，例如: Go、Java已经实现垃圾回收, C语言目前尚未实现垃圾回收，C++中可以通过智能指针达到垃圾回收的目的。</li>\n</ol>\n<ol start=\"3\">\n<li>除了语言层面的内存管理外，有时我们需要在程序中自行管理内存，总体而言，对于内存管理，我认为主要是解决以下问题:</li>\n</ol>\n<ul>\n<li>用户申请内存时，如何快速查找到满足用户需求的内存块？ </li>\n<li>用户释放内存时，如何避免内存碎片化？</li>\n</ul>\n<blockquote>\n<p>无论是语言层面实现的内存管理还是应用程序自行实现的内存管理，大都将内存按照大小分为几种，每种采用不同的管理模式。常见的分类是按照2的整数次幂分，将不同种类的内存通过链表链接，查询时，从相应大小的链表中寻找，如果找不到，则可以考虑从更大块内存中，拿取一块，将其分为多个小点的内存。当然，对于特别大的内存，语言层面的内存管理可以直接调用内存管理相关的系统调用，应用层面的内存管理则可以直接使用语言层面的内存管理。</p>\n</blockquote>\n<ol start=\"4\">\n<li>nginx内存管理整体可以分为2个部分，</li>\n</ol>\n<ul>\n<li>第一部分是常规的内存池，用于进程平时所需的内存管理；</li>\n<li>第二部分是共享内存的管理。总体而言，共享内存教内存池要复杂的多。</li>\n</ul>\n<h1 id=\"二-nginx内存池管理\"><a href=\"#二-nginx内存池管理\" class=\"headerlink\" title=\"二. nginx内存池管理\"></a>二. nginx内存池管理</h1><h2 id=\"2-1-说明\"><a href=\"#2-1-说明\" class=\"headerlink\" title=\"2.1 说明\"></a>2.1 说明</h2><ol>\n<li>本部分使用的nginx版本为1.15.3</li>\n<li>具体源码参见src/core/ngx_palloc.c文件</li>\n</ol>\n<h2 id=\"2-2-nginx实现\"><a href=\"#2-2-nginx实现\" class=\"headerlink\" title=\"2.2 nginx实现\"></a>2.2 nginx实现</h2><h3 id=\"2-2-1-使用流程\"><a href=\"#2-2-1-使用流程\" class=\"headerlink\" title=\"2.2.1 使用流程\"></a>2.2.1 使用流程</h3><p>nginx内存池的使用较为简单,可以分为3步，</p>\n<ul>\n<li><p>调用ngx_create_pool函数获取ngx_pool_t指针。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//size代表ngx_pool_t一块的大小</span></span><br><span class=\"line\"><span class=\"keyword\">ngx_pool_t</span>* ngx_create_pool(<span class=\"keyword\">size_t</span> size, <span class=\"keyword\">ngx_log_t</span> *<span class=\"built_in\">log</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>调用ngx_palloc申请内存使用</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从pool中申请size大小的内存</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">ngx_palloc</span><span class=\"params\">(<span class=\"keyword\">ngx_pool_t</span> *pool, <span class=\"keyword\">size_t</span> size)</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>释放内存(可以释放大块内存或者释放整个内存池)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//释放从pool中申请的大块内存</span></span><br><span class=\"line\"><span class=\"keyword\">ngx_int_t</span> ngx_pfree(<span class=\"keyword\">ngx_pool_t</span> *pool, <span class=\"keyword\">void</span> *p)</span><br><span class=\"line\"><span class=\"comment\">//释放整个内存池</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ngx_destroy_pool</span><span class=\"params\">(<span class=\"keyword\">ngx_pool_t</span> *pool)</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-2-2-具体实现\"><a href=\"#2-2-2-具体实现\" class=\"headerlink\" title=\"2.2.2 具体实现\"></a>2.2.2 具体实现</h3><ol>\n<li>如下图所示，nginx将内存分为2种，一种是小内存，一种是大内存，当申请的空间大于pool-&gt;max时，我们认为是大内存空间，否则是小内存空间。<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建内存池的参数size减去头部管理结构ngx_pool_t的大小</span></span><br><span class=\"line\">pool-&gt;max = size - <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">ngx_pool_t</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/%E5%86%85%E5%AD%98%E6%B1%A0.png\" alt=\"image\"></p>\n<ol start=\"2\">\n<li>对于小块内存空间, nginx首先查看当前内存块待分配的空间中，是否能够满足用户需求，如果可以，则直接将这部分内存返回。如果不能满足用户需求，则需要重新申请一个内存块，申请的内存块与当前块空间大小相同，将新申请的内存块通过链表链接到上一个内存块，从新的内存块中分配用户所需的内存。</li>\n</ol>\n<blockquote>\n<p>小块内存并不释放，用户申请后直接使用，即使后期不再使用也不需要释放该内存。由于用户有时并不知道自己使用的内存块是大是小，此时也可以调用ngx_pfree函数释放该空间，该函数会从大空间链表中查找内存，找到则释放内存。对于小内存而言，并未做任何处理。</p>\n</blockquote>\n<ol start=\"3\">\n<li>对于大块内存, nginx会将这些内存放到链表中存储，通过pool-&gt;large进行管理。值得注意的是，用户管理大内存的ngx_pool_large_t结构是从本内存池的小块内存中申请而来，也就意味着无法释放这些内存，nginx则是直接复用ngx_pool_large_t结构体。当用户需要申请大内存空间时，利用c函数库malloc申请空间，然后将其挂载某个ngx_pool_large_t结构体上。nginx在需要一个新的ngx_pool_large_t结构时，会首先pool-&gt;large链表的前3个元素中，查看是否有可用的,如果有则直接使用，否则新建ngx_pool_large_t结构。</li>\n</ol>\n<h1 id=\"三-nginx共享内存管理\"><a href=\"#三-nginx共享内存管理\" class=\"headerlink\" title=\"三. nginx共享内存管理\"></a>三. nginx共享内存管理</h1><h2 id=\"3-1-说明\"><a href=\"#3-1-说明\" class=\"headerlink\" title=\"3.1 说明\"></a>3.1 说明</h2><ol>\n<li>本部分使用的nginx版本是1.15.3</li>\n<li>本部分源码详见src/core/ngx_slab.c, src/core/ngx_shmtx.c</li>\n<li>nginx共享内存内容相对较多，本文仅做简单概述。</li>\n</ol>\n<h2 id=\"3-2-直接使用共享内存\"><a href=\"#3-2-直接使用共享内存\" class=\"headerlink\" title=\"3.2 直接使用共享内存\"></a>3.2 直接使用共享内存</h2><h3 id=\"3-2-1-基础\"><a href=\"#3-2-1-基础\" class=\"headerlink\" title=\"3.2.1 基础\"></a>3.2.1 基础</h3><ol>\n<li>nginx中需要创建互斥锁，用于后面多进程同步使用。除此之外，nginx可能需要一些统计信息，例如设置(stat_stub),对于这些变量，我们并不需要特意管理，只需要开辟共享空间后，直接使用即可。</li>\n<li>设置stat_stub后所需的统计信息，亦是放到共享内存中，我们此处仅以nginx中的互斥锁进行说明。</li>\n</ol>\n<h3 id=\"3-2-2-nginx互斥锁的实现\"><a href=\"#3-2-2-nginx互斥锁的实现\" class=\"headerlink\" title=\"3.2.2 nginx互斥锁的实现\"></a>3.2.2 nginx互斥锁的实现</h3><ol>\n<li>nginx互斥锁，有两种方案，当系统支持原子操作时，采用原子操作，不支持时采用文件锁。本节源码见ngx_event_module_init函数。</li>\n<li>下图为文件锁实现互斥锁的示意图。<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/ngxin%E6%96%87%E4%BB%B6%E9%94%81%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%BA%92%E6%96%A5%E9%94%81.png\" alt=\"image\"></li>\n<li><p>下图为原子操作实现互斥锁的示意图。<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0%E4%BA%92%E6%96%A5%E9%94%81.png\" alt=\"image\"></p>\n</li>\n<li><p>问题</p>\n</li>\n</ol>\n<blockquote>\n<ol>\n<li>reload时，新启动的master向老的master发送信号后直接退出，旧的master,重新加载配置(ngx_init_cycle函数), 新创建工作进程, 新的工作进程与旧的工作进程使用的锁是相同的。</li>\n<li>平滑升级时, 旧的master会创建新的master, 新的master会继承旧的master监听的端口(通过环境变量传递监听套接字对应的fd)，新的进程并没有重新绑定监听端口。可能存在新老worker同时监听某个端口的情况，此时操作系统会保证只会有一个进程处理该事件(虽然epoll_wait都会被唤醒)。</li>\n</ol>\n</blockquote>\n<h2 id=\"3-3-通过slab管理共享内存\"><a href=\"#3-3-通过slab管理共享内存\" class=\"headerlink\" title=\"3.3 通过slab管理共享内存\"></a>3.3 通过slab管理共享内存</h2><ol>\n<li>nginx允许各个模块开辟共享空间以供使用,例如ngx_http_limit_conn_module模块。</li>\n<li>nginx共享内存管理的基本思想有:</li>\n</ol>\n<blockquote>\n<ol>\n<li>将内存按照页进行分配，每页的大小相同, 此处设为page_size。</li>\n<li>将内存块按照2的整数次幂进行划分, 最小为8bit, 最大为page_size/2。例如，假设每页大小为4Kb, 则将内存分为8, 16, 32, 64, 128, 256, 512, 1024, 2048共9种，每种对应一个slot, 此时slots数组的大小n即为9。申请小块内存(申请内存大小size &lt;= page_size/2)时，直接给用户这9种中的一种，例如，需要30bit时，找大小为32的内存块提供给用户。</li>\n<li>每个页只会划分一种类型的内存块。例如，某次申请内存时，现有内存无法满足要求，此时会使用一个新的页，则这个新页此后只会分配这种大小的内存。</li>\n<li>通过双向链表将所有空闲的页连接。图中ngx_slab_pool_t中的free变量即使用来链接空闲页的。</li>\n<li>通过slots数组将所有小块内存所使用的页链接起来。</li>\n<li>对于大于等于页面大小的空间请求，计算所需页数，找到连续的空闲页，将空闲页的首页地址返回给客户使用，通过每页的管理结构ngx_slab_page_t进行标识。</li>\n<li>所有页面只会有3中状态，空闲、未满、已满。空闲，未满都是通过双向链表进行整合，已满页面则不存在与任何页面，当空间被释放时，会将其加入到某个链表。</li>\n</ol>\n</blockquote>\n<ol start=\"3\">\n<li>nginx共享内存的基本结构图如下:</li>\n</ol>\n<p><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E5%9B%BE.png\" alt=\"image\"></p>\n<ul>\n<li>在上图中，除了最右侧的ngx_slab_pool_t接口开始的一段内存位于共享内存区外，其他内存都不是共享内存。</li>\n<li>共享内存最终是从page中分配而来。</li>\n</ul>\n"},{"title":"nginx listen指令处理流程","date":"2018-11-12T08:26:59.000Z","_content":"# 一. 基础\n> - nginx源码采用1.15.5\n> - 后续部分仅讨论http中的listen配置解析以及优化流程\n\n## 1.1 概述\n1. 假设nginx http模块的配置如下\n```cpp\nhttp{\n    server {\n        listen 127.0.0.1:8000;\n        server_name www.baidu.com;\n        root html;\n        location /{\n            index index.html;\n        }\n    }\n    server {\n        listen 10.0.1.1:8000;\n        server_name www.news.baidu.com;\n        root html;\n        location /{\n            index index.html;\n        }\n    }\n    server {\n        listen 8000; #相当于0.0.0.0:8000\n        server_name www.tieba.baidu.com;\n        root html;\n        location /{\n            index index.html;\n        }\n    }\n    server {\n        listen 127.0.0.1:8000;\n        server_name www.zhidao.baidu.com;\n        location / {\n            root html;\n            index index.html;\n        }\n    }\n}\n```\n2. 端口, 地址, server的关系\n> - 端口是指一个端口号, 例如上面的8000端口\n> - 地址是ip+port, 例如127.0.0.1:8000, 10.0.1.1:8000, 0.0.0.0:8000, listen后配置的是一个地址。\n> - 每个地址可以放到多个server中, 例如上面的127.0.0.1:8000\n\n总而言之, 一个端口可以有多个地址, 每个地址可以有多个server\n\n## 1.2 存在的问题\n1. 是否需要在读取完http块中所有的server才能建立监听套接字, 绑定监听地址?\n> - 是的, 因为允许配置通配地址, 故而必须将http块中的server全部读取完后, 才能知道如何建立监听套接字。\n\n2. 一个端口可以对应多个地址, 如何建立监听套接字, 如何绑定地址?\n> - 通常情况下, 每个地址只能绑定一次(只考虑tcp协议), 这种情况下, 我们只能选择部分地址创建监听套接字, 绑定监听地址。\n> - 当配置中存在通配地址(0.0.0.0:port)时, 只需要创建一个监听套接字, 绑定这个通配地址即可, 但需要能够依据该监听套接字找到该端口配置的其他地址, 这样当客户端发送请求时, 可以根据客户端请求的地址, 找到对应地址下的相关配置。\n> - 当配置中不存在通配地址时, 需要对每个地址都创建一个监听套接字, 绑定监听地址。\n\n3. 一个地址多个server的情况下, 如何快速找到客户端请求的server?\n> - 比较合适的方案是通过hash表。\n> - 为了快速找到客户端请求的server, nginx以server_name为key, 每个server块的配置(可以理解为一个指针, 该指针指向整个server块的配置)为value, 放入到哈希表。\n> - 由于server_name中可以出现正则匹配等情况, nginx将server_name具体分为4类进行分别处理(www.baidu.com, \\*baidu.com, www.baidu\\*, ~*baidu)。\n\n## 1.3 nginx listen解析的流程\n总体而言分为2步，\n1. 将所有http模块内的配置解析完成, 将listen的相关配置暂存(主要存储监听端口以及监听地址)。\n2. 根据上一步暂存的监听端口以及监听地址, 创建监听套接字, 绑定监听地址\n\n\n# 二. 配置解析\nnginx http块解析完成后, 会存储配置文件中配置的监听端口以及监听地址, 其核心结构图如下,\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A85-%E7%9B%91%E5%90%AC%E7%AB%AF%E5%8F%A3.png)\n\n总体而言, 结构可以分为3级, 端口->地址->server\n\n## 2.1 源码\nlisten的处理流程:\n> - ngx_http_core_listen: 读取配置文件配置\n> - ngx_http_add_listen: 查看之前是否出现过当前监听的端口, 没有则新建, 否则追加\n> - ngx_http_add_address: 查看之前该端口下是否监听过该地址, 没有则新建, 否则追加。\n> - ngx_http_add_server: 查看server之前是否出现过, 没有则新建, 否则报错(重复定义)。\n\n# 三. 创建监听套接字\nnginx最终创建的监听套接字及其相关的结构图如下,\n![image](https://picturestore.nos-eastchina1.126.net/nginx/ngx%E7%9B%91%E5%90%AC%E7%BB%93%E6%9E%84%E5%9B%BE.png)\n> - 每个ngx_listening_t结构对应一个监听套接字, 绑定一个监听地址\n> - 每个ngx_listening_t结构后面需要存储地址信息, 地址可能不止一个,  因为这个监听套接字可能绑定的是通配地址, 这个端口下的其他地址都会放在这个监听套接字下。例如, 1.1节的配置中, 只会创建一个ngx_listening_t结构, 其他地址的配置都会放到这个通配地址下。\n> - 每个监听地址可能对应多个域名(配置文件中的server_name), 需要将这些域名放到哈希表中, 以供后续使用\n\n总体而言, 结构分为3级, 监听套接字->监听地址->server\n\n## 3.1 源码\n读取完http块后, 需要创建监听套接字绑定监听地址, 处理函数ngx_http_optimize_servers, 该函数的处理流程:\n> - 遍历所有监听端口, 针对每个监听端口, 执行以下3步\n> - 对该端口下所有监听地址排序(listen后配置bind的放在前面, 通配地址放在后面)\n> - 遍历该端口下的所有地址, 将每个地址配置的所有server, 放到该地址的哈希表中。\n> - 为该端口建立监听套接字, 绑定监听地址。\n\n\n# 四. 监听套接字的使用\n1. 假设此处我们使用epoll作为事件处理模块\n2. epoll在增加事件时, 用户可以使用epoll_event中的data字段, 当事件发生时, 该字段也会带回。\n3. nginx中的epoll_event指向的是ngx_connection_t结构, 事件发生时, 调用ngx_connection_t结构中的读写事件, 负责具体处理事件, 参见下图。\n```cpp\n//c is ngx_connection_t\nrev = c->read;\nrev->hadler(rev);\nwev = c->write;\nwev->handler(wev);\n```\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%20epoll%E6%A1%86%E6%9E%B6%E5%9B%BE.png)\n\n4. 每个监听套接字对应一个ngx_connection_t, 该结构的读事件回调函数为ngx_event_accept, 当用户发起tcp握手时, 通过ngx_event_accept接受客户端的连接请求。\n> - ngx_event_accept会接受客户端请求, 初始化一个新的ngx_connection_t结构, 并将其加入到epoll中进行监听, 最后会调用ngx_connection_t对应的ngx_listening_t的处理函数(http块对应ngx_http_init_connection, mail块ngx_mail_init_connection, stream块对应ngx_stream_init_connection)\n\n# 五. 总结\n1. nginx在读取listen相关的配置时, 将结构分为3级, 端口->地址->server, 各级都是一对多的关系。\n2. nginx在创建监听套接字时, 将结构分为3级, 监听套接字->地址->server, 各级都是一对多的关系。\n\n","source":"_posts/nginx-listen-socket.md","raw":"---\ntitle: nginx listen指令处理流程\ndate: 2018-11-12 16:26:59\ncategories:\n- nginx\n- 配置解析\ntags:\n- epoll\n- nginx\n- 网络编程\n---\n# 一. 基础\n> - nginx源码采用1.15.5\n> - 后续部分仅讨论http中的listen配置解析以及优化流程\n\n## 1.1 概述\n1. 假设nginx http模块的配置如下\n```cpp\nhttp{\n    server {\n        listen 127.0.0.1:8000;\n        server_name www.baidu.com;\n        root html;\n        location /{\n            index index.html;\n        }\n    }\n    server {\n        listen 10.0.1.1:8000;\n        server_name www.news.baidu.com;\n        root html;\n        location /{\n            index index.html;\n        }\n    }\n    server {\n        listen 8000; #相当于0.0.0.0:8000\n        server_name www.tieba.baidu.com;\n        root html;\n        location /{\n            index index.html;\n        }\n    }\n    server {\n        listen 127.0.0.1:8000;\n        server_name www.zhidao.baidu.com;\n        location / {\n            root html;\n            index index.html;\n        }\n    }\n}\n```\n2. 端口, 地址, server的关系\n> - 端口是指一个端口号, 例如上面的8000端口\n> - 地址是ip+port, 例如127.0.0.1:8000, 10.0.1.1:8000, 0.0.0.0:8000, listen后配置的是一个地址。\n> - 每个地址可以放到多个server中, 例如上面的127.0.0.1:8000\n\n总而言之, 一个端口可以有多个地址, 每个地址可以有多个server\n\n## 1.2 存在的问题\n1. 是否需要在读取完http块中所有的server才能建立监听套接字, 绑定监听地址?\n> - 是的, 因为允许配置通配地址, 故而必须将http块中的server全部读取完后, 才能知道如何建立监听套接字。\n\n2. 一个端口可以对应多个地址, 如何建立监听套接字, 如何绑定地址?\n> - 通常情况下, 每个地址只能绑定一次(只考虑tcp协议), 这种情况下, 我们只能选择部分地址创建监听套接字, 绑定监听地址。\n> - 当配置中存在通配地址(0.0.0.0:port)时, 只需要创建一个监听套接字, 绑定这个通配地址即可, 但需要能够依据该监听套接字找到该端口配置的其他地址, 这样当客户端发送请求时, 可以根据客户端请求的地址, 找到对应地址下的相关配置。\n> - 当配置中不存在通配地址时, 需要对每个地址都创建一个监听套接字, 绑定监听地址。\n\n3. 一个地址多个server的情况下, 如何快速找到客户端请求的server?\n> - 比较合适的方案是通过hash表。\n> - 为了快速找到客户端请求的server, nginx以server_name为key, 每个server块的配置(可以理解为一个指针, 该指针指向整个server块的配置)为value, 放入到哈希表。\n> - 由于server_name中可以出现正则匹配等情况, nginx将server_name具体分为4类进行分别处理(www.baidu.com, \\*baidu.com, www.baidu\\*, ~*baidu)。\n\n## 1.3 nginx listen解析的流程\n总体而言分为2步，\n1. 将所有http模块内的配置解析完成, 将listen的相关配置暂存(主要存储监听端口以及监听地址)。\n2. 根据上一步暂存的监听端口以及监听地址, 创建监听套接字, 绑定监听地址\n\n\n# 二. 配置解析\nnginx http块解析完成后, 会存储配置文件中配置的监听端口以及监听地址, 其核心结构图如下,\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A85-%E7%9B%91%E5%90%AC%E7%AB%AF%E5%8F%A3.png)\n\n总体而言, 结构可以分为3级, 端口->地址->server\n\n## 2.1 源码\nlisten的处理流程:\n> - ngx_http_core_listen: 读取配置文件配置\n> - ngx_http_add_listen: 查看之前是否出现过当前监听的端口, 没有则新建, 否则追加\n> - ngx_http_add_address: 查看之前该端口下是否监听过该地址, 没有则新建, 否则追加。\n> - ngx_http_add_server: 查看server之前是否出现过, 没有则新建, 否则报错(重复定义)。\n\n# 三. 创建监听套接字\nnginx最终创建的监听套接字及其相关的结构图如下,\n![image](https://picturestore.nos-eastchina1.126.net/nginx/ngx%E7%9B%91%E5%90%AC%E7%BB%93%E6%9E%84%E5%9B%BE.png)\n> - 每个ngx_listening_t结构对应一个监听套接字, 绑定一个监听地址\n> - 每个ngx_listening_t结构后面需要存储地址信息, 地址可能不止一个,  因为这个监听套接字可能绑定的是通配地址, 这个端口下的其他地址都会放在这个监听套接字下。例如, 1.1节的配置中, 只会创建一个ngx_listening_t结构, 其他地址的配置都会放到这个通配地址下。\n> - 每个监听地址可能对应多个域名(配置文件中的server_name), 需要将这些域名放到哈希表中, 以供后续使用\n\n总体而言, 结构分为3级, 监听套接字->监听地址->server\n\n## 3.1 源码\n读取完http块后, 需要创建监听套接字绑定监听地址, 处理函数ngx_http_optimize_servers, 该函数的处理流程:\n> - 遍历所有监听端口, 针对每个监听端口, 执行以下3步\n> - 对该端口下所有监听地址排序(listen后配置bind的放在前面, 通配地址放在后面)\n> - 遍历该端口下的所有地址, 将每个地址配置的所有server, 放到该地址的哈希表中。\n> - 为该端口建立监听套接字, 绑定监听地址。\n\n\n# 四. 监听套接字的使用\n1. 假设此处我们使用epoll作为事件处理模块\n2. epoll在增加事件时, 用户可以使用epoll_event中的data字段, 当事件发生时, 该字段也会带回。\n3. nginx中的epoll_event指向的是ngx_connection_t结构, 事件发生时, 调用ngx_connection_t结构中的读写事件, 负责具体处理事件, 参见下图。\n```cpp\n//c is ngx_connection_t\nrev = c->read;\nrev->hadler(rev);\nwev = c->write;\nwev->handler(wev);\n```\n![image](https://picturestore.nos-eastchina1.126.net/nginx/nginx%20epoll%E6%A1%86%E6%9E%B6%E5%9B%BE.png)\n\n4. 每个监听套接字对应一个ngx_connection_t, 该结构的读事件回调函数为ngx_event_accept, 当用户发起tcp握手时, 通过ngx_event_accept接受客户端的连接请求。\n> - ngx_event_accept会接受客户端请求, 初始化一个新的ngx_connection_t结构, 并将其加入到epoll中进行监听, 最后会调用ngx_connection_t对应的ngx_listening_t的处理函数(http块对应ngx_http_init_connection, mail块ngx_mail_init_connection, stream块对应ngx_stream_init_connection)\n\n# 五. 总结\n1. nginx在读取listen相关的配置时, 将结构分为3级, 端口->地址->server, 各级都是一对多的关系。\n2. nginx在创建监听套接字时, 将结构分为3级, 监听套接字->地址->server, 各级都是一对多的关系。\n\n","slug":"nginx-listen-socket","published":1,"updated":"2019-05-27T01:49:32.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg5wpdzv001h6331xacik368","content":"<h1 id=\"一-基础\"><a href=\"#一-基础\" class=\"headerlink\" title=\"一. 基础\"></a>一. 基础</h1><blockquote>\n<ul>\n<li>nginx源码采用1.15.5</li>\n<li>后续部分仅讨论http中的listen配置解析以及优化流程</li>\n</ul>\n</blockquote>\n<h2 id=\"1-1-概述\"><a href=\"#1-1-概述\" class=\"headerlink\" title=\"1.1 概述\"></a>1.1 概述</h2><ol>\n<li><p>假设nginx http模块的配置如下</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8000</span>;</span><br><span class=\"line\">        server_name www.baidu.com;</span><br><span class=\"line\">        root html;</span><br><span class=\"line\">        location /&#123;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen <span class=\"number\">10.0</span><span class=\"number\">.1</span><span class=\"number\">.1</span>:<span class=\"number\">8000</span>;</span><br><span class=\"line\">        server_name www.news.baidu.com;</span><br><span class=\"line\">        root html;</span><br><span class=\"line\">        location /&#123;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen <span class=\"number\">8000</span>; #相当于<span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>:<span class=\"number\">8000</span></span><br><span class=\"line\">        server_name www.tieba.baidu.com;</span><br><span class=\"line\">        root html;</span><br><span class=\"line\">        location /&#123;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8000</span>;</span><br><span class=\"line\">        server_name www.zhidao.baidu.com;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root html;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>端口, 地址, server的关系</p>\n<blockquote>\n<ul>\n<li>端口是指一个端口号, 例如上面的8000端口</li>\n<li>地址是ip+port, 例如127.0.0.1:8000, 10.0.1.1:8000, 0.0.0.0:8000, listen后配置的是一个地址。</li>\n<li>每个地址可以放到多个server中, 例如上面的127.0.0.1:8000</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<p>总而言之, 一个端口可以有多个地址, 每个地址可以有多个server</p>\n<h2 id=\"1-2-存在的问题\"><a href=\"#1-2-存在的问题\" class=\"headerlink\" title=\"1.2 存在的问题\"></a>1.2 存在的问题</h2><ol>\n<li><p>是否需要在读取完http块中所有的server才能建立监听套接字, 绑定监听地址?</p>\n<blockquote>\n<ul>\n<li>是的, 因为允许配置通配地址, 故而必须将http块中的server全部读取完后, 才能知道如何建立监听套接字。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>一个端口可以对应多个地址, 如何建立监听套接字, 如何绑定地址?</p>\n<blockquote>\n<ul>\n<li>通常情况下, 每个地址只能绑定一次(只考虑tcp协议), 这种情况下, 我们只能选择部分地址创建监听套接字, 绑定监听地址。</li>\n<li>当配置中存在通配地址(0.0.0.0:port)时, 只需要创建一个监听套接字, 绑定这个通配地址即可, 但需要能够依据该监听套接字找到该端口配置的其他地址, 这样当客户端发送请求时, 可以根据客户端请求的地址, 找到对应地址下的相关配置。</li>\n<li>当配置中不存在通配地址时, 需要对每个地址都创建一个监听套接字, 绑定监听地址。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>一个地址多个server的情况下, 如何快速找到客户端请求的server?</p>\n<blockquote>\n<ul>\n<li>比较合适的方案是通过hash表。</li>\n<li>为了快速找到客户端请求的server, nginx以server_name为key, 每个server块的配置(可以理解为一个指针, 该指针指向整个server块的配置)为value, 放入到哈希表。</li>\n<li>由于server_name中可以出现正则匹配等情况, nginx将server_name具体分为4类进行分别处理(<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a>, *baidu.com, <a href=\"http://www.baidu\\*\" target=\"_blank\" rel=\"noopener\">www.baidu\\*</a>, ~*baidu)。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"1-3-nginx-listen解析的流程\"><a href=\"#1-3-nginx-listen解析的流程\" class=\"headerlink\" title=\"1.3 nginx listen解析的流程\"></a>1.3 nginx listen解析的流程</h2><p>总体而言分为2步，</p>\n<ol>\n<li>将所有http模块内的配置解析完成, 将listen的相关配置暂存(主要存储监听端口以及监听地址)。</li>\n<li>根据上一步暂存的监听端口以及监听地址, 创建监听套接字, 绑定监听地址</li>\n</ol>\n<h1 id=\"二-配置解析\"><a href=\"#二-配置解析\" class=\"headerlink\" title=\"二. 配置解析\"></a>二. 配置解析</h1><p>nginx http块解析完成后, 会存储配置文件中配置的监听端口以及监听地址, 其核心结构图如下,<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A85-%E7%9B%91%E5%90%AC%E7%AB%AF%E5%8F%A3.png\" alt=\"image\"></p>\n<p>总体而言, 结构可以分为3级, 端口-&gt;地址-&gt;server</p>\n<h2 id=\"2-1-源码\"><a href=\"#2-1-源码\" class=\"headerlink\" title=\"2.1 源码\"></a>2.1 源码</h2><p>listen的处理流程:</p>\n<blockquote>\n<ul>\n<li>ngx_http_core_listen: 读取配置文件配置</li>\n<li>ngx_http_add_listen: 查看之前是否出现过当前监听的端口, 没有则新建, 否则追加</li>\n<li>ngx_http_add_address: 查看之前该端口下是否监听过该地址, 没有则新建, 否则追加。</li>\n<li>ngx_http_add_server: 查看server之前是否出现过, 没有则新建, 否则报错(重复定义)。</li>\n</ul>\n</blockquote>\n<h1 id=\"三-创建监听套接字\"><a href=\"#三-创建监听套接字\" class=\"headerlink\" title=\"三. 创建监听套接字\"></a>三. 创建监听套接字</h1><p>nginx最终创建的监听套接字及其相关的结构图如下,<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/ngx%E7%9B%91%E5%90%AC%E7%BB%93%E6%9E%84%E5%9B%BE.png\" alt=\"image\"></p>\n<blockquote>\n<ul>\n<li>每个ngx_listening_t结构对应一个监听套接字, 绑定一个监听地址</li>\n<li>每个ngx_listening_t结构后面需要存储地址信息, 地址可能不止一个,  因为这个监听套接字可能绑定的是通配地址, 这个端口下的其他地址都会放在这个监听套接字下。例如, 1.1节的配置中, 只会创建一个ngx_listening_t结构, 其他地址的配置都会放到这个通配地址下。</li>\n<li>每个监听地址可能对应多个域名(配置文件中的server_name), 需要将这些域名放到哈希表中, 以供后续使用</li>\n</ul>\n</blockquote>\n<p>总体而言, 结构分为3级, 监听套接字-&gt;监听地址-&gt;server</p>\n<h2 id=\"3-1-源码\"><a href=\"#3-1-源码\" class=\"headerlink\" title=\"3.1 源码\"></a>3.1 源码</h2><p>读取完http块后, 需要创建监听套接字绑定监听地址, 处理函数ngx_http_optimize_servers, 该函数的处理流程:</p>\n<blockquote>\n<ul>\n<li>遍历所有监听端口, 针对每个监听端口, 执行以下3步</li>\n<li>对该端口下所有监听地址排序(listen后配置bind的放在前面, 通配地址放在后面)</li>\n<li>遍历该端口下的所有地址, 将每个地址配置的所有server, 放到该地址的哈希表中。</li>\n<li>为该端口建立监听套接字, 绑定监听地址。</li>\n</ul>\n</blockquote>\n<h1 id=\"四-监听套接字的使用\"><a href=\"#四-监听套接字的使用\" class=\"headerlink\" title=\"四. 监听套接字的使用\"></a>四. 监听套接字的使用</h1><ol>\n<li>假设此处我们使用epoll作为事件处理模块</li>\n<li>epoll在增加事件时, 用户可以使用epoll_event中的data字段, 当事件发生时, 该字段也会带回。</li>\n<li>nginx中的epoll_event指向的是ngx_connection_t结构, 事件发生时, 调用ngx_connection_t结构中的读写事件, 负责具体处理事件, 参见下图。<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//c is ngx_connection_t</span></span><br><span class=\"line\">rev = c-&gt;read;</span><br><span class=\"line\">rev-&gt;hadler(rev);</span><br><span class=\"line\">wev = c-&gt;write;</span><br><span class=\"line\">wev-&gt;handler(wev);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%20epoll%E6%A1%86%E6%9E%B6%E5%9B%BE.png\" alt=\"image\"></p>\n<ol start=\"4\">\n<li>每个监听套接字对应一个ngx_connection_t, 该结构的读事件回调函数为ngx_event_accept, 当用户发起tcp握手时, 通过ngx_event_accept接受客户端的连接请求。<blockquote>\n<ul>\n<li>ngx_event_accept会接受客户端请求, 初始化一个新的ngx_connection_t结构, 并将其加入到epoll中进行监听, 最后会调用ngx_connection_t对应的ngx_listening_t的处理函数(http块对应ngx_http_init_connection, mail块ngx_mail_init_connection, stream块对应ngx_stream_init_connection)</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"五-总结\"><a href=\"#五-总结\" class=\"headerlink\" title=\"五. 总结\"></a>五. 总结</h1><ol>\n<li>nginx在读取listen相关的配置时, 将结构分为3级, 端口-&gt;地址-&gt;server, 各级都是一对多的关系。</li>\n<li>nginx在创建监听套接字时, 将结构分为3级, 监听套接字-&gt;地址-&gt;server, 各级都是一对多的关系。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-基础\"><a href=\"#一-基础\" class=\"headerlink\" title=\"一. 基础\"></a>一. 基础</h1><blockquote>\n<ul>\n<li>nginx源码采用1.15.5</li>\n<li>后续部分仅讨论http中的listen配置解析以及优化流程</li>\n</ul>\n</blockquote>\n<h2 id=\"1-1-概述\"><a href=\"#1-1-概述\" class=\"headerlink\" title=\"1.1 概述\"></a>1.1 概述</h2><ol>\n<li><p>假设nginx http模块的配置如下</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8000</span>;</span><br><span class=\"line\">        server_name www.baidu.com;</span><br><span class=\"line\">        root html;</span><br><span class=\"line\">        location /&#123;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen <span class=\"number\">10.0</span><span class=\"number\">.1</span><span class=\"number\">.1</span>:<span class=\"number\">8000</span>;</span><br><span class=\"line\">        server_name www.news.baidu.com;</span><br><span class=\"line\">        root html;</span><br><span class=\"line\">        location /&#123;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen <span class=\"number\">8000</span>; #相当于<span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>:<span class=\"number\">8000</span></span><br><span class=\"line\">        server_name www.tieba.baidu.com;</span><br><span class=\"line\">        root html;</span><br><span class=\"line\">        location /&#123;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8000</span>;</span><br><span class=\"line\">        server_name www.zhidao.baidu.com;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root html;</span><br><span class=\"line\">            index index.html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>端口, 地址, server的关系</p>\n<blockquote>\n<ul>\n<li>端口是指一个端口号, 例如上面的8000端口</li>\n<li>地址是ip+port, 例如127.0.0.1:8000, 10.0.1.1:8000, 0.0.0.0:8000, listen后配置的是一个地址。</li>\n<li>每个地址可以放到多个server中, 例如上面的127.0.0.1:8000</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<p>总而言之, 一个端口可以有多个地址, 每个地址可以有多个server</p>\n<h2 id=\"1-2-存在的问题\"><a href=\"#1-2-存在的问题\" class=\"headerlink\" title=\"1.2 存在的问题\"></a>1.2 存在的问题</h2><ol>\n<li><p>是否需要在读取完http块中所有的server才能建立监听套接字, 绑定监听地址?</p>\n<blockquote>\n<ul>\n<li>是的, 因为允许配置通配地址, 故而必须将http块中的server全部读取完后, 才能知道如何建立监听套接字。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>一个端口可以对应多个地址, 如何建立监听套接字, 如何绑定地址?</p>\n<blockquote>\n<ul>\n<li>通常情况下, 每个地址只能绑定一次(只考虑tcp协议), 这种情况下, 我们只能选择部分地址创建监听套接字, 绑定监听地址。</li>\n<li>当配置中存在通配地址(0.0.0.0:port)时, 只需要创建一个监听套接字, 绑定这个通配地址即可, 但需要能够依据该监听套接字找到该端口配置的其他地址, 这样当客户端发送请求时, 可以根据客户端请求的地址, 找到对应地址下的相关配置。</li>\n<li>当配置中不存在通配地址时, 需要对每个地址都创建一个监听套接字, 绑定监听地址。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>一个地址多个server的情况下, 如何快速找到客户端请求的server?</p>\n<blockquote>\n<ul>\n<li>比较合适的方案是通过hash表。</li>\n<li>为了快速找到客户端请求的server, nginx以server_name为key, 每个server块的配置(可以理解为一个指针, 该指针指向整个server块的配置)为value, 放入到哈希表。</li>\n<li>由于server_name中可以出现正则匹配等情况, nginx将server_name具体分为4类进行分别处理(<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a>, *baidu.com, <a href=\"http://www.baidu\\*\" target=\"_blank\" rel=\"noopener\">www.baidu\\*</a>, ~*baidu)。</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"1-3-nginx-listen解析的流程\"><a href=\"#1-3-nginx-listen解析的流程\" class=\"headerlink\" title=\"1.3 nginx listen解析的流程\"></a>1.3 nginx listen解析的流程</h2><p>总体而言分为2步，</p>\n<ol>\n<li>将所有http模块内的配置解析完成, 将listen的相关配置暂存(主要存储监听端口以及监听地址)。</li>\n<li>根据上一步暂存的监听端口以及监听地址, 创建监听套接字, 绑定监听地址</li>\n</ol>\n<h1 id=\"二-配置解析\"><a href=\"#二-配置解析\" class=\"headerlink\" title=\"二. 配置解析\"></a>二. 配置解析</h1><p>nginx http块解析完成后, 会存储配置文件中配置的监听端口以及监听地址, 其核心结构图如下,<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%E9%85%8D%E7%BD%AE%E5%AD%98%E5%82%A85-%E7%9B%91%E5%90%AC%E7%AB%AF%E5%8F%A3.png\" alt=\"image\"></p>\n<p>总体而言, 结构可以分为3级, 端口-&gt;地址-&gt;server</p>\n<h2 id=\"2-1-源码\"><a href=\"#2-1-源码\" class=\"headerlink\" title=\"2.1 源码\"></a>2.1 源码</h2><p>listen的处理流程:</p>\n<blockquote>\n<ul>\n<li>ngx_http_core_listen: 读取配置文件配置</li>\n<li>ngx_http_add_listen: 查看之前是否出现过当前监听的端口, 没有则新建, 否则追加</li>\n<li>ngx_http_add_address: 查看之前该端口下是否监听过该地址, 没有则新建, 否则追加。</li>\n<li>ngx_http_add_server: 查看server之前是否出现过, 没有则新建, 否则报错(重复定义)。</li>\n</ul>\n</blockquote>\n<h1 id=\"三-创建监听套接字\"><a href=\"#三-创建监听套接字\" class=\"headerlink\" title=\"三. 创建监听套接字\"></a>三. 创建监听套接字</h1><p>nginx最终创建的监听套接字及其相关的结构图如下,<br><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/ngx%E7%9B%91%E5%90%AC%E7%BB%93%E6%9E%84%E5%9B%BE.png\" alt=\"image\"></p>\n<blockquote>\n<ul>\n<li>每个ngx_listening_t结构对应一个监听套接字, 绑定一个监听地址</li>\n<li>每个ngx_listening_t结构后面需要存储地址信息, 地址可能不止一个,  因为这个监听套接字可能绑定的是通配地址, 这个端口下的其他地址都会放在这个监听套接字下。例如, 1.1节的配置中, 只会创建一个ngx_listening_t结构, 其他地址的配置都会放到这个通配地址下。</li>\n<li>每个监听地址可能对应多个域名(配置文件中的server_name), 需要将这些域名放到哈希表中, 以供后续使用</li>\n</ul>\n</blockquote>\n<p>总体而言, 结构分为3级, 监听套接字-&gt;监听地址-&gt;server</p>\n<h2 id=\"3-1-源码\"><a href=\"#3-1-源码\" class=\"headerlink\" title=\"3.1 源码\"></a>3.1 源码</h2><p>读取完http块后, 需要创建监听套接字绑定监听地址, 处理函数ngx_http_optimize_servers, 该函数的处理流程:</p>\n<blockquote>\n<ul>\n<li>遍历所有监听端口, 针对每个监听端口, 执行以下3步</li>\n<li>对该端口下所有监听地址排序(listen后配置bind的放在前面, 通配地址放在后面)</li>\n<li>遍历该端口下的所有地址, 将每个地址配置的所有server, 放到该地址的哈希表中。</li>\n<li>为该端口建立监听套接字, 绑定监听地址。</li>\n</ul>\n</blockquote>\n<h1 id=\"四-监听套接字的使用\"><a href=\"#四-监听套接字的使用\" class=\"headerlink\" title=\"四. 监听套接字的使用\"></a>四. 监听套接字的使用</h1><ol>\n<li>假设此处我们使用epoll作为事件处理模块</li>\n<li>epoll在增加事件时, 用户可以使用epoll_event中的data字段, 当事件发生时, 该字段也会带回。</li>\n<li>nginx中的epoll_event指向的是ngx_connection_t结构, 事件发生时, 调用ngx_connection_t结构中的读写事件, 负责具体处理事件, 参见下图。<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//c is ngx_connection_t</span></span><br><span class=\"line\">rev = c-&gt;read;</span><br><span class=\"line\">rev-&gt;hadler(rev);</span><br><span class=\"line\">wev = c-&gt;write;</span><br><span class=\"line\">wev-&gt;handler(wev);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"https://picturestore.nos-eastchina1.126.net/nginx/nginx%20epoll%E6%A1%86%E6%9E%B6%E5%9B%BE.png\" alt=\"image\"></p>\n<ol start=\"4\">\n<li>每个监听套接字对应一个ngx_connection_t, 该结构的读事件回调函数为ngx_event_accept, 当用户发起tcp握手时, 通过ngx_event_accept接受客户端的连接请求。<blockquote>\n<ul>\n<li>ngx_event_accept会接受客户端请求, 初始化一个新的ngx_connection_t结构, 并将其加入到epoll中进行监听, 最后会调用ngx_connection_t对应的ngx_listening_t的处理函数(http块对应ngx_http_init_connection, mail块ngx_mail_init_connection, stream块对应ngx_stream_init_connection)</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"五-总结\"><a href=\"#五-总结\" class=\"headerlink\" title=\"五. 总结\"></a>五. 总结</h1><ol>\n<li>nginx在读取listen相关的配置时, 将结构分为3级, 端口-&gt;地址-&gt;server, 各级都是一对多的关系。</li>\n<li>nginx在创建监听套接字时, 将结构分为3级, 监听套接字-&gt;地址-&gt;server, 各级都是一对多的关系。</li>\n</ol>\n"},{"title":"swoole_server_introduce","date":"2019-05-27T02:19:08.000Z","_content":"# 一. 基础知识\n## 1.1 Swoole\nSwoole是面向生产环境的php异步网络通信引擎, php开发人员可以利用Swoole开发出高性能的server服务。Swoole的server部分, 内容很多, 也涉及很多的知识点, 本文仅对其server进行简单的概述, 具体的实现细节在后续的文章中再进行详细介绍。\n\n## 1.2 网络编程\n1. 网络通信是指在一台(或者多台)机器上启动一个(或者多个)进程, 监听一个(或者多个)端口, 按照某种协议(可以是标准协议http, dns; 也可以是自行定义的协议)与客户端交换信息。\n2. 目前的网络编程多是在tcp, udp或者更上层的协议之上进行编程。Swoole的server部分是基于tcp以及udp协议的。\n3. 利用udp进行编程较为简单, 本文主要介绍tcp协议之上的网络编程\n4. TCP网络编程主要涉及4种事件,\n- 连接建立: 主要是指客户端发起连接(`connect`)以及服务端接受连接(`accept`)\n- 消息到达: 服务端接受到客户端发送的数据, 该事件是TCP网络编程最重要的事件, 服务端对于该类事件进行处理时, 可以采用阻塞式或者非阻塞式, 除此之外, 服务端还需要考虑分包, 应用层缓冲区等问题\n- 消息发送成功: 发送成功是指应用层将数据成功发送到内核的套接字发送缓冲区中, 并不是指客户端成功接受数据。对于低流量的服务而言, 数据通常一次性即可发送完, 并不需要关心此类事件。如果一次性不能将全部数据发送到内核缓冲区, 则需要关心消息是否成功发送(阻塞式编程在系统调用(`write`, `writev`, `send`等)返回后即是发送成功, 非阻塞式编程则需要考虑实际写入的数据是否与预期一致)\n- 连接断开: 需要考虑客户端断开连接(`read`返回0)以及服务端断开连接(`close`, `shutdown`)\n\n5. tcp建立连接的过程如下图,\n![](https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/tcp/%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5.png)\n- 图中, ACK、SYN表示标志位, seq、ack为tcp包的序号以及确认序号\n\n6. tcp断开连接的过程如下图,\n![](https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/tcp/%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5.png)\n- 上图考虑的是客户端主动断开连接的情况, 服务端主动断开连接也类似\n- 图中, FIN、ACK表示标志位, seq、ack为tcp包的序号以及确认序号\n\n## 1.3 进程间通信\n1. 进程之间的通信有无名管道(pipe), 有名管道(fifo), 信号(signal), 信号量(semaphore), 套接字(socket), 共享内存(shared memory)等方式\n2. Swoole中采用unix域套接字(套接字的一种)用于多进程之间的通信(指Swoole内部进程之间)\n\n## 1.4 socketpair\n1. socketpair用于创建一个套接字对, 类似于pipe, 不同的是pipe是单向通信, 双向通信需要创建两次, socketpair调用一次即可实现双向通信, 除此之外, 由于使用的是套接字, 还可以定义数据交换的方式\n2. socketpair系统调用\n```cpp\nint socketpair(int domain, int type, int protocol, int sv[2]);\n//domain表示协议簇\n//type表示类型\n//protocol表示协议, SOCK_STREAM表示流协议(类似tcp), SOCK_DGRAM表示数据报协议(类似udp)\n//sv用于存储建立的套接字对, 也就是两个套接字文件描述符\n//成功返回0, 否则返回-1, 可以从errno获取错误信息\n\n```\n- 调用成功后sv[0], sv[1]分别存储一个文件描述符\n- 向sv[0]中写入, 可以从sv[1]中读取\n- 向sv[1]中写入, 可以从sv[0]中读取\n- 进程调用socketpair后, fork子进程, 子进程会默认继承sv[0], sv[1]这两个文件描述符, 进而可以实现父子进程间通信。例如, 父进程向sv[0]中写入, 子进程从sv[1]中读取; 子进程向sv[1]中写入, 父进程从sv[0]中读取。\n\n## 1.5 守护进程(daemon)\n1. 守护进程是一种特殊的后台进程, 它脱离于终端, 用于周期性的执行某种任务\n2. 进程组\n- 每个进程都属于一个进程组\n- 每个进程组都有一个进程组号, 也就是该组组长的进程号(PID)\n- 一个进程只能为自己或者其子进程设置进程组号\n3. 会话\n- 一个会话可以包含多个进程组, 这些进程组中最多只能有一个前台进程组(也可以没有), 其余为后台进程组\n- 一个会话最多只能有一个控制终端\n- 用户通过终端登录或者网络登录, 会创建一个新的会话\n- 进程调用系统调用`setsid`可以创建一个新的会话, 调用`setsid`的进程不能是某个进程组的组长。`setsid`调用完成后, 该进程成为这个会话的首进程(领头进程), 同时变成一个新的进程组的组长, 如果该进程之前有控制终端, 该进程与终端的联系也被断开\n\n4. 创建守护进程的方式\n- fork子进程后, 父进程退出, 子进程执行`setsid`, 子进程即可成为守护进程。这种方式下, 子进程是会话的领头进程, 可以重新打开终端, 此时可以再次fork, fork产生的子进程无法再打开终端(只有会话的领头进程才能打开终端)。第二次fork并不是必须的, 只是为了防止子进程再次打开终端\n- linux提供了daemon函数(该函数并不是系统调用, 为库函数)用于创建守护进程\n\n## 1.6 swoole tcp server示例\n```php\n<?php\n//创建server\n$serv = new Swoole\\Server('0.0.0.0', 9501, SWOOLE_PROCESS, SWOOLE_SOCK_TCP);\n//设置server的参数\n$serv->set(array(\n    'reactor_num' => 2, //reactor thread num\n    'worker_num' => 3,  //worker process num\n));\n\n//设置事件回调\n$serv->on('connect', function ($serv, $fd){\n    echo \"Client:Connect.\\n\";\n});\n$serv->on('receive', function ($serv, $fd, $reactor_id, $data) {\n    $serv->send($fd, 'Swoole: '.$data);\n    $serv->close($fd);\n});\n$serv->on('close', function ($serv, $fd) {\n    echo \"Client: Close.\\n\";\n});\n\n//启动server\n$serv->start();\n```\n- 上述代码在cli模式下执行时, 经过词法分析, 语法分析生成opcode, 进而交由zend虚拟机执行\n- zend虚拟机在执行到$serv->start()时, 启动Swoole server\n- 上述代码中设置的事件回调是在worker进程中执行, 后文会详细介绍Swoole server模型\n\n# 二. swoole server\n## 2.1 base模式\n1. 说明\n- base模式采用多进程模型, 这种模型与nginx一致, 每个进程只有一个线程, 主进程负责管理工作进程, 工作进程负责监听端口, 接受连接, 处理请求以及关闭连接\n- 多个进程同时监听端口, 会有惊群问题, linux 3.9之前版本的内核, Swoole没有解决惊群问题\n- linux 内核3.9及其后续版本提供了新的套接字参数SO_REUSEPORT, 该参数允许多个进程绑定到同一个端口, 内核在接受到新的连接请求时, 会唤醒其中一个进行处理, 内核层面也会做负载均衡, 可以解决上述的惊群问题, Swoole也已经加入了这个参数\n- base模式下, reactor_number参数并没有实际作用\n- 如果worker进程数设置为1, 则不会fork出worker进程, 主进程直接处理请求, 这种模式适合调试\n\n2. 启动过程\n- php代码执行到$serv->start()时, 主进程进入int swServer_start(swServer *serv)函数, 该函数负责启动server\n- 在函数swServer_start中会调用swReactorProcess_start, 这个函数会fork出多个worker进程\n- 主进程和worker进程各自进入自己的事件循环, 处理各类事件\n\n## 2.2 process模式\n1. 说明\n- 这种模式为多进程多线程, 有主进程, manager进程, worker进程, task_worker进程\n- 主进程下有多个线程, 主线程负责接受连接, 之后交给react线程处理请求。 react线程负责接收数据包, 并将数据转发给worker进程进行处理, 之后处理worker进程返回的数据\n- manager进程, 该进程为单线程, 主要负责管理worker进程, 类似于nginx中的主进程, 当worker进程异常退出时, manager进程负责重新fork出一个worker进程\n- worker进程, 该进程为单线程, 负责具体处理请求\n- task_worker进程, 用于处理比较耗时的任务, 默认不开启\n- worker进程与主进程中的react线程使用域套接字进行通信, worker进程之间不进行通信\n\n2. 启动过程\n- Swoole server启动入口: swServer_start函数,\n```cpp\n//php 代码中$serv->start(); 会调用函数, 进行server start\nint swServer_start(swServer *serv);\n\n// 该函数首先进行必要的参数检查\nstatic int swServer_start_check(swServer *serv);\n// 其中有,\nif (serv->worker_num < serv->reactor_num)\n{\n    serv->reactor_num = serv->worker_num;\n}//也就是说reactor_num <= worker_num\n\n//之后执行factory start, 也就是swFactoryProcess_start函数\n//该函数会fork出manager进程, manager进程进而fork出worker进程以及task_worker进程\nif (factory->start(factory) < 0)\n{\n    return SW_ERR;\n}\n\n//然后主进程的主线程生成reactor线程\nif (serv->factory_mode == SW_MODE_BASE)\n{\n    ret = swReactorProcess_start(serv);\n}\nelse\n{\n    ret = swReactorThread_start(serv);\n}\n\n\n```\n- 如果设置了daemon模式, 在必要的参数检查完后, 先将自己变为守护进程再fork manager进程, 进而创建reactor线程\n\n- 主进程先fork出manager进程, manager进程负责fork出worker进程以及task_worker进程。worker进程之后进入int swWorker_loop(swServer *serv, int worker_id), 也就是进入自己的事件循环, task_worker也是一样, 进入自己的事件循环。\n```\nstatic int swFactoryProcess_start(swFactory *factory);\n//swFactoryProcess_start会调用swManager_start生成manager进程\nint swManager_start(swServer *serv);\n// manager进程会fork出worker进程以及task_worker进程\n```\n- 主进程pthread_create出react线程, 主线程和react线程各自进入自己的事件循环, reactor线程执行static int swReactorThread_loop(swThreadParam *param), 等待处理事件\n```\n//主线程执行swReactorThread_start, 创建出reactor线程\nint swReactorThread_start(swServer *serv);\n```\n\n3. 结构图\nSwoole process模式结构如下图所示,\n![swoole_server](https://picturestore.nos-eastchina1.126.net/swoole/swoole%20process%20%E7%BB%93%E6%9E%84%E5%9B%BE.jpg)\n- 上图并没有考虑task_worker进程, 在默认情况下, task_worker进程数为0\n\n# 三. 请求处理流程(process模式)\n## 3.1 reactor线程与worker进程之间的通信\n1. Swoole master进程与worker进程之间的通信如下图所示,\n![image](https://picturestore.nos-eastchina1.126.net/swoole/swoole%20process%20ipc.png)\n- Swoole使用SOCK_DGRAM, 而不是SOCK_STREAM, 这里是因为每个reactor线程负责处理多个请求, reactor接收到请求后会将信息转发给worker进程, 由worker进程负责处理,如果使用SOCK_STREAM, worker进程无法对tcp进行分包, 进而处理请求\n- swFactoryProcess_start函数中会根据worker进程数创建对应个数的套接字对, 用于reactor线程与worker进程通信(详见swPipeUnsock_create函数)\n\n2. 假设reactor线程有2个, worker进程有3个, 则reactor与worker之间的通信如下图所示,\n![image](https://picturestore.nos-eastchina1.126.net/swoole/swoole%20process%20ipc%E5%AE%9E%E4%BE%8B.png)\n- 每个reactor线程负责监听几个worker进程, 每个worker进程只有一个reactor线程监听(reactor_num <= worker_num)。Swoole默认使用worker_process_id % reactor_num对worker进程进行分配, 交给对应的reactor线程进行监听\n- reactor线程收到某个worker进程的数据后会进行处理, 值得注意的是, 这个reactor线程可能并不是发送请求的那个reactor线程。\n\n3. reactor线程与worker进程通信的数据包\n```c\n//包头\ntypedef struct _swDataHead\n{\n    int fd;\n    uint32_t len;\n    int16_t from_id;\n    uint8_t type;\n    uint8_t flags;\n    uint16_t from_fd;\n#ifdef SW_BUFFER_RECV_TIME\n    double time;\n#endif\n} swDataHead;\n\n//reactor线程向worker进程发送的数据, 也就是worker进程收到的数据包\ntypedef struct\n{\n    swDataHead info;\n    char data[SW_IPC_BUFFER_SIZE];\n} swEventData;\n\n//worker进程向reactor线程发送的数据, 也就是reactor线程收到的数据包\ntypedef struct\n{\n    swDataHead info;\n    char data[0];\n} swPipeBuffer;\n```\n\n## 3.2 请求处理\n1. master进程中的主线程负责监听端口(`listen`), 接受连接(`accept`, 产生一个fd), 接受连接后将请求分配给reactor线程, 默认通过fd % reactor_number进行分配, 之后通过`epoll_ctl`将fd加入到对应reactor线程中, 刚加入时监听写事件, 因为新接受连接创建的套接字写缓冲区为空, 故而一定可写, 会被立刻触发, 进而reactor线程进行一些初始化操作\n- 存在多个线程同时操作一个epollfd(通过系统调用`epoll_create`创建)的情况\n- 多个线程同时调用`epoll_ctl`是线程安全的(对应一个epollfd), 一个线程正在执行, 其他线程会被阻塞(因为需要同时操作epoll底层的红黑树)\n- 多个线程同时调用`epoll_wait`也是线程安全的, 但是一个事件可能会被多个线程同时接收到, 实际中不建议多个线程同时`epoll_wait`一个epollfd。Swoole中也是不存在这种情况的, Swoole中每个reactor线程都有自己的epollfd\n- 一个线程调用`epoll_wait`, 一个线程调用`epoll_ctl`, 根据man手册, 如果`epoll_ctl`新加入的fd已经准备好, 会使得执行`epoll_wait`的线程变成非阻塞状态(可以通过man `epoll_wait`查看相关内容)。\n```\n//主线程, 如果fd已经ready, reactor线程会被唤醒\nepoll_ctl(epollfd, fd, ...);\n//reactor线程\nepoll_wait(epollfd,...)\n```\n\n2. reactor线程中fd的写事件被触发, reactor线程负责处理, 发现是首次加入, 没有数据可写, 则会开启读事件监听, 准备接受客户端发送的数据\n\n3. reactor线程读取到用户的请求数据, **一个请求的数据接收完后**, 将数据转发给worker进程, 默认是通过fd % worker_number进行分配\n- reactor发送给worker进程的数据包, 会包含一个头部, 头部中记录了reactor的信息\n- 如果发送的数据过大, 则需要将数据进行分片, 限于篇幅, 数据分片, 后续再进行详细讲述\n- 可能存在多个reactor线程同时向同一个worker进程发送数据的情况, 故而Swoole采用SOCK_DGRAM模式与worker进程进行通信, 通过每个数据包的包头, worker进程可以区分出是由哪个reactor线程发送的数据, 也可以知道是哪个请求\n\n4. worker进程收到reactor发送的数据包后, 进行处理, 处理完成后, 将请求结果发送给主进程\n- worker进程发送给主进程的数据包, 也会包含一个头部, 当reactor线程收到数据包后, 能够知道对应的reactor线程, 请求的fd等信息\n\n5. 主进程收到worker进程发送的数据包, 这个会触发某个reactor线程进行处理\n- **这个reactor线程并不一定是之前发送请求给worker进程的那个reactor线程**\n- 主进程的每个reactor线程都负责监听worker进程发送的数据包, 每个worker发送的数据包只会由一个reactor线程进行监听, 故而只会触发一个reactor线程\n\n6. reactor线程处理worker进程发送的请求处理结果, 如果是直接发送数据给客户端, 则可以直接发送, 如果需要改变这个这个连接的监听状态(例如`close`), 则需要先找到监听这个连接的reactor线程, 进而改变这个连接的监听状态(通过调用`epoll_ctl`)\n- reactor处理线程与reactor监听线程可能并不是同一个线程\n- reactor监听线程负责监听客户端发送的数据, 进而转发给worker进程\n- reactor处理线程负责监听worker进程发送给主进程的数据, 进而将数据发送给客户端\n\n# 四. gdb调试\n## 4.1 process模式启动\n```\n//fork manager进程\n#0  0x00007ffff67dae64 in fork () from /lib64/libc.so.6\n#1  0x00007ffff553888a in swoole_fork () \n    at /root/code/swoole-src/src/core/base.c:186\n#2  0x00007ffff556afb8 in swManager_start (serv=serv@entry=0x1353f60) \n    at /root/code/swoole-src/src/server/manager.cc:164\n#3  0x00007ffff5571dde in swFactoryProcess_start (factory=0x1353ff8) \n    at /root/code/swoole-src/src/server/process.c:198\n#4  0x00007ffff556ef8b in swServer_start (serv=0x1353f60) \n    at /root/code/swoole-src/src/server/master.cc:651\n#5  0x00007ffff55dc808 in zim_swoole_server_start \n    (execute_data=<optimized out>, return_value=0x7fffffffac50)\n    at /root/code/swoole-src/swoole_server.cc:2946\n#6  0x00000000007bb068 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () \n    at /root/php-7.3.3/Zend/zend_vm_execute.h:980\n#7  execute_ex (ex=0x7ffff7f850a8) \n    at /root/php-7.3.3/Zend/zend_vm_execute.h:55485\n#8  0x00000000007bbf58 in zend_execute \n    (op_array=op_array@entry=0x7ffff5e7b340, \n    return_value=return_value@entry=0x7ffff5e1d030) \n    at /root/php-7.3.3/Zend/zend_vm_execute.h:60881\n#9  0x0000000000737554 in zend_execute_scripts \n    (type=type@entry=8, retval=0x7ffff5e1d030, retval@entry=0x0,\n    file_count=file_count@entry=3) at /root/php-7.3.3/Zend/zend.c:1568\n#10 0x00000000006db4d0 in php_execute_script \n    (primary_file=primary_file@entry=0x7fffffffd050) \n    at /root/php-7.3.3/main/main.c:2630\n#11 0x00000000007be2f5 in do_cli (argc=2, argv=0x1165cd0) \n    at /root/php-7.3.3/sapi/cli/php_cli.c:997\n#12 0x000000000043fc1f in main (argc=2, argv=0x1165cd0) \n    at /root/php-7.3.3/sapi/cli/php_cli.c:1389\n\n// pthread_create reactor线程\n#0  0x00007ffff552e960 in pthread_create@plt () \n    from /usr/local/lib/php/extensions/no-debug-non-zts-20180731/swoole.so\n#1  0x00007ffff5576959 in swReactorThread_start (serv=0x1353f60) \n    at /root/code/swoole-src/src/server/reactor_thread.c:883\n#2  0x00007ffff556f006 in swServer_start (serv=0x1353f60) \n    at /root/code/swoole-src/src/server/master.cc:670\n#3  0x00007ffff55dc808 in zim_swoole_server_start \n    (execute_data=<optimized out>, return_value=0x7fffffffac50)\n    at /root/code/swoole-src/swoole_server.cc:2946\n#4  0x00000000007bb068 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () \n    at /root/php-7.3.3/Zend/zend_vm_execute.h:980\n#5  execute_ex (ex=0x7fffffffab10) at /root/php-7.3.3/Zend/zend_vm_execute.h:55485\n#6  0x00000000007bbf58 in zend_execute \n    (op_array=op_array@entry=0x7ffff5e7b340, \n    return_value=return_value@entry=0x7ffff5e1d030)\n    at /root/php-7.3.3/Zend/zend_vm_execute.h:60881\n#7  0x0000000000737554 in zend_execute_scripts \n    (type=type@entry=8, retval=0x7ffff5e1d030, retval@entry=0x0,\n    file_count=file_count@entry=3) at /root/php-7.3.3/Zend/zend.c:1568\n#8  0x00000000006db4d0 in php_execute_script \n    (primary_file=primary_file@entry=0x7fffffffd050) \n    at /root/php-7.3.3/main/main.c:2630\n#9  0x00000000007be2f5 in do_cli (argc=2, argv=0x1165cd0) \n    at /root/php-7.3.3/sapi/cli/php_cli.c:997\n#10 0x000000000043fc1f in main (argc=2, argv=0x1165cd0) \n    at /root/php-7.3.3/sapi/cli/php_cli.c:1389\n\n```\n\n## 4.2 base模式启动\n```\n//base 模式下的启动\n#0  0x00007ffff67dae64 in fork () from /lib64/libc.so.6\n#1  0x00007ffff553888a in swoole_fork () \n    at /root/code/swoole-src/src/core/base.c:186\n#2  0x00007ffff5558557 in swProcessPool_spawn \n    (pool=pool@entry=0x7ffff2d2a308, worker=0x7ffff2d2a778)\n    at /root/code/swoole-src/src/network/process_pool.c:392\n#3  0x00007ffff5558710 in swProcessPool_start (pool=0x7ffff2d2a308) \n    at /root/code/swoole-src/src/network/process_pool.c:227\n#4  0x00007ffff55741cf in swReactorProcess_start (serv=0x1353f60) \n    at /root/code/swoole-src/src/server/reactor_process.cc:176\n#5  0x00007ffff556f21d in swServer_start (serv=0x1353f60) \n    at /root/code/swoole-src/src/server/master.cc:666\n#6  0x00007ffff55dc808 in zim_swoole_server_start \n    (execute_data=<optimized out>, return_value=0x7fffffffac50)\n    at /root/code/swoole-src/swoole_server.cc:2946\n#7  0x00000000007bb068 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () \n    at /root/php-7.3.3/Zend/zend_vm_execute.h:980\n#8  execute_ex (ex=0x7ffff2d2a308) at /root/php-7.3.3/Zend/zend_vm_execute.h:55485\n#9  0x00000000007bbf58 in zend_execute \n    (op_array=op_array@entry=0x7ffff5e7b340, \n    return_value=return_value@entry=0x7ffff5e1d030)\n    at /root/php-7.3.3/Zend/zend_vm_execute.h:60881\n#10 0x0000000000737554 in zend_execute_scripts \n    (type=type@entry=8, retval=0x7ffff5e1d030, retval@entry=0x0,\n    file_count=file_count@entry=3) at /root/php-7.3.3/Zend/zend.c:1568\n#11 0x00000000006db4d0 in php_execute_script \n    (primary_file=primary_file@entry=0x7fffffffd050) \n    at /root/php-7.3.3/main/main.c:2630\n#12 0x00000000007be2f5 in do_cli (argc=2, argv=0x1165cd0) \n    at /root/php-7.3.3/sapi/cli/php_cli.c:997\n#13 0x000000000043fc1f in main (argc=2, argv=0x1165cd0) \n    at /root/php-7.3.3/sapi/cli/php_cli.c:1389\n\n\n```\n\n# 五. 总结及思考\n1. 本文主要介绍了Swoole server的两种模式: base模式、process模式, 详细讲解了两种模式的网络编程模型, 并重点介绍了process模式下, 进程间通信的方式、请求的处理流程等。\n2. process模式下, 为什么不直接在主进程中创建多个线程, 由线程直接进行处理请求(可以避免进程间通信的开销), 而是创建出manager进程, 再由manager进程创建出worker进程, 由worker进程处理请求?\n- 个人觉得可能是php对多线程的支持不是很友好, phper大都也只是进行单线程编程\n- ZendVM 提供的 TSRM 虽然也是支持多线程环境，但实际上这是一个 按线程隔离内存的方案, 多线程并没有意义\n3. process模式下, 主进程中的每个reactor线程都可以同时处理多个请求, 多个请求是并发处理的, 我们从2个维度看,\n- 从主进程的角度看, 主进程同时处理多个请求, 当一个请求包全部接收完后, 转发给worker进程进行处理\n- 从某个worker进程的角度看, 这个worker进程收到的请求是串行的, 默认情况下, worker进程也是串行处理请求, 如果单个请求阻塞(Swoole的worker进程会回调phper写的事件处理函数, 该函数可能阻塞), 后续的请求也无法处理, 这个就是排头阻塞问题, 这种情况下可以使用Swoole的协程, 通过协程的调度, 单个请求阻塞时, worker进程可以继续处理其他请求。\n4. 使用Swoole创建tcp server时, 由于tcp是字节流的协议, 需要分包, 而Swoole在不清楚客户端与服务端通信协议的情况下, 无法进行分包, process模式下, reactor交给worker进程的数据也只能是字节流的, 需要用户自行处理。当然, 一般情况也不需要自行构建协议, 使用tcp server, Swoole已经支持Http, Https等协议。\n\n# 六. 参考\n- UNIX网络编程\n- UNIX环境高级编程\n- php7 底层实现与源码分析\n- https://wiki.swoole.com/\n- https://www.cnblogs.com/welhzh/p/3772164.html\n- https://www.cnblogs.com/JohnABC/p/4079669.html\n","source":"_posts/swoole-server-introduce.md","raw":"---\ntitle: swoole_server_introduce\ndate: 2019-05-27 10:19:08\ncategories:\n- swoole\n- server\ntags:\n- server\n- swoole\n---\n# 一. 基础知识\n## 1.1 Swoole\nSwoole是面向生产环境的php异步网络通信引擎, php开发人员可以利用Swoole开发出高性能的server服务。Swoole的server部分, 内容很多, 也涉及很多的知识点, 本文仅对其server进行简单的概述, 具体的实现细节在后续的文章中再进行详细介绍。\n\n## 1.2 网络编程\n1. 网络通信是指在一台(或者多台)机器上启动一个(或者多个)进程, 监听一个(或者多个)端口, 按照某种协议(可以是标准协议http, dns; 也可以是自行定义的协议)与客户端交换信息。\n2. 目前的网络编程多是在tcp, udp或者更上层的协议之上进行编程。Swoole的server部分是基于tcp以及udp协议的。\n3. 利用udp进行编程较为简单, 本文主要介绍tcp协议之上的网络编程\n4. TCP网络编程主要涉及4种事件,\n- 连接建立: 主要是指客户端发起连接(`connect`)以及服务端接受连接(`accept`)\n- 消息到达: 服务端接受到客户端发送的数据, 该事件是TCP网络编程最重要的事件, 服务端对于该类事件进行处理时, 可以采用阻塞式或者非阻塞式, 除此之外, 服务端还需要考虑分包, 应用层缓冲区等问题\n- 消息发送成功: 发送成功是指应用层将数据成功发送到内核的套接字发送缓冲区中, 并不是指客户端成功接受数据。对于低流量的服务而言, 数据通常一次性即可发送完, 并不需要关心此类事件。如果一次性不能将全部数据发送到内核缓冲区, 则需要关心消息是否成功发送(阻塞式编程在系统调用(`write`, `writev`, `send`等)返回后即是发送成功, 非阻塞式编程则需要考虑实际写入的数据是否与预期一致)\n- 连接断开: 需要考虑客户端断开连接(`read`返回0)以及服务端断开连接(`close`, `shutdown`)\n\n5. tcp建立连接的过程如下图,\n![](https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/tcp/%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5.png)\n- 图中, ACK、SYN表示标志位, seq、ack为tcp包的序号以及确认序号\n\n6. tcp断开连接的过程如下图,\n![](https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/tcp/%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5.png)\n- 上图考虑的是客户端主动断开连接的情况, 服务端主动断开连接也类似\n- 图中, FIN、ACK表示标志位, seq、ack为tcp包的序号以及确认序号\n\n## 1.3 进程间通信\n1. 进程之间的通信有无名管道(pipe), 有名管道(fifo), 信号(signal), 信号量(semaphore), 套接字(socket), 共享内存(shared memory)等方式\n2. Swoole中采用unix域套接字(套接字的一种)用于多进程之间的通信(指Swoole内部进程之间)\n\n## 1.4 socketpair\n1. socketpair用于创建一个套接字对, 类似于pipe, 不同的是pipe是单向通信, 双向通信需要创建两次, socketpair调用一次即可实现双向通信, 除此之外, 由于使用的是套接字, 还可以定义数据交换的方式\n2. socketpair系统调用\n```cpp\nint socketpair(int domain, int type, int protocol, int sv[2]);\n//domain表示协议簇\n//type表示类型\n//protocol表示协议, SOCK_STREAM表示流协议(类似tcp), SOCK_DGRAM表示数据报协议(类似udp)\n//sv用于存储建立的套接字对, 也就是两个套接字文件描述符\n//成功返回0, 否则返回-1, 可以从errno获取错误信息\n\n```\n- 调用成功后sv[0], sv[1]分别存储一个文件描述符\n- 向sv[0]中写入, 可以从sv[1]中读取\n- 向sv[1]中写入, 可以从sv[0]中读取\n- 进程调用socketpair后, fork子进程, 子进程会默认继承sv[0], sv[1]这两个文件描述符, 进而可以实现父子进程间通信。例如, 父进程向sv[0]中写入, 子进程从sv[1]中读取; 子进程向sv[1]中写入, 父进程从sv[0]中读取。\n\n## 1.5 守护进程(daemon)\n1. 守护进程是一种特殊的后台进程, 它脱离于终端, 用于周期性的执行某种任务\n2. 进程组\n- 每个进程都属于一个进程组\n- 每个进程组都有一个进程组号, 也就是该组组长的进程号(PID)\n- 一个进程只能为自己或者其子进程设置进程组号\n3. 会话\n- 一个会话可以包含多个进程组, 这些进程组中最多只能有一个前台进程组(也可以没有), 其余为后台进程组\n- 一个会话最多只能有一个控制终端\n- 用户通过终端登录或者网络登录, 会创建一个新的会话\n- 进程调用系统调用`setsid`可以创建一个新的会话, 调用`setsid`的进程不能是某个进程组的组长。`setsid`调用完成后, 该进程成为这个会话的首进程(领头进程), 同时变成一个新的进程组的组长, 如果该进程之前有控制终端, 该进程与终端的联系也被断开\n\n4. 创建守护进程的方式\n- fork子进程后, 父进程退出, 子进程执行`setsid`, 子进程即可成为守护进程。这种方式下, 子进程是会话的领头进程, 可以重新打开终端, 此时可以再次fork, fork产生的子进程无法再打开终端(只有会话的领头进程才能打开终端)。第二次fork并不是必须的, 只是为了防止子进程再次打开终端\n- linux提供了daemon函数(该函数并不是系统调用, 为库函数)用于创建守护进程\n\n## 1.6 swoole tcp server示例\n```php\n<?php\n//创建server\n$serv = new Swoole\\Server('0.0.0.0', 9501, SWOOLE_PROCESS, SWOOLE_SOCK_TCP);\n//设置server的参数\n$serv->set(array(\n    'reactor_num' => 2, //reactor thread num\n    'worker_num' => 3,  //worker process num\n));\n\n//设置事件回调\n$serv->on('connect', function ($serv, $fd){\n    echo \"Client:Connect.\\n\";\n});\n$serv->on('receive', function ($serv, $fd, $reactor_id, $data) {\n    $serv->send($fd, 'Swoole: '.$data);\n    $serv->close($fd);\n});\n$serv->on('close', function ($serv, $fd) {\n    echo \"Client: Close.\\n\";\n});\n\n//启动server\n$serv->start();\n```\n- 上述代码在cli模式下执行时, 经过词法分析, 语法分析生成opcode, 进而交由zend虚拟机执行\n- zend虚拟机在执行到$serv->start()时, 启动Swoole server\n- 上述代码中设置的事件回调是在worker进程中执行, 后文会详细介绍Swoole server模型\n\n# 二. swoole server\n## 2.1 base模式\n1. 说明\n- base模式采用多进程模型, 这种模型与nginx一致, 每个进程只有一个线程, 主进程负责管理工作进程, 工作进程负责监听端口, 接受连接, 处理请求以及关闭连接\n- 多个进程同时监听端口, 会有惊群问题, linux 3.9之前版本的内核, Swoole没有解决惊群问题\n- linux 内核3.9及其后续版本提供了新的套接字参数SO_REUSEPORT, 该参数允许多个进程绑定到同一个端口, 内核在接受到新的连接请求时, 会唤醒其中一个进行处理, 内核层面也会做负载均衡, 可以解决上述的惊群问题, Swoole也已经加入了这个参数\n- base模式下, reactor_number参数并没有实际作用\n- 如果worker进程数设置为1, 则不会fork出worker进程, 主进程直接处理请求, 这种模式适合调试\n\n2. 启动过程\n- php代码执行到$serv->start()时, 主进程进入int swServer_start(swServer *serv)函数, 该函数负责启动server\n- 在函数swServer_start中会调用swReactorProcess_start, 这个函数会fork出多个worker进程\n- 主进程和worker进程各自进入自己的事件循环, 处理各类事件\n\n## 2.2 process模式\n1. 说明\n- 这种模式为多进程多线程, 有主进程, manager进程, worker进程, task_worker进程\n- 主进程下有多个线程, 主线程负责接受连接, 之后交给react线程处理请求。 react线程负责接收数据包, 并将数据转发给worker进程进行处理, 之后处理worker进程返回的数据\n- manager进程, 该进程为单线程, 主要负责管理worker进程, 类似于nginx中的主进程, 当worker进程异常退出时, manager进程负责重新fork出一个worker进程\n- worker进程, 该进程为单线程, 负责具体处理请求\n- task_worker进程, 用于处理比较耗时的任务, 默认不开启\n- worker进程与主进程中的react线程使用域套接字进行通信, worker进程之间不进行通信\n\n2. 启动过程\n- Swoole server启动入口: swServer_start函数,\n```cpp\n//php 代码中$serv->start(); 会调用函数, 进行server start\nint swServer_start(swServer *serv);\n\n// 该函数首先进行必要的参数检查\nstatic int swServer_start_check(swServer *serv);\n// 其中有,\nif (serv->worker_num < serv->reactor_num)\n{\n    serv->reactor_num = serv->worker_num;\n}//也就是说reactor_num <= worker_num\n\n//之后执行factory start, 也就是swFactoryProcess_start函数\n//该函数会fork出manager进程, manager进程进而fork出worker进程以及task_worker进程\nif (factory->start(factory) < 0)\n{\n    return SW_ERR;\n}\n\n//然后主进程的主线程生成reactor线程\nif (serv->factory_mode == SW_MODE_BASE)\n{\n    ret = swReactorProcess_start(serv);\n}\nelse\n{\n    ret = swReactorThread_start(serv);\n}\n\n\n```\n- 如果设置了daemon模式, 在必要的参数检查完后, 先将自己变为守护进程再fork manager进程, 进而创建reactor线程\n\n- 主进程先fork出manager进程, manager进程负责fork出worker进程以及task_worker进程。worker进程之后进入int swWorker_loop(swServer *serv, int worker_id), 也就是进入自己的事件循环, task_worker也是一样, 进入自己的事件循环。\n```\nstatic int swFactoryProcess_start(swFactory *factory);\n//swFactoryProcess_start会调用swManager_start生成manager进程\nint swManager_start(swServer *serv);\n// manager进程会fork出worker进程以及task_worker进程\n```\n- 主进程pthread_create出react线程, 主线程和react线程各自进入自己的事件循环, reactor线程执行static int swReactorThread_loop(swThreadParam *param), 等待处理事件\n```\n//主线程执行swReactorThread_start, 创建出reactor线程\nint swReactorThread_start(swServer *serv);\n```\n\n3. 结构图\nSwoole process模式结构如下图所示,\n![swoole_server](https://picturestore.nos-eastchina1.126.net/swoole/swoole%20process%20%E7%BB%93%E6%9E%84%E5%9B%BE.jpg)\n- 上图并没有考虑task_worker进程, 在默认情况下, task_worker进程数为0\n\n# 三. 请求处理流程(process模式)\n## 3.1 reactor线程与worker进程之间的通信\n1. Swoole master进程与worker进程之间的通信如下图所示,\n![image](https://picturestore.nos-eastchina1.126.net/swoole/swoole%20process%20ipc.png)\n- Swoole使用SOCK_DGRAM, 而不是SOCK_STREAM, 这里是因为每个reactor线程负责处理多个请求, reactor接收到请求后会将信息转发给worker进程, 由worker进程负责处理,如果使用SOCK_STREAM, worker进程无法对tcp进行分包, 进而处理请求\n- swFactoryProcess_start函数中会根据worker进程数创建对应个数的套接字对, 用于reactor线程与worker进程通信(详见swPipeUnsock_create函数)\n\n2. 假设reactor线程有2个, worker进程有3个, 则reactor与worker之间的通信如下图所示,\n![image](https://picturestore.nos-eastchina1.126.net/swoole/swoole%20process%20ipc%E5%AE%9E%E4%BE%8B.png)\n- 每个reactor线程负责监听几个worker进程, 每个worker进程只有一个reactor线程监听(reactor_num <= worker_num)。Swoole默认使用worker_process_id % reactor_num对worker进程进行分配, 交给对应的reactor线程进行监听\n- reactor线程收到某个worker进程的数据后会进行处理, 值得注意的是, 这个reactor线程可能并不是发送请求的那个reactor线程。\n\n3. reactor线程与worker进程通信的数据包\n```c\n//包头\ntypedef struct _swDataHead\n{\n    int fd;\n    uint32_t len;\n    int16_t from_id;\n    uint8_t type;\n    uint8_t flags;\n    uint16_t from_fd;\n#ifdef SW_BUFFER_RECV_TIME\n    double time;\n#endif\n} swDataHead;\n\n//reactor线程向worker进程发送的数据, 也就是worker进程收到的数据包\ntypedef struct\n{\n    swDataHead info;\n    char data[SW_IPC_BUFFER_SIZE];\n} swEventData;\n\n//worker进程向reactor线程发送的数据, 也就是reactor线程收到的数据包\ntypedef struct\n{\n    swDataHead info;\n    char data[0];\n} swPipeBuffer;\n```\n\n## 3.2 请求处理\n1. master进程中的主线程负责监听端口(`listen`), 接受连接(`accept`, 产生一个fd), 接受连接后将请求分配给reactor线程, 默认通过fd % reactor_number进行分配, 之后通过`epoll_ctl`将fd加入到对应reactor线程中, 刚加入时监听写事件, 因为新接受连接创建的套接字写缓冲区为空, 故而一定可写, 会被立刻触发, 进而reactor线程进行一些初始化操作\n- 存在多个线程同时操作一个epollfd(通过系统调用`epoll_create`创建)的情况\n- 多个线程同时调用`epoll_ctl`是线程安全的(对应一个epollfd), 一个线程正在执行, 其他线程会被阻塞(因为需要同时操作epoll底层的红黑树)\n- 多个线程同时调用`epoll_wait`也是线程安全的, 但是一个事件可能会被多个线程同时接收到, 实际中不建议多个线程同时`epoll_wait`一个epollfd。Swoole中也是不存在这种情况的, Swoole中每个reactor线程都有自己的epollfd\n- 一个线程调用`epoll_wait`, 一个线程调用`epoll_ctl`, 根据man手册, 如果`epoll_ctl`新加入的fd已经准备好, 会使得执行`epoll_wait`的线程变成非阻塞状态(可以通过man `epoll_wait`查看相关内容)。\n```\n//主线程, 如果fd已经ready, reactor线程会被唤醒\nepoll_ctl(epollfd, fd, ...);\n//reactor线程\nepoll_wait(epollfd,...)\n```\n\n2. reactor线程中fd的写事件被触发, reactor线程负责处理, 发现是首次加入, 没有数据可写, 则会开启读事件监听, 准备接受客户端发送的数据\n\n3. reactor线程读取到用户的请求数据, **一个请求的数据接收完后**, 将数据转发给worker进程, 默认是通过fd % worker_number进行分配\n- reactor发送给worker进程的数据包, 会包含一个头部, 头部中记录了reactor的信息\n- 如果发送的数据过大, 则需要将数据进行分片, 限于篇幅, 数据分片, 后续再进行详细讲述\n- 可能存在多个reactor线程同时向同一个worker进程发送数据的情况, 故而Swoole采用SOCK_DGRAM模式与worker进程进行通信, 通过每个数据包的包头, worker进程可以区分出是由哪个reactor线程发送的数据, 也可以知道是哪个请求\n\n4. worker进程收到reactor发送的数据包后, 进行处理, 处理完成后, 将请求结果发送给主进程\n- worker进程发送给主进程的数据包, 也会包含一个头部, 当reactor线程收到数据包后, 能够知道对应的reactor线程, 请求的fd等信息\n\n5. 主进程收到worker进程发送的数据包, 这个会触发某个reactor线程进行处理\n- **这个reactor线程并不一定是之前发送请求给worker进程的那个reactor线程**\n- 主进程的每个reactor线程都负责监听worker进程发送的数据包, 每个worker发送的数据包只会由一个reactor线程进行监听, 故而只会触发一个reactor线程\n\n6. reactor线程处理worker进程发送的请求处理结果, 如果是直接发送数据给客户端, 则可以直接发送, 如果需要改变这个这个连接的监听状态(例如`close`), 则需要先找到监听这个连接的reactor线程, 进而改变这个连接的监听状态(通过调用`epoll_ctl`)\n- reactor处理线程与reactor监听线程可能并不是同一个线程\n- reactor监听线程负责监听客户端发送的数据, 进而转发给worker进程\n- reactor处理线程负责监听worker进程发送给主进程的数据, 进而将数据发送给客户端\n\n# 四. gdb调试\n## 4.1 process模式启动\n```\n//fork manager进程\n#0  0x00007ffff67dae64 in fork () from /lib64/libc.so.6\n#1  0x00007ffff553888a in swoole_fork () \n    at /root/code/swoole-src/src/core/base.c:186\n#2  0x00007ffff556afb8 in swManager_start (serv=serv@entry=0x1353f60) \n    at /root/code/swoole-src/src/server/manager.cc:164\n#3  0x00007ffff5571dde in swFactoryProcess_start (factory=0x1353ff8) \n    at /root/code/swoole-src/src/server/process.c:198\n#4  0x00007ffff556ef8b in swServer_start (serv=0x1353f60) \n    at /root/code/swoole-src/src/server/master.cc:651\n#5  0x00007ffff55dc808 in zim_swoole_server_start \n    (execute_data=<optimized out>, return_value=0x7fffffffac50)\n    at /root/code/swoole-src/swoole_server.cc:2946\n#6  0x00000000007bb068 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () \n    at /root/php-7.3.3/Zend/zend_vm_execute.h:980\n#7  execute_ex (ex=0x7ffff7f850a8) \n    at /root/php-7.3.3/Zend/zend_vm_execute.h:55485\n#8  0x00000000007bbf58 in zend_execute \n    (op_array=op_array@entry=0x7ffff5e7b340, \n    return_value=return_value@entry=0x7ffff5e1d030) \n    at /root/php-7.3.3/Zend/zend_vm_execute.h:60881\n#9  0x0000000000737554 in zend_execute_scripts \n    (type=type@entry=8, retval=0x7ffff5e1d030, retval@entry=0x0,\n    file_count=file_count@entry=3) at /root/php-7.3.3/Zend/zend.c:1568\n#10 0x00000000006db4d0 in php_execute_script \n    (primary_file=primary_file@entry=0x7fffffffd050) \n    at /root/php-7.3.3/main/main.c:2630\n#11 0x00000000007be2f5 in do_cli (argc=2, argv=0x1165cd0) \n    at /root/php-7.3.3/sapi/cli/php_cli.c:997\n#12 0x000000000043fc1f in main (argc=2, argv=0x1165cd0) \n    at /root/php-7.3.3/sapi/cli/php_cli.c:1389\n\n// pthread_create reactor线程\n#0  0x00007ffff552e960 in pthread_create@plt () \n    from /usr/local/lib/php/extensions/no-debug-non-zts-20180731/swoole.so\n#1  0x00007ffff5576959 in swReactorThread_start (serv=0x1353f60) \n    at /root/code/swoole-src/src/server/reactor_thread.c:883\n#2  0x00007ffff556f006 in swServer_start (serv=0x1353f60) \n    at /root/code/swoole-src/src/server/master.cc:670\n#3  0x00007ffff55dc808 in zim_swoole_server_start \n    (execute_data=<optimized out>, return_value=0x7fffffffac50)\n    at /root/code/swoole-src/swoole_server.cc:2946\n#4  0x00000000007bb068 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () \n    at /root/php-7.3.3/Zend/zend_vm_execute.h:980\n#5  execute_ex (ex=0x7fffffffab10) at /root/php-7.3.3/Zend/zend_vm_execute.h:55485\n#6  0x00000000007bbf58 in zend_execute \n    (op_array=op_array@entry=0x7ffff5e7b340, \n    return_value=return_value@entry=0x7ffff5e1d030)\n    at /root/php-7.3.3/Zend/zend_vm_execute.h:60881\n#7  0x0000000000737554 in zend_execute_scripts \n    (type=type@entry=8, retval=0x7ffff5e1d030, retval@entry=0x0,\n    file_count=file_count@entry=3) at /root/php-7.3.3/Zend/zend.c:1568\n#8  0x00000000006db4d0 in php_execute_script \n    (primary_file=primary_file@entry=0x7fffffffd050) \n    at /root/php-7.3.3/main/main.c:2630\n#9  0x00000000007be2f5 in do_cli (argc=2, argv=0x1165cd0) \n    at /root/php-7.3.3/sapi/cli/php_cli.c:997\n#10 0x000000000043fc1f in main (argc=2, argv=0x1165cd0) \n    at /root/php-7.3.3/sapi/cli/php_cli.c:1389\n\n```\n\n## 4.2 base模式启动\n```\n//base 模式下的启动\n#0  0x00007ffff67dae64 in fork () from /lib64/libc.so.6\n#1  0x00007ffff553888a in swoole_fork () \n    at /root/code/swoole-src/src/core/base.c:186\n#2  0x00007ffff5558557 in swProcessPool_spawn \n    (pool=pool@entry=0x7ffff2d2a308, worker=0x7ffff2d2a778)\n    at /root/code/swoole-src/src/network/process_pool.c:392\n#3  0x00007ffff5558710 in swProcessPool_start (pool=0x7ffff2d2a308) \n    at /root/code/swoole-src/src/network/process_pool.c:227\n#4  0x00007ffff55741cf in swReactorProcess_start (serv=0x1353f60) \n    at /root/code/swoole-src/src/server/reactor_process.cc:176\n#5  0x00007ffff556f21d in swServer_start (serv=0x1353f60) \n    at /root/code/swoole-src/src/server/master.cc:666\n#6  0x00007ffff55dc808 in zim_swoole_server_start \n    (execute_data=<optimized out>, return_value=0x7fffffffac50)\n    at /root/code/swoole-src/swoole_server.cc:2946\n#7  0x00000000007bb068 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () \n    at /root/php-7.3.3/Zend/zend_vm_execute.h:980\n#8  execute_ex (ex=0x7ffff2d2a308) at /root/php-7.3.3/Zend/zend_vm_execute.h:55485\n#9  0x00000000007bbf58 in zend_execute \n    (op_array=op_array@entry=0x7ffff5e7b340, \n    return_value=return_value@entry=0x7ffff5e1d030)\n    at /root/php-7.3.3/Zend/zend_vm_execute.h:60881\n#10 0x0000000000737554 in zend_execute_scripts \n    (type=type@entry=8, retval=0x7ffff5e1d030, retval@entry=0x0,\n    file_count=file_count@entry=3) at /root/php-7.3.3/Zend/zend.c:1568\n#11 0x00000000006db4d0 in php_execute_script \n    (primary_file=primary_file@entry=0x7fffffffd050) \n    at /root/php-7.3.3/main/main.c:2630\n#12 0x00000000007be2f5 in do_cli (argc=2, argv=0x1165cd0) \n    at /root/php-7.3.3/sapi/cli/php_cli.c:997\n#13 0x000000000043fc1f in main (argc=2, argv=0x1165cd0) \n    at /root/php-7.3.3/sapi/cli/php_cli.c:1389\n\n\n```\n\n# 五. 总结及思考\n1. 本文主要介绍了Swoole server的两种模式: base模式、process模式, 详细讲解了两种模式的网络编程模型, 并重点介绍了process模式下, 进程间通信的方式、请求的处理流程等。\n2. process模式下, 为什么不直接在主进程中创建多个线程, 由线程直接进行处理请求(可以避免进程间通信的开销), 而是创建出manager进程, 再由manager进程创建出worker进程, 由worker进程处理请求?\n- 个人觉得可能是php对多线程的支持不是很友好, phper大都也只是进行单线程编程\n- ZendVM 提供的 TSRM 虽然也是支持多线程环境，但实际上这是一个 按线程隔离内存的方案, 多线程并没有意义\n3. process模式下, 主进程中的每个reactor线程都可以同时处理多个请求, 多个请求是并发处理的, 我们从2个维度看,\n- 从主进程的角度看, 主进程同时处理多个请求, 当一个请求包全部接收完后, 转发给worker进程进行处理\n- 从某个worker进程的角度看, 这个worker进程收到的请求是串行的, 默认情况下, worker进程也是串行处理请求, 如果单个请求阻塞(Swoole的worker进程会回调phper写的事件处理函数, 该函数可能阻塞), 后续的请求也无法处理, 这个就是排头阻塞问题, 这种情况下可以使用Swoole的协程, 通过协程的调度, 单个请求阻塞时, worker进程可以继续处理其他请求。\n4. 使用Swoole创建tcp server时, 由于tcp是字节流的协议, 需要分包, 而Swoole在不清楚客户端与服务端通信协议的情况下, 无法进行分包, process模式下, reactor交给worker进程的数据也只能是字节流的, 需要用户自行处理。当然, 一般情况也不需要自行构建协议, 使用tcp server, Swoole已经支持Http, Https等协议。\n\n# 六. 参考\n- UNIX网络编程\n- UNIX环境高级编程\n- php7 底层实现与源码分析\n- https://wiki.swoole.com/\n- https://www.cnblogs.com/welhzh/p/3772164.html\n- https://www.cnblogs.com/JohnABC/p/4079669.html\n","slug":"swoole-server-introduce","published":1,"updated":"2019-06-20T09:02:17.781Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckg5wpdzx001k6331sqb0vdtf","content":"<h1 id=\"一-基础知识\"><a href=\"#一-基础知识\" class=\"headerlink\" title=\"一. 基础知识\"></a>一. 基础知识</h1><h2 id=\"1-1-Swoole\"><a href=\"#1-1-Swoole\" class=\"headerlink\" title=\"1.1 Swoole\"></a>1.1 Swoole</h2><p>Swoole是面向生产环境的php异步网络通信引擎, php开发人员可以利用Swoole开发出高性能的server服务。Swoole的server部分, 内容很多, 也涉及很多的知识点, 本文仅对其server进行简单的概述, 具体的实现细节在后续的文章中再进行详细介绍。</p>\n<h2 id=\"1-2-网络编程\"><a href=\"#1-2-网络编程\" class=\"headerlink\" title=\"1.2 网络编程\"></a>1.2 网络编程</h2><ol>\n<li>网络通信是指在一台(或者多台)机器上启动一个(或者多个)进程, 监听一个(或者多个)端口, 按照某种协议(可以是标准协议http, dns; 也可以是自行定义的协议)与客户端交换信息。</li>\n<li>目前的网络编程多是在tcp, udp或者更上层的协议之上进行编程。Swoole的server部分是基于tcp以及udp协议的。</li>\n<li>利用udp进行编程较为简单, 本文主要介绍tcp协议之上的网络编程</li>\n<li>TCP网络编程主要涉及4种事件,</li>\n</ol>\n<ul>\n<li>连接建立: 主要是指客户端发起连接(<code>connect</code>)以及服务端接受连接(<code>accept</code>)</li>\n<li>消息到达: 服务端接受到客户端发送的数据, 该事件是TCP网络编程最重要的事件, 服务端对于该类事件进行处理时, 可以采用阻塞式或者非阻塞式, 除此之外, 服务端还需要考虑分包, 应用层缓冲区等问题</li>\n<li>消息发送成功: 发送成功是指应用层将数据成功发送到内核的套接字发送缓冲区中, 并不是指客户端成功接受数据。对于低流量的服务而言, 数据通常一次性即可发送完, 并不需要关心此类事件。如果一次性不能将全部数据发送到内核缓冲区, 则需要关心消息是否成功发送(阻塞式编程在系统调用(<code>write</code>, <code>writev</code>, <code>send</code>等)返回后即是发送成功, 非阻塞式编程则需要考虑实际写入的数据是否与预期一致)</li>\n<li>连接断开: 需要考虑客户端断开连接(<code>read</code>返回0)以及服务端断开连接(<code>close</code>, <code>shutdown</code>)</li>\n</ul>\n<ol start=\"5\">\n<li>tcp建立连接的过程如下图,<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/tcp/%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5.png\" alt></li>\n</ol>\n<ul>\n<li>图中, ACK、SYN表示标志位, seq、ack为tcp包的序号以及确认序号</li>\n</ul>\n<ol start=\"6\">\n<li>tcp断开连接的过程如下图,<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/tcp/%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5.png\" alt></li>\n</ol>\n<ul>\n<li>上图考虑的是客户端主动断开连接的情况, 服务端主动断开连接也类似</li>\n<li>图中, FIN、ACK表示标志位, seq、ack为tcp包的序号以及确认序号</li>\n</ul>\n<h2 id=\"1-3-进程间通信\"><a href=\"#1-3-进程间通信\" class=\"headerlink\" title=\"1.3 进程间通信\"></a>1.3 进程间通信</h2><ol>\n<li>进程之间的通信有无名管道(pipe), 有名管道(fifo), 信号(signal), 信号量(semaphore), 套接字(socket), 共享内存(shared memory)等方式</li>\n<li>Swoole中采用unix域套接字(套接字的一种)用于多进程之间的通信(指Swoole内部进程之间)</li>\n</ol>\n<h2 id=\"1-4-socketpair\"><a href=\"#1-4-socketpair\" class=\"headerlink\" title=\"1.4 socketpair\"></a>1.4 socketpair</h2><ol>\n<li>socketpair用于创建一个套接字对, 类似于pipe, 不同的是pipe是单向通信, 双向通信需要创建两次, socketpair调用一次即可实现双向通信, 除此之外, 由于使用的是套接字, 还可以定义数据交换的方式</li>\n<li>socketpair系统调用<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">socketpair</span><span class=\"params\">(<span class=\"keyword\">int</span> domain, <span class=\"keyword\">int</span> type, <span class=\"keyword\">int</span> protocol, <span class=\"keyword\">int</span> sv[<span class=\"number\">2</span>])</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//domain表示协议簇</span></span><br><span class=\"line\"><span class=\"comment\">//type表示类型</span></span><br><span class=\"line\"><span class=\"comment\">//protocol表示协议, SOCK_STREAM表示流协议(类似tcp), SOCK_DGRAM表示数据报协议(类似udp)</span></span><br><span class=\"line\"><span class=\"comment\">//sv用于存储建立的套接字对, 也就是两个套接字文件描述符</span></span><br><span class=\"line\"><span class=\"comment\">//成功返回0, 否则返回-1, 可以从errno获取错误信息</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>调用成功后sv[0], sv[1]分别存储一个文件描述符</li>\n<li>向sv[0]中写入, 可以从sv[1]中读取</li>\n<li>向sv[1]中写入, 可以从sv[0]中读取</li>\n<li>进程调用socketpair后, fork子进程, 子进程会默认继承sv[0], sv[1]这两个文件描述符, 进而可以实现父子进程间通信。例如, 父进程向sv[0]中写入, 子进程从sv[1]中读取; 子进程向sv[1]中写入, 父进程从sv[0]中读取。</li>\n</ul>\n<h2 id=\"1-5-守护进程-daemon\"><a href=\"#1-5-守护进程-daemon\" class=\"headerlink\" title=\"1.5 守护进程(daemon)\"></a>1.5 守护进程(daemon)</h2><ol>\n<li>守护进程是一种特殊的后台进程, 它脱离于终端, 用于周期性的执行某种任务</li>\n<li>进程组</li>\n</ol>\n<ul>\n<li>每个进程都属于一个进程组</li>\n<li>每个进程组都有一个进程组号, 也就是该组组长的进程号(PID)</li>\n<li>一个进程只能为自己或者其子进程设置进程组号</li>\n</ul>\n<ol start=\"3\">\n<li>会话</li>\n</ol>\n<ul>\n<li>一个会话可以包含多个进程组, 这些进程组中最多只能有一个前台进程组(也可以没有), 其余为后台进程组</li>\n<li>一个会话最多只能有一个控制终端</li>\n<li>用户通过终端登录或者网络登录, 会创建一个新的会话</li>\n<li>进程调用系统调用<code>setsid</code>可以创建一个新的会话, 调用<code>setsid</code>的进程不能是某个进程组的组长。<code>setsid</code>调用完成后, 该进程成为这个会话的首进程(领头进程), 同时变成一个新的进程组的组长, 如果该进程之前有控制终端, 该进程与终端的联系也被断开</li>\n</ul>\n<ol start=\"4\">\n<li>创建守护进程的方式</li>\n</ol>\n<ul>\n<li>fork子进程后, 父进程退出, 子进程执行<code>setsid</code>, 子进程即可成为守护进程。这种方式下, 子进程是会话的领头进程, 可以重新打开终端, 此时可以再次fork, fork产生的子进程无法再打开终端(只有会话的领头进程才能打开终端)。第二次fork并不是必须的, 只是为了防止子进程再次打开终端</li>\n<li>linux提供了daemon函数(该函数并不是系统调用, 为库函数)用于创建守护进程</li>\n</ul>\n<h2 id=\"1-6-swoole-tcp-server示例\"><a href=\"#1-6-swoole-tcp-server示例\" class=\"headerlink\" title=\"1.6 swoole tcp server示例\"></a>1.6 swoole tcp server示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//创建server</span></span><br><span class=\"line\">$serv = <span class=\"keyword\">new</span> Swoole\\Server(<span class=\"string\">'0.0.0.0'</span>, <span class=\"number\">9501</span>, SWOOLE_PROCESS, SWOOLE_SOCK_TCP);</span><br><span class=\"line\"><span class=\"comment\">//设置server的参数</span></span><br><span class=\"line\">$serv-&gt;set(<span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"string\">'reactor_num'</span> =&gt; <span class=\"number\">2</span>, <span class=\"comment\">//reactor thread num</span></span><br><span class=\"line\">    <span class=\"string\">'worker_num'</span> =&gt; <span class=\"number\">3</span>,  <span class=\"comment\">//worker process num</span></span><br><span class=\"line\">));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置事件回调</span></span><br><span class=\"line\">$serv-&gt;on(<span class=\"string\">'connect'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($serv, $fd)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"Client:Connect.\\n\"</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$serv-&gt;on(<span class=\"string\">'receive'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($serv, $fd, $reactor_id, $data)</span> </span>&#123;</span><br><span class=\"line\">    $serv-&gt;send($fd, <span class=\"string\">'Swoole: '</span>.$data);</span><br><span class=\"line\">    $serv-&gt;close($fd);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$serv-&gt;on(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($serv, $fd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"Client: Close.\\n\"</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//启动server</span></span><br><span class=\"line\">$serv-&gt;start();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>上述代码在cli模式下执行时, 经过词法分析, 语法分析生成opcode, 进而交由zend虚拟机执行</li>\n<li>zend虚拟机在执行到$serv-&gt;start()时, 启动Swoole server</li>\n<li>上述代码中设置的事件回调是在worker进程中执行, 后文会详细介绍Swoole server模型</li>\n</ul>\n<h1 id=\"二-swoole-server\"><a href=\"#二-swoole-server\" class=\"headerlink\" title=\"二. swoole server\"></a>二. swoole server</h1><h2 id=\"2-1-base模式\"><a href=\"#2-1-base模式\" class=\"headerlink\" title=\"2.1 base模式\"></a>2.1 base模式</h2><ol>\n<li>说明</li>\n</ol>\n<ul>\n<li>base模式采用多进程模型, 这种模型与nginx一致, 每个进程只有一个线程, 主进程负责管理工作进程, 工作进程负责监听端口, 接受连接, 处理请求以及关闭连接</li>\n<li>多个进程同时监听端口, 会有惊群问题, linux 3.9之前版本的内核, Swoole没有解决惊群问题</li>\n<li>linux 内核3.9及其后续版本提供了新的套接字参数SO_REUSEPORT, 该参数允许多个进程绑定到同一个端口, 内核在接受到新的连接请求时, 会唤醒其中一个进行处理, 内核层面也会做负载均衡, 可以解决上述的惊群问题, Swoole也已经加入了这个参数</li>\n<li>base模式下, reactor_number参数并没有实际作用</li>\n<li>如果worker进程数设置为1, 则不会fork出worker进程, 主进程直接处理请求, 这种模式适合调试</li>\n</ul>\n<ol start=\"2\">\n<li>启动过程</li>\n</ol>\n<ul>\n<li>php代码执行到$serv-&gt;start()时, 主进程进入int swServer_start(swServer *serv)函数, 该函数负责启动server</li>\n<li>在函数swServer_start中会调用swReactorProcess_start, 这个函数会fork出多个worker进程</li>\n<li>主进程和worker进程各自进入自己的事件循环, 处理各类事件</li>\n</ul>\n<h2 id=\"2-2-process模式\"><a href=\"#2-2-process模式\" class=\"headerlink\" title=\"2.2 process模式\"></a>2.2 process模式</h2><ol>\n<li>说明</li>\n</ol>\n<ul>\n<li>这种模式为多进程多线程, 有主进程, manager进程, worker进程, task_worker进程</li>\n<li>主进程下有多个线程, 主线程负责接受连接, 之后交给react线程处理请求。 react线程负责接收数据包, 并将数据转发给worker进程进行处理, 之后处理worker进程返回的数据</li>\n<li>manager进程, 该进程为单线程, 主要负责管理worker进程, 类似于nginx中的主进程, 当worker进程异常退出时, manager进程负责重新fork出一个worker进程</li>\n<li>worker进程, 该进程为单线程, 负责具体处理请求</li>\n<li>task_worker进程, 用于处理比较耗时的任务, 默认不开启</li>\n<li>worker进程与主进程中的react线程使用域套接字进行通信, worker进程之间不进行通信</li>\n</ul>\n<ol start=\"2\">\n<li>启动过程</li>\n</ol>\n<ul>\n<li><p>Swoole server启动入口: swServer_start函数,</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//php 代码中$serv-&gt;start(); 会调用函数, 进行server start</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">swServer_start</span><span class=\"params\">(swServer *serv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 该函数首先进行必要的参数检查</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">swServer_start_check</span><span class=\"params\">(swServer *serv)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 其中有,</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (serv-&gt;worker_num &lt; serv-&gt;reactor_num)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    serv-&gt;reactor_num = serv-&gt;worker_num;</span><br><span class=\"line\">&#125;<span class=\"comment\">//也就是说reactor_num &lt;= worker_num</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//之后执行factory start, 也就是swFactoryProcess_start函数</span></span><br><span class=\"line\"><span class=\"comment\">//该函数会fork出manager进程, manager进程进而fork出worker进程以及task_worker进程</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (factory-&gt;start(factory) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> SW_ERR;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//然后主进程的主线程生成reactor线程</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (serv-&gt;factory_mode == SW_MODE_BASE)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ret = swReactorProcess_start(serv);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ret = swReactorThread_start(serv);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果设置了daemon模式, 在必要的参数检查完后, 先将自己变为守护进程再fork manager进程, 进而创建reactor线程</p>\n</li>\n<li><p>主进程先fork出manager进程, manager进程负责fork出worker进程以及task_worker进程。worker进程之后进入int swWorker_loop(swServer *serv, int worker_id), 也就是进入自己的事件循环, task_worker也是一样, 进入自己的事件循环。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static int swFactoryProcess_start(swFactory *factory);</span><br><span class=\"line\">//swFactoryProcess_start会调用swManager_start生成manager进程</span><br><span class=\"line\">int swManager_start(swServer *serv);</span><br><span class=\"line\">// manager进程会fork出worker进程以及task_worker进程</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>主进程pthread_create出react线程, 主线程和react线程各自进入自己的事件循环, reactor线程执行static int swReactorThread_loop(swThreadParam *param), 等待处理事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//主线程执行swReactorThread_start, 创建出reactor线程</span><br><span class=\"line\">int swReactorThread_start(swServer *serv);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"3\">\n<li>结构图<br>Swoole process模式结构如下图所示,<br><img src=\"https://picturestore.nos-eastchina1.126.net/swoole/swoole%20process%20%E7%BB%93%E6%9E%84%E5%9B%BE.jpg\" alt=\"swoole_server\"></li>\n</ol>\n<ul>\n<li>上图并没有考虑task_worker进程, 在默认情况下, task_worker进程数为0</li>\n</ul>\n<h1 id=\"三-请求处理流程-process模式\"><a href=\"#三-请求处理流程-process模式\" class=\"headerlink\" title=\"三. 请求处理流程(process模式)\"></a>三. 请求处理流程(process模式)</h1><h2 id=\"3-1-reactor线程与worker进程之间的通信\"><a href=\"#3-1-reactor线程与worker进程之间的通信\" class=\"headerlink\" title=\"3.1 reactor线程与worker进程之间的通信\"></a>3.1 reactor线程与worker进程之间的通信</h2><ol>\n<li>Swoole master进程与worker进程之间的通信如下图所示,<br><img src=\"https://picturestore.nos-eastchina1.126.net/swoole/swoole%20process%20ipc.png\" alt=\"image\"></li>\n</ol>\n<ul>\n<li>Swoole使用SOCK_DGRAM, 而不是SOCK_STREAM, 这里是因为每个reactor线程负责处理多个请求, reactor接收到请求后会将信息转发给worker进程, 由worker进程负责处理,如果使用SOCK_STREAM, worker进程无法对tcp进行分包, 进而处理请求</li>\n<li>swFactoryProcess_start函数中会根据worker进程数创建对应个数的套接字对, 用于reactor线程与worker进程通信(详见swPipeUnsock_create函数)</li>\n</ul>\n<ol start=\"2\">\n<li>假设reactor线程有2个, worker进程有3个, 则reactor与worker之间的通信如下图所示,<br><img src=\"https://picturestore.nos-eastchina1.126.net/swoole/swoole%20process%20ipc%E5%AE%9E%E4%BE%8B.png\" alt=\"image\"></li>\n</ol>\n<ul>\n<li>每个reactor线程负责监听几个worker进程, 每个worker进程只有一个reactor线程监听(reactor_num &lt;= worker_num)。Swoole默认使用worker_process_id % reactor_num对worker进程进行分配, 交给对应的reactor线程进行监听</li>\n<li>reactor线程收到某个worker进程的数据后会进行处理, 值得注意的是, 这个reactor线程可能并不是发送请求的那个reactor线程。</li>\n</ul>\n<ol start=\"3\">\n<li>reactor线程与worker进程通信的数据包<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//包头</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">swDataHead</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> fd;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> len;</span><br><span class=\"line\">    <span class=\"keyword\">int16_t</span> from_id;</span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> type;</span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> flags;</span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span> from_fd;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> SW_BUFFER_RECV_TIME</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> time;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125; swDataHead;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//reactor线程向worker进程发送的数据, 也就是worker进程收到的数据包</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    swDataHead info;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> data[SW_IPC_BUFFER_SIZE];</span><br><span class=\"line\">&#125; swEventData;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//worker进程向reactor线程发送的数据, 也就是reactor线程收到的数据包</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    swDataHead info;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> data[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125; swPipeBuffer;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"3-2-请求处理\"><a href=\"#3-2-请求处理\" class=\"headerlink\" title=\"3.2 请求处理\"></a>3.2 请求处理</h2><ol>\n<li>master进程中的主线程负责监听端口(<code>listen</code>), 接受连接(<code>accept</code>, 产生一个fd), 接受连接后将请求分配给reactor线程, 默认通过fd % reactor_number进行分配, 之后通过<code>epoll_ctl</code>将fd加入到对应reactor线程中, 刚加入时监听写事件, 因为新接受连接创建的套接字写缓冲区为空, 故而一定可写, 会被立刻触发, 进而reactor线程进行一些初始化操作</li>\n</ol>\n<ul>\n<li>存在多个线程同时操作一个epollfd(通过系统调用<code>epoll_create</code>创建)的情况</li>\n<li>多个线程同时调用<code>epoll_ctl</code>是线程安全的(对应一个epollfd), 一个线程正在执行, 其他线程会被阻塞(因为需要同时操作epoll底层的红黑树)</li>\n<li>多个线程同时调用<code>epoll_wait</code>也是线程安全的, 但是一个事件可能会被多个线程同时接收到, 实际中不建议多个线程同时<code>epoll_wait</code>一个epollfd。Swoole中也是不存在这种情况的, Swoole中每个reactor线程都有自己的epollfd</li>\n<li>一个线程调用<code>epoll_wait</code>, 一个线程调用<code>epoll_ctl</code>, 根据man手册, 如果<code>epoll_ctl</code>新加入的fd已经准备好, 会使得执行<code>epoll_wait</code>的线程变成非阻塞状态(可以通过man <code>epoll_wait</code>查看相关内容)。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//主线程, 如果fd已经ready, reactor线程会被唤醒</span><br><span class=\"line\">epoll_ctl(epollfd, fd, ...);</span><br><span class=\"line\">//reactor线程</span><br><span class=\"line\">epoll_wait(epollfd,...)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"2\">\n<li><p>reactor线程中fd的写事件被触发, reactor线程负责处理, 发现是首次加入, 没有数据可写, 则会开启读事件监听, 准备接受客户端发送的数据</p>\n</li>\n<li><p>reactor线程读取到用户的请求数据, <strong>一个请求的数据接收完后</strong>, 将数据转发给worker进程, 默认是通过fd % worker_number进行分配</p>\n</li>\n</ol>\n<ul>\n<li>reactor发送给worker进程的数据包, 会包含一个头部, 头部中记录了reactor的信息</li>\n<li>如果发送的数据过大, 则需要将数据进行分片, 限于篇幅, 数据分片, 后续再进行详细讲述</li>\n<li>可能存在多个reactor线程同时向同一个worker进程发送数据的情况, 故而Swoole采用SOCK_DGRAM模式与worker进程进行通信, 通过每个数据包的包头, worker进程可以区分出是由哪个reactor线程发送的数据, 也可以知道是哪个请求</li>\n</ul>\n<ol start=\"4\">\n<li>worker进程收到reactor发送的数据包后, 进行处理, 处理完成后, 将请求结果发送给主进程</li>\n</ol>\n<ul>\n<li>worker进程发送给主进程的数据包, 也会包含一个头部, 当reactor线程收到数据包后, 能够知道对应的reactor线程, 请求的fd等信息</li>\n</ul>\n<ol start=\"5\">\n<li>主进程收到worker进程发送的数据包, 这个会触发某个reactor线程进行处理</li>\n</ol>\n<ul>\n<li><strong>这个reactor线程并不一定是之前发送请求给worker进程的那个reactor线程</strong></li>\n<li>主进程的每个reactor线程都负责监听worker进程发送的数据包, 每个worker发送的数据包只会由一个reactor线程进行监听, 故而只会触发一个reactor线程</li>\n</ul>\n<ol start=\"6\">\n<li>reactor线程处理worker进程发送的请求处理结果, 如果是直接发送数据给客户端, 则可以直接发送, 如果需要改变这个这个连接的监听状态(例如<code>close</code>), 则需要先找到监听这个连接的reactor线程, 进而改变这个连接的监听状态(通过调用<code>epoll_ctl</code>)</li>\n</ol>\n<ul>\n<li>reactor处理线程与reactor监听线程可能并不是同一个线程</li>\n<li>reactor监听线程负责监听客户端发送的数据, 进而转发给worker进程</li>\n<li>reactor处理线程负责监听worker进程发送给主进程的数据, 进而将数据发送给客户端</li>\n</ul>\n<h1 id=\"四-gdb调试\"><a href=\"#四-gdb调试\" class=\"headerlink\" title=\"四. gdb调试\"></a>四. gdb调试</h1><h2 id=\"4-1-process模式启动\"><a href=\"#4-1-process模式启动\" class=\"headerlink\" title=\"4.1 process模式启动\"></a>4.1 process模式启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//fork manager进程</span><br><span class=\"line\">#0  0x00007ffff67dae64 in fork () from /lib64/libc.so.6</span><br><span class=\"line\">#1  0x00007ffff553888a in swoole_fork () </span><br><span class=\"line\">    at /root/code/swoole-src/src/core/base.c:186</span><br><span class=\"line\">#2  0x00007ffff556afb8 in swManager_start (serv=serv@entry=0x1353f60) </span><br><span class=\"line\">    at /root/code/swoole-src/src/server/manager.cc:164</span><br><span class=\"line\">#3  0x00007ffff5571dde in swFactoryProcess_start (factory=0x1353ff8) </span><br><span class=\"line\">    at /root/code/swoole-src/src/server/process.c:198</span><br><span class=\"line\">#4  0x00007ffff556ef8b in swServer_start (serv=0x1353f60) </span><br><span class=\"line\">    at /root/code/swoole-src/src/server/master.cc:651</span><br><span class=\"line\">#5  0x00007ffff55dc808 in zim_swoole_server_start </span><br><span class=\"line\">    (execute_data=&lt;optimized out&gt;, return_value=0x7fffffffac50)</span><br><span class=\"line\">    at /root/code/swoole-src/swoole_server.cc:2946</span><br><span class=\"line\">#6  0x00000000007bb068 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () </span><br><span class=\"line\">    at /root/php-7.3.3/Zend/zend_vm_execute.h:980</span><br><span class=\"line\">#7  execute_ex (ex=0x7ffff7f850a8) </span><br><span class=\"line\">    at /root/php-7.3.3/Zend/zend_vm_execute.h:55485</span><br><span class=\"line\">#8  0x00000000007bbf58 in zend_execute </span><br><span class=\"line\">    (op_array=op_array@entry=0x7ffff5e7b340, </span><br><span class=\"line\">    return_value=return_value@entry=0x7ffff5e1d030) </span><br><span class=\"line\">    at /root/php-7.3.3/Zend/zend_vm_execute.h:60881</span><br><span class=\"line\">#9  0x0000000000737554 in zend_execute_scripts </span><br><span class=\"line\">    (type=type@entry=8, retval=0x7ffff5e1d030, retval@entry=0x0,</span><br><span class=\"line\">    file_count=file_count@entry=3) at /root/php-7.3.3/Zend/zend.c:1568</span><br><span class=\"line\">#10 0x00000000006db4d0 in php_execute_script </span><br><span class=\"line\">    (primary_file=primary_file@entry=0x7fffffffd050) </span><br><span class=\"line\">    at /root/php-7.3.3/main/main.c:2630</span><br><span class=\"line\">#11 0x00000000007be2f5 in do_cli (argc=2, argv=0x1165cd0) </span><br><span class=\"line\">    at /root/php-7.3.3/sapi/cli/php_cli.c:997</span><br><span class=\"line\">#12 0x000000000043fc1f in main (argc=2, argv=0x1165cd0) </span><br><span class=\"line\">    at /root/php-7.3.3/sapi/cli/php_cli.c:1389</span><br><span class=\"line\"></span><br><span class=\"line\">// pthread_create reactor线程</span><br><span class=\"line\">#0  0x00007ffff552e960 in pthread_create@plt () </span><br><span class=\"line\">    from /usr/local/lib/php/extensions/no-debug-non-zts-20180731/swoole.so</span><br><span class=\"line\">#1  0x00007ffff5576959 in swReactorThread_start (serv=0x1353f60) </span><br><span class=\"line\">    at /root/code/swoole-src/src/server/reactor_thread.c:883</span><br><span class=\"line\">#2  0x00007ffff556f006 in swServer_start (serv=0x1353f60) </span><br><span class=\"line\">    at /root/code/swoole-src/src/server/master.cc:670</span><br><span class=\"line\">#3  0x00007ffff55dc808 in zim_swoole_server_start </span><br><span class=\"line\">    (execute_data=&lt;optimized out&gt;, return_value=0x7fffffffac50)</span><br><span class=\"line\">    at /root/code/swoole-src/swoole_server.cc:2946</span><br><span class=\"line\">#4  0x00000000007bb068 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () </span><br><span class=\"line\">    at /root/php-7.3.3/Zend/zend_vm_execute.h:980</span><br><span class=\"line\">#5  execute_ex (ex=0x7fffffffab10) at /root/php-7.3.3/Zend/zend_vm_execute.h:55485</span><br><span class=\"line\">#6  0x00000000007bbf58 in zend_execute </span><br><span class=\"line\">    (op_array=op_array@entry=0x7ffff5e7b340, </span><br><span class=\"line\">    return_value=return_value@entry=0x7ffff5e1d030)</span><br><span class=\"line\">    at /root/php-7.3.3/Zend/zend_vm_execute.h:60881</span><br><span class=\"line\">#7  0x0000000000737554 in zend_execute_scripts </span><br><span class=\"line\">    (type=type@entry=8, retval=0x7ffff5e1d030, retval@entry=0x0,</span><br><span class=\"line\">    file_count=file_count@entry=3) at /root/php-7.3.3/Zend/zend.c:1568</span><br><span class=\"line\">#8  0x00000000006db4d0 in php_execute_script </span><br><span class=\"line\">    (primary_file=primary_file@entry=0x7fffffffd050) </span><br><span class=\"line\">    at /root/php-7.3.3/main/main.c:2630</span><br><span class=\"line\">#9  0x00000000007be2f5 in do_cli (argc=2, argv=0x1165cd0) </span><br><span class=\"line\">    at /root/php-7.3.3/sapi/cli/php_cli.c:997</span><br><span class=\"line\">#10 0x000000000043fc1f in main (argc=2, argv=0x1165cd0) </span><br><span class=\"line\">    at /root/php-7.3.3/sapi/cli/php_cli.c:1389</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-base模式启动\"><a href=\"#4-2-base模式启动\" class=\"headerlink\" title=\"4.2 base模式启动\"></a>4.2 base模式启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//base 模式下的启动</span><br><span class=\"line\">#0  0x00007ffff67dae64 in fork () from /lib64/libc.so.6</span><br><span class=\"line\">#1  0x00007ffff553888a in swoole_fork () </span><br><span class=\"line\">    at /root/code/swoole-src/src/core/base.c:186</span><br><span class=\"line\">#2  0x00007ffff5558557 in swProcessPool_spawn </span><br><span class=\"line\">    (pool=pool@entry=0x7ffff2d2a308, worker=0x7ffff2d2a778)</span><br><span class=\"line\">    at /root/code/swoole-src/src/network/process_pool.c:392</span><br><span class=\"line\">#3  0x00007ffff5558710 in swProcessPool_start (pool=0x7ffff2d2a308) </span><br><span class=\"line\">    at /root/code/swoole-src/src/network/process_pool.c:227</span><br><span class=\"line\">#4  0x00007ffff55741cf in swReactorProcess_start (serv=0x1353f60) </span><br><span class=\"line\">    at /root/code/swoole-src/src/server/reactor_process.cc:176</span><br><span class=\"line\">#5  0x00007ffff556f21d in swServer_start (serv=0x1353f60) </span><br><span class=\"line\">    at /root/code/swoole-src/src/server/master.cc:666</span><br><span class=\"line\">#6  0x00007ffff55dc808 in zim_swoole_server_start </span><br><span class=\"line\">    (execute_data=&lt;optimized out&gt;, return_value=0x7fffffffac50)</span><br><span class=\"line\">    at /root/code/swoole-src/swoole_server.cc:2946</span><br><span class=\"line\">#7  0x00000000007bb068 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () </span><br><span class=\"line\">    at /root/php-7.3.3/Zend/zend_vm_execute.h:980</span><br><span class=\"line\">#8  execute_ex (ex=0x7ffff2d2a308) at /root/php-7.3.3/Zend/zend_vm_execute.h:55485</span><br><span class=\"line\">#9  0x00000000007bbf58 in zend_execute </span><br><span class=\"line\">    (op_array=op_array@entry=0x7ffff5e7b340, </span><br><span class=\"line\">    return_value=return_value@entry=0x7ffff5e1d030)</span><br><span class=\"line\">    at /root/php-7.3.3/Zend/zend_vm_execute.h:60881</span><br><span class=\"line\">#10 0x0000000000737554 in zend_execute_scripts </span><br><span class=\"line\">    (type=type@entry=8, retval=0x7ffff5e1d030, retval@entry=0x0,</span><br><span class=\"line\">    file_count=file_count@entry=3) at /root/php-7.3.3/Zend/zend.c:1568</span><br><span class=\"line\">#11 0x00000000006db4d0 in php_execute_script </span><br><span class=\"line\">    (primary_file=primary_file@entry=0x7fffffffd050) </span><br><span class=\"line\">    at /root/php-7.3.3/main/main.c:2630</span><br><span class=\"line\">#12 0x00000000007be2f5 in do_cli (argc=2, argv=0x1165cd0) </span><br><span class=\"line\">    at /root/php-7.3.3/sapi/cli/php_cli.c:997</span><br><span class=\"line\">#13 0x000000000043fc1f in main (argc=2, argv=0x1165cd0) </span><br><span class=\"line\">    at /root/php-7.3.3/sapi/cli/php_cli.c:1389</span><br></pre></td></tr></table></figure>\n<h1 id=\"五-总结及思考\"><a href=\"#五-总结及思考\" class=\"headerlink\" title=\"五. 总结及思考\"></a>五. 总结及思考</h1><ol>\n<li>本文主要介绍了Swoole server的两种模式: base模式、process模式, 详细讲解了两种模式的网络编程模型, 并重点介绍了process模式下, 进程间通信的方式、请求的处理流程等。</li>\n<li>process模式下, 为什么不直接在主进程中创建多个线程, 由线程直接进行处理请求(可以避免进程间通信的开销), 而是创建出manager进程, 再由manager进程创建出worker进程, 由worker进程处理请求?</li>\n</ol>\n<ul>\n<li>个人觉得可能是php对多线程的支持不是很友好, phper大都也只是进行单线程编程</li>\n<li>ZendVM 提供的 TSRM 虽然也是支持多线程环境，但实际上这是一个 按线程隔离内存的方案, 多线程并没有意义</li>\n</ul>\n<ol start=\"3\">\n<li>process模式下, 主进程中的每个reactor线程都可以同时处理多个请求, 多个请求是并发处理的, 我们从2个维度看,</li>\n</ol>\n<ul>\n<li>从主进程的角度看, 主进程同时处理多个请求, 当一个请求包全部接收完后, 转发给worker进程进行处理</li>\n<li>从某个worker进程的角度看, 这个worker进程收到的请求是串行的, 默认情况下, worker进程也是串行处理请求, 如果单个请求阻塞(Swoole的worker进程会回调phper写的事件处理函数, 该函数可能阻塞), 后续的请求也无法处理, 这个就是排头阻塞问题, 这种情况下可以使用Swoole的协程, 通过协程的调度, 单个请求阻塞时, worker进程可以继续处理其他请求。</li>\n</ul>\n<ol start=\"4\">\n<li>使用Swoole创建tcp server时, 由于tcp是字节流的协议, 需要分包, 而Swoole在不清楚客户端与服务端通信协议的情况下, 无法进行分包, process模式下, reactor交给worker进程的数据也只能是字节流的, 需要用户自行处理。当然, 一般情况也不需要自行构建协议, 使用tcp server, Swoole已经支持Http, Https等协议。</li>\n</ol>\n<h1 id=\"六-参考\"><a href=\"#六-参考\" class=\"headerlink\" title=\"六. 参考\"></a>六. 参考</h1><ul>\n<li>UNIX网络编程</li>\n<li>UNIX环境高级编程</li>\n<li>php7 底层实现与源码分析</li>\n<li><a href=\"https://wiki.swoole.com/\" target=\"_blank\" rel=\"noopener\">https://wiki.swoole.com/</a></li>\n<li><a href=\"https://www.cnblogs.com/welhzh/p/3772164.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/welhzh/p/3772164.html</a></li>\n<li><a href=\"https://www.cnblogs.com/JohnABC/p/4079669.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/JohnABC/p/4079669.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-基础知识\"><a href=\"#一-基础知识\" class=\"headerlink\" title=\"一. 基础知识\"></a>一. 基础知识</h1><h2 id=\"1-1-Swoole\"><a href=\"#1-1-Swoole\" class=\"headerlink\" title=\"1.1 Swoole\"></a>1.1 Swoole</h2><p>Swoole是面向生产环境的php异步网络通信引擎, php开发人员可以利用Swoole开发出高性能的server服务。Swoole的server部分, 内容很多, 也涉及很多的知识点, 本文仅对其server进行简单的概述, 具体的实现细节在后续的文章中再进行详细介绍。</p>\n<h2 id=\"1-2-网络编程\"><a href=\"#1-2-网络编程\" class=\"headerlink\" title=\"1.2 网络编程\"></a>1.2 网络编程</h2><ol>\n<li>网络通信是指在一台(或者多台)机器上启动一个(或者多个)进程, 监听一个(或者多个)端口, 按照某种协议(可以是标准协议http, dns; 也可以是自行定义的协议)与客户端交换信息。</li>\n<li>目前的网络编程多是在tcp, udp或者更上层的协议之上进行编程。Swoole的server部分是基于tcp以及udp协议的。</li>\n<li>利用udp进行编程较为简单, 本文主要介绍tcp协议之上的网络编程</li>\n<li>TCP网络编程主要涉及4种事件,</li>\n</ol>\n<ul>\n<li>连接建立: 主要是指客户端发起连接(<code>connect</code>)以及服务端接受连接(<code>accept</code>)</li>\n<li>消息到达: 服务端接受到客户端发送的数据, 该事件是TCP网络编程最重要的事件, 服务端对于该类事件进行处理时, 可以采用阻塞式或者非阻塞式, 除此之外, 服务端还需要考虑分包, 应用层缓冲区等问题</li>\n<li>消息发送成功: 发送成功是指应用层将数据成功发送到内核的套接字发送缓冲区中, 并不是指客户端成功接受数据。对于低流量的服务而言, 数据通常一次性即可发送完, 并不需要关心此类事件。如果一次性不能将全部数据发送到内核缓冲区, 则需要关心消息是否成功发送(阻塞式编程在系统调用(<code>write</code>, <code>writev</code>, <code>send</code>等)返回后即是发送成功, 非阻塞式编程则需要考虑实际写入的数据是否与预期一致)</li>\n<li>连接断开: 需要考虑客户端断开连接(<code>read</code>返回0)以及服务端断开连接(<code>close</code>, <code>shutdown</code>)</li>\n</ul>\n<ol start=\"5\">\n<li>tcp建立连接的过程如下图,<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/tcp/%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5.png\" alt></li>\n</ol>\n<ul>\n<li>图中, ACK、SYN表示标志位, seq、ack为tcp包的序号以及确认序号</li>\n</ul>\n<ol start=\"6\">\n<li>tcp断开连接的过程如下图,<br><img src=\"https://picturestore.nos-eastchina1.126.net/%E7%BD%91%E7%BB%9C/tcp/%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5.png\" alt></li>\n</ol>\n<ul>\n<li>上图考虑的是客户端主动断开连接的情况, 服务端主动断开连接也类似</li>\n<li>图中, FIN、ACK表示标志位, seq、ack为tcp包的序号以及确认序号</li>\n</ul>\n<h2 id=\"1-3-进程间通信\"><a href=\"#1-3-进程间通信\" class=\"headerlink\" title=\"1.3 进程间通信\"></a>1.3 进程间通信</h2><ol>\n<li>进程之间的通信有无名管道(pipe), 有名管道(fifo), 信号(signal), 信号量(semaphore), 套接字(socket), 共享内存(shared memory)等方式</li>\n<li>Swoole中采用unix域套接字(套接字的一种)用于多进程之间的通信(指Swoole内部进程之间)</li>\n</ol>\n<h2 id=\"1-4-socketpair\"><a href=\"#1-4-socketpair\" class=\"headerlink\" title=\"1.4 socketpair\"></a>1.4 socketpair</h2><ol>\n<li>socketpair用于创建一个套接字对, 类似于pipe, 不同的是pipe是单向通信, 双向通信需要创建两次, socketpair调用一次即可实现双向通信, 除此之外, 由于使用的是套接字, 还可以定义数据交换的方式</li>\n<li>socketpair系统调用<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">socketpair</span><span class=\"params\">(<span class=\"keyword\">int</span> domain, <span class=\"keyword\">int</span> type, <span class=\"keyword\">int</span> protocol, <span class=\"keyword\">int</span> sv[<span class=\"number\">2</span>])</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//domain表示协议簇</span></span><br><span class=\"line\"><span class=\"comment\">//type表示类型</span></span><br><span class=\"line\"><span class=\"comment\">//protocol表示协议, SOCK_STREAM表示流协议(类似tcp), SOCK_DGRAM表示数据报协议(类似udp)</span></span><br><span class=\"line\"><span class=\"comment\">//sv用于存储建立的套接字对, 也就是两个套接字文件描述符</span></span><br><span class=\"line\"><span class=\"comment\">//成功返回0, 否则返回-1, 可以从errno获取错误信息</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>调用成功后sv[0], sv[1]分别存储一个文件描述符</li>\n<li>向sv[0]中写入, 可以从sv[1]中读取</li>\n<li>向sv[1]中写入, 可以从sv[0]中读取</li>\n<li>进程调用socketpair后, fork子进程, 子进程会默认继承sv[0], sv[1]这两个文件描述符, 进而可以实现父子进程间通信。例如, 父进程向sv[0]中写入, 子进程从sv[1]中读取; 子进程向sv[1]中写入, 父进程从sv[0]中读取。</li>\n</ul>\n<h2 id=\"1-5-守护进程-daemon\"><a href=\"#1-5-守护进程-daemon\" class=\"headerlink\" title=\"1.5 守护进程(daemon)\"></a>1.5 守护进程(daemon)</h2><ol>\n<li>守护进程是一种特殊的后台进程, 它脱离于终端, 用于周期性的执行某种任务</li>\n<li>进程组</li>\n</ol>\n<ul>\n<li>每个进程都属于一个进程组</li>\n<li>每个进程组都有一个进程组号, 也就是该组组长的进程号(PID)</li>\n<li>一个进程只能为自己或者其子进程设置进程组号</li>\n</ul>\n<ol start=\"3\">\n<li>会话</li>\n</ol>\n<ul>\n<li>一个会话可以包含多个进程组, 这些进程组中最多只能有一个前台进程组(也可以没有), 其余为后台进程组</li>\n<li>一个会话最多只能有一个控制终端</li>\n<li>用户通过终端登录或者网络登录, 会创建一个新的会话</li>\n<li>进程调用系统调用<code>setsid</code>可以创建一个新的会话, 调用<code>setsid</code>的进程不能是某个进程组的组长。<code>setsid</code>调用完成后, 该进程成为这个会话的首进程(领头进程), 同时变成一个新的进程组的组长, 如果该进程之前有控制终端, 该进程与终端的联系也被断开</li>\n</ul>\n<ol start=\"4\">\n<li>创建守护进程的方式</li>\n</ol>\n<ul>\n<li>fork子进程后, 父进程退出, 子进程执行<code>setsid</code>, 子进程即可成为守护进程。这种方式下, 子进程是会话的领头进程, 可以重新打开终端, 此时可以再次fork, fork产生的子进程无法再打开终端(只有会话的领头进程才能打开终端)。第二次fork并不是必须的, 只是为了防止子进程再次打开终端</li>\n<li>linux提供了daemon函数(该函数并不是系统调用, 为库函数)用于创建守护进程</li>\n</ul>\n<h2 id=\"1-6-swoole-tcp-server示例\"><a href=\"#1-6-swoole-tcp-server示例\" class=\"headerlink\" title=\"1.6 swoole tcp server示例\"></a>1.6 swoole tcp server示例</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//创建server</span></span><br><span class=\"line\">$serv = <span class=\"keyword\">new</span> Swoole\\Server(<span class=\"string\">'0.0.0.0'</span>, <span class=\"number\">9501</span>, SWOOLE_PROCESS, SWOOLE_SOCK_TCP);</span><br><span class=\"line\"><span class=\"comment\">//设置server的参数</span></span><br><span class=\"line\">$serv-&gt;set(<span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"string\">'reactor_num'</span> =&gt; <span class=\"number\">2</span>, <span class=\"comment\">//reactor thread num</span></span><br><span class=\"line\">    <span class=\"string\">'worker_num'</span> =&gt; <span class=\"number\">3</span>,  <span class=\"comment\">//worker process num</span></span><br><span class=\"line\">));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置事件回调</span></span><br><span class=\"line\">$serv-&gt;on(<span class=\"string\">'connect'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($serv, $fd)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"Client:Connect.\\n\"</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$serv-&gt;on(<span class=\"string\">'receive'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($serv, $fd, $reactor_id, $data)</span> </span>&#123;</span><br><span class=\"line\">    $serv-&gt;send($fd, <span class=\"string\">'Swoole: '</span>.$data);</span><br><span class=\"line\">    $serv-&gt;close($fd);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$serv-&gt;on(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($serv, $fd)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"Client: Close.\\n\"</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//启动server</span></span><br><span class=\"line\">$serv-&gt;start();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>上述代码在cli模式下执行时, 经过词法分析, 语法分析生成opcode, 进而交由zend虚拟机执行</li>\n<li>zend虚拟机在执行到$serv-&gt;start()时, 启动Swoole server</li>\n<li>上述代码中设置的事件回调是在worker进程中执行, 后文会详细介绍Swoole server模型</li>\n</ul>\n<h1 id=\"二-swoole-server\"><a href=\"#二-swoole-server\" class=\"headerlink\" title=\"二. swoole server\"></a>二. swoole server</h1><h2 id=\"2-1-base模式\"><a href=\"#2-1-base模式\" class=\"headerlink\" title=\"2.1 base模式\"></a>2.1 base模式</h2><ol>\n<li>说明</li>\n</ol>\n<ul>\n<li>base模式采用多进程模型, 这种模型与nginx一致, 每个进程只有一个线程, 主进程负责管理工作进程, 工作进程负责监听端口, 接受连接, 处理请求以及关闭连接</li>\n<li>多个进程同时监听端口, 会有惊群问题, linux 3.9之前版本的内核, Swoole没有解决惊群问题</li>\n<li>linux 内核3.9及其后续版本提供了新的套接字参数SO_REUSEPORT, 该参数允许多个进程绑定到同一个端口, 内核在接受到新的连接请求时, 会唤醒其中一个进行处理, 内核层面也会做负载均衡, 可以解决上述的惊群问题, Swoole也已经加入了这个参数</li>\n<li>base模式下, reactor_number参数并没有实际作用</li>\n<li>如果worker进程数设置为1, 则不会fork出worker进程, 主进程直接处理请求, 这种模式适合调试</li>\n</ul>\n<ol start=\"2\">\n<li>启动过程</li>\n</ol>\n<ul>\n<li>php代码执行到$serv-&gt;start()时, 主进程进入int swServer_start(swServer *serv)函数, 该函数负责启动server</li>\n<li>在函数swServer_start中会调用swReactorProcess_start, 这个函数会fork出多个worker进程</li>\n<li>主进程和worker进程各自进入自己的事件循环, 处理各类事件</li>\n</ul>\n<h2 id=\"2-2-process模式\"><a href=\"#2-2-process模式\" class=\"headerlink\" title=\"2.2 process模式\"></a>2.2 process模式</h2><ol>\n<li>说明</li>\n</ol>\n<ul>\n<li>这种模式为多进程多线程, 有主进程, manager进程, worker进程, task_worker进程</li>\n<li>主进程下有多个线程, 主线程负责接受连接, 之后交给react线程处理请求。 react线程负责接收数据包, 并将数据转发给worker进程进行处理, 之后处理worker进程返回的数据</li>\n<li>manager进程, 该进程为单线程, 主要负责管理worker进程, 类似于nginx中的主进程, 当worker进程异常退出时, manager进程负责重新fork出一个worker进程</li>\n<li>worker进程, 该进程为单线程, 负责具体处理请求</li>\n<li>task_worker进程, 用于处理比较耗时的任务, 默认不开启</li>\n<li>worker进程与主进程中的react线程使用域套接字进行通信, worker进程之间不进行通信</li>\n</ul>\n<ol start=\"2\">\n<li>启动过程</li>\n</ol>\n<ul>\n<li><p>Swoole server启动入口: swServer_start函数,</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//php 代码中$serv-&gt;start(); 会调用函数, 进行server start</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">swServer_start</span><span class=\"params\">(swServer *serv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 该函数首先进行必要的参数检查</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">swServer_start_check</span><span class=\"params\">(swServer *serv)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 其中有,</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (serv-&gt;worker_num &lt; serv-&gt;reactor_num)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    serv-&gt;reactor_num = serv-&gt;worker_num;</span><br><span class=\"line\">&#125;<span class=\"comment\">//也就是说reactor_num &lt;= worker_num</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//之后执行factory start, 也就是swFactoryProcess_start函数</span></span><br><span class=\"line\"><span class=\"comment\">//该函数会fork出manager进程, manager进程进而fork出worker进程以及task_worker进程</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (factory-&gt;start(factory) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> SW_ERR;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//然后主进程的主线程生成reactor线程</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (serv-&gt;factory_mode == SW_MODE_BASE)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ret = swReactorProcess_start(serv);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ret = swReactorThread_start(serv);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果设置了daemon模式, 在必要的参数检查完后, 先将自己变为守护进程再fork manager进程, 进而创建reactor线程</p>\n</li>\n<li><p>主进程先fork出manager进程, manager进程负责fork出worker进程以及task_worker进程。worker进程之后进入int swWorker_loop(swServer *serv, int worker_id), 也就是进入自己的事件循环, task_worker也是一样, 进入自己的事件循环。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static int swFactoryProcess_start(swFactory *factory);</span><br><span class=\"line\">//swFactoryProcess_start会调用swManager_start生成manager进程</span><br><span class=\"line\">int swManager_start(swServer *serv);</span><br><span class=\"line\">// manager进程会fork出worker进程以及task_worker进程</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>主进程pthread_create出react线程, 主线程和react线程各自进入自己的事件循环, reactor线程执行static int swReactorThread_loop(swThreadParam *param), 等待处理事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//主线程执行swReactorThread_start, 创建出reactor线程</span><br><span class=\"line\">int swReactorThread_start(swServer *serv);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"3\">\n<li>结构图<br>Swoole process模式结构如下图所示,<br><img src=\"https://picturestore.nos-eastchina1.126.net/swoole/swoole%20process%20%E7%BB%93%E6%9E%84%E5%9B%BE.jpg\" alt=\"swoole_server\"></li>\n</ol>\n<ul>\n<li>上图并没有考虑task_worker进程, 在默认情况下, task_worker进程数为0</li>\n</ul>\n<h1 id=\"三-请求处理流程-process模式\"><a href=\"#三-请求处理流程-process模式\" class=\"headerlink\" title=\"三. 请求处理流程(process模式)\"></a>三. 请求处理流程(process模式)</h1><h2 id=\"3-1-reactor线程与worker进程之间的通信\"><a href=\"#3-1-reactor线程与worker进程之间的通信\" class=\"headerlink\" title=\"3.1 reactor线程与worker进程之间的通信\"></a>3.1 reactor线程与worker进程之间的通信</h2><ol>\n<li>Swoole master进程与worker进程之间的通信如下图所示,<br><img src=\"https://picturestore.nos-eastchina1.126.net/swoole/swoole%20process%20ipc.png\" alt=\"image\"></li>\n</ol>\n<ul>\n<li>Swoole使用SOCK_DGRAM, 而不是SOCK_STREAM, 这里是因为每个reactor线程负责处理多个请求, reactor接收到请求后会将信息转发给worker进程, 由worker进程负责处理,如果使用SOCK_STREAM, worker进程无法对tcp进行分包, 进而处理请求</li>\n<li>swFactoryProcess_start函数中会根据worker进程数创建对应个数的套接字对, 用于reactor线程与worker进程通信(详见swPipeUnsock_create函数)</li>\n</ul>\n<ol start=\"2\">\n<li>假设reactor线程有2个, worker进程有3个, 则reactor与worker之间的通信如下图所示,<br><img src=\"https://picturestore.nos-eastchina1.126.net/swoole/swoole%20process%20ipc%E5%AE%9E%E4%BE%8B.png\" alt=\"image\"></li>\n</ol>\n<ul>\n<li>每个reactor线程负责监听几个worker进程, 每个worker进程只有一个reactor线程监听(reactor_num &lt;= worker_num)。Swoole默认使用worker_process_id % reactor_num对worker进程进行分配, 交给对应的reactor线程进行监听</li>\n<li>reactor线程收到某个worker进程的数据后会进行处理, 值得注意的是, 这个reactor线程可能并不是发送请求的那个reactor线程。</li>\n</ul>\n<ol start=\"3\">\n<li>reactor线程与worker进程通信的数据包<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//包头</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">swDataHead</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> fd;</span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> len;</span><br><span class=\"line\">    <span class=\"keyword\">int16_t</span> from_id;</span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> type;</span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> flags;</span><br><span class=\"line\">    <span class=\"keyword\">uint16_t</span> from_fd;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> SW_BUFFER_RECV_TIME</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> time;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125; swDataHead;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//reactor线程向worker进程发送的数据, 也就是worker进程收到的数据包</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    swDataHead info;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> data[SW_IPC_BUFFER_SIZE];</span><br><span class=\"line\">&#125; swEventData;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//worker进程向reactor线程发送的数据, 也就是reactor线程收到的数据包</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    swDataHead info;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> data[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125; swPipeBuffer;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"3-2-请求处理\"><a href=\"#3-2-请求处理\" class=\"headerlink\" title=\"3.2 请求处理\"></a>3.2 请求处理</h2><ol>\n<li>master进程中的主线程负责监听端口(<code>listen</code>), 接受连接(<code>accept</code>, 产生一个fd), 接受连接后将请求分配给reactor线程, 默认通过fd % reactor_number进行分配, 之后通过<code>epoll_ctl</code>将fd加入到对应reactor线程中, 刚加入时监听写事件, 因为新接受连接创建的套接字写缓冲区为空, 故而一定可写, 会被立刻触发, 进而reactor线程进行一些初始化操作</li>\n</ol>\n<ul>\n<li>存在多个线程同时操作一个epollfd(通过系统调用<code>epoll_create</code>创建)的情况</li>\n<li>多个线程同时调用<code>epoll_ctl</code>是线程安全的(对应一个epollfd), 一个线程正在执行, 其他线程会被阻塞(因为需要同时操作epoll底层的红黑树)</li>\n<li>多个线程同时调用<code>epoll_wait</code>也是线程安全的, 但是一个事件可能会被多个线程同时接收到, 实际中不建议多个线程同时<code>epoll_wait</code>一个epollfd。Swoole中也是不存在这种情况的, Swoole中每个reactor线程都有自己的epollfd</li>\n<li>一个线程调用<code>epoll_wait</code>, 一个线程调用<code>epoll_ctl</code>, 根据man手册, 如果<code>epoll_ctl</code>新加入的fd已经准备好, 会使得执行<code>epoll_wait</code>的线程变成非阻塞状态(可以通过man <code>epoll_wait</code>查看相关内容)。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//主线程, 如果fd已经ready, reactor线程会被唤醒</span><br><span class=\"line\">epoll_ctl(epollfd, fd, ...);</span><br><span class=\"line\">//reactor线程</span><br><span class=\"line\">epoll_wait(epollfd,...)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"2\">\n<li><p>reactor线程中fd的写事件被触发, reactor线程负责处理, 发现是首次加入, 没有数据可写, 则会开启读事件监听, 准备接受客户端发送的数据</p>\n</li>\n<li><p>reactor线程读取到用户的请求数据, <strong>一个请求的数据接收完后</strong>, 将数据转发给worker进程, 默认是通过fd % worker_number进行分配</p>\n</li>\n</ol>\n<ul>\n<li>reactor发送给worker进程的数据包, 会包含一个头部, 头部中记录了reactor的信息</li>\n<li>如果发送的数据过大, 则需要将数据进行分片, 限于篇幅, 数据分片, 后续再进行详细讲述</li>\n<li>可能存在多个reactor线程同时向同一个worker进程发送数据的情况, 故而Swoole采用SOCK_DGRAM模式与worker进程进行通信, 通过每个数据包的包头, worker进程可以区分出是由哪个reactor线程发送的数据, 也可以知道是哪个请求</li>\n</ul>\n<ol start=\"4\">\n<li>worker进程收到reactor发送的数据包后, 进行处理, 处理完成后, 将请求结果发送给主进程</li>\n</ol>\n<ul>\n<li>worker进程发送给主进程的数据包, 也会包含一个头部, 当reactor线程收到数据包后, 能够知道对应的reactor线程, 请求的fd等信息</li>\n</ul>\n<ol start=\"5\">\n<li>主进程收到worker进程发送的数据包, 这个会触发某个reactor线程进行处理</li>\n</ol>\n<ul>\n<li><strong>这个reactor线程并不一定是之前发送请求给worker进程的那个reactor线程</strong></li>\n<li>主进程的每个reactor线程都负责监听worker进程发送的数据包, 每个worker发送的数据包只会由一个reactor线程进行监听, 故而只会触发一个reactor线程</li>\n</ul>\n<ol start=\"6\">\n<li>reactor线程处理worker进程发送的请求处理结果, 如果是直接发送数据给客户端, 则可以直接发送, 如果需要改变这个这个连接的监听状态(例如<code>close</code>), 则需要先找到监听这个连接的reactor线程, 进而改变这个连接的监听状态(通过调用<code>epoll_ctl</code>)</li>\n</ol>\n<ul>\n<li>reactor处理线程与reactor监听线程可能并不是同一个线程</li>\n<li>reactor监听线程负责监听客户端发送的数据, 进而转发给worker进程</li>\n<li>reactor处理线程负责监听worker进程发送给主进程的数据, 进而将数据发送给客户端</li>\n</ul>\n<h1 id=\"四-gdb调试\"><a href=\"#四-gdb调试\" class=\"headerlink\" title=\"四. gdb调试\"></a>四. gdb调试</h1><h2 id=\"4-1-process模式启动\"><a href=\"#4-1-process模式启动\" class=\"headerlink\" title=\"4.1 process模式启动\"></a>4.1 process模式启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//fork manager进程</span><br><span class=\"line\">#0  0x00007ffff67dae64 in fork () from /lib64/libc.so.6</span><br><span class=\"line\">#1  0x00007ffff553888a in swoole_fork () </span><br><span class=\"line\">    at /root/code/swoole-src/src/core/base.c:186</span><br><span class=\"line\">#2  0x00007ffff556afb8 in swManager_start (serv=serv@entry=0x1353f60) </span><br><span class=\"line\">    at /root/code/swoole-src/src/server/manager.cc:164</span><br><span class=\"line\">#3  0x00007ffff5571dde in swFactoryProcess_start (factory=0x1353ff8) </span><br><span class=\"line\">    at /root/code/swoole-src/src/server/process.c:198</span><br><span class=\"line\">#4  0x00007ffff556ef8b in swServer_start (serv=0x1353f60) </span><br><span class=\"line\">    at /root/code/swoole-src/src/server/master.cc:651</span><br><span class=\"line\">#5  0x00007ffff55dc808 in zim_swoole_server_start </span><br><span class=\"line\">    (execute_data=&lt;optimized out&gt;, return_value=0x7fffffffac50)</span><br><span class=\"line\">    at /root/code/swoole-src/swoole_server.cc:2946</span><br><span class=\"line\">#6  0x00000000007bb068 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () </span><br><span class=\"line\">    at /root/php-7.3.3/Zend/zend_vm_execute.h:980</span><br><span class=\"line\">#7  execute_ex (ex=0x7ffff7f850a8) </span><br><span class=\"line\">    at /root/php-7.3.3/Zend/zend_vm_execute.h:55485</span><br><span class=\"line\">#8  0x00000000007bbf58 in zend_execute </span><br><span class=\"line\">    (op_array=op_array@entry=0x7ffff5e7b340, </span><br><span class=\"line\">    return_value=return_value@entry=0x7ffff5e1d030) </span><br><span class=\"line\">    at /root/php-7.3.3/Zend/zend_vm_execute.h:60881</span><br><span class=\"line\">#9  0x0000000000737554 in zend_execute_scripts </span><br><span class=\"line\">    (type=type@entry=8, retval=0x7ffff5e1d030, retval@entry=0x0,</span><br><span class=\"line\">    file_count=file_count@entry=3) at /root/php-7.3.3/Zend/zend.c:1568</span><br><span class=\"line\">#10 0x00000000006db4d0 in php_execute_script </span><br><span class=\"line\">    (primary_file=primary_file@entry=0x7fffffffd050) </span><br><span class=\"line\">    at /root/php-7.3.3/main/main.c:2630</span><br><span class=\"line\">#11 0x00000000007be2f5 in do_cli (argc=2, argv=0x1165cd0) </span><br><span class=\"line\">    at /root/php-7.3.3/sapi/cli/php_cli.c:997</span><br><span class=\"line\">#12 0x000000000043fc1f in main (argc=2, argv=0x1165cd0) </span><br><span class=\"line\">    at /root/php-7.3.3/sapi/cli/php_cli.c:1389</span><br><span class=\"line\"></span><br><span class=\"line\">// pthread_create reactor线程</span><br><span class=\"line\">#0  0x00007ffff552e960 in pthread_create@plt () </span><br><span class=\"line\">    from /usr/local/lib/php/extensions/no-debug-non-zts-20180731/swoole.so</span><br><span class=\"line\">#1  0x00007ffff5576959 in swReactorThread_start (serv=0x1353f60) </span><br><span class=\"line\">    at /root/code/swoole-src/src/server/reactor_thread.c:883</span><br><span class=\"line\">#2  0x00007ffff556f006 in swServer_start (serv=0x1353f60) </span><br><span class=\"line\">    at /root/code/swoole-src/src/server/master.cc:670</span><br><span class=\"line\">#3  0x00007ffff55dc808 in zim_swoole_server_start </span><br><span class=\"line\">    (execute_data=&lt;optimized out&gt;, return_value=0x7fffffffac50)</span><br><span class=\"line\">    at /root/code/swoole-src/swoole_server.cc:2946</span><br><span class=\"line\">#4  0x00000000007bb068 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () </span><br><span class=\"line\">    at /root/php-7.3.3/Zend/zend_vm_execute.h:980</span><br><span class=\"line\">#5  execute_ex (ex=0x7fffffffab10) at /root/php-7.3.3/Zend/zend_vm_execute.h:55485</span><br><span class=\"line\">#6  0x00000000007bbf58 in zend_execute </span><br><span class=\"line\">    (op_array=op_array@entry=0x7ffff5e7b340, </span><br><span class=\"line\">    return_value=return_value@entry=0x7ffff5e1d030)</span><br><span class=\"line\">    at /root/php-7.3.3/Zend/zend_vm_execute.h:60881</span><br><span class=\"line\">#7  0x0000000000737554 in zend_execute_scripts </span><br><span class=\"line\">    (type=type@entry=8, retval=0x7ffff5e1d030, retval@entry=0x0,</span><br><span class=\"line\">    file_count=file_count@entry=3) at /root/php-7.3.3/Zend/zend.c:1568</span><br><span class=\"line\">#8  0x00000000006db4d0 in php_execute_script </span><br><span class=\"line\">    (primary_file=primary_file@entry=0x7fffffffd050) </span><br><span class=\"line\">    at /root/php-7.3.3/main/main.c:2630</span><br><span class=\"line\">#9  0x00000000007be2f5 in do_cli (argc=2, argv=0x1165cd0) </span><br><span class=\"line\">    at /root/php-7.3.3/sapi/cli/php_cli.c:997</span><br><span class=\"line\">#10 0x000000000043fc1f in main (argc=2, argv=0x1165cd0) </span><br><span class=\"line\">    at /root/php-7.3.3/sapi/cli/php_cli.c:1389</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-2-base模式启动\"><a href=\"#4-2-base模式启动\" class=\"headerlink\" title=\"4.2 base模式启动\"></a>4.2 base模式启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//base 模式下的启动</span><br><span class=\"line\">#0  0x00007ffff67dae64 in fork () from /lib64/libc.so.6</span><br><span class=\"line\">#1  0x00007ffff553888a in swoole_fork () </span><br><span class=\"line\">    at /root/code/swoole-src/src/core/base.c:186</span><br><span class=\"line\">#2  0x00007ffff5558557 in swProcessPool_spawn </span><br><span class=\"line\">    (pool=pool@entry=0x7ffff2d2a308, worker=0x7ffff2d2a778)</span><br><span class=\"line\">    at /root/code/swoole-src/src/network/process_pool.c:392</span><br><span class=\"line\">#3  0x00007ffff5558710 in swProcessPool_start (pool=0x7ffff2d2a308) </span><br><span class=\"line\">    at /root/code/swoole-src/src/network/process_pool.c:227</span><br><span class=\"line\">#4  0x00007ffff55741cf in swReactorProcess_start (serv=0x1353f60) </span><br><span class=\"line\">    at /root/code/swoole-src/src/server/reactor_process.cc:176</span><br><span class=\"line\">#5  0x00007ffff556f21d in swServer_start (serv=0x1353f60) </span><br><span class=\"line\">    at /root/code/swoole-src/src/server/master.cc:666</span><br><span class=\"line\">#6  0x00007ffff55dc808 in zim_swoole_server_start </span><br><span class=\"line\">    (execute_data=&lt;optimized out&gt;, return_value=0x7fffffffac50)</span><br><span class=\"line\">    at /root/code/swoole-src/swoole_server.cc:2946</span><br><span class=\"line\">#7  0x00000000007bb068 in ZEND_DO_FCALL_SPEC_RETVAL_UNUSED_HANDLER () </span><br><span class=\"line\">    at /root/php-7.3.3/Zend/zend_vm_execute.h:980</span><br><span class=\"line\">#8  execute_ex (ex=0x7ffff2d2a308) at /root/php-7.3.3/Zend/zend_vm_execute.h:55485</span><br><span class=\"line\">#9  0x00000000007bbf58 in zend_execute </span><br><span class=\"line\">    (op_array=op_array@entry=0x7ffff5e7b340, </span><br><span class=\"line\">    return_value=return_value@entry=0x7ffff5e1d030)</span><br><span class=\"line\">    at /root/php-7.3.3/Zend/zend_vm_execute.h:60881</span><br><span class=\"line\">#10 0x0000000000737554 in zend_execute_scripts </span><br><span class=\"line\">    (type=type@entry=8, retval=0x7ffff5e1d030, retval@entry=0x0,</span><br><span class=\"line\">    file_count=file_count@entry=3) at /root/php-7.3.3/Zend/zend.c:1568</span><br><span class=\"line\">#11 0x00000000006db4d0 in php_execute_script </span><br><span class=\"line\">    (primary_file=primary_file@entry=0x7fffffffd050) </span><br><span class=\"line\">    at /root/php-7.3.3/main/main.c:2630</span><br><span class=\"line\">#12 0x00000000007be2f5 in do_cli (argc=2, argv=0x1165cd0) </span><br><span class=\"line\">    at /root/php-7.3.3/sapi/cli/php_cli.c:997</span><br><span class=\"line\">#13 0x000000000043fc1f in main (argc=2, argv=0x1165cd0) </span><br><span class=\"line\">    at /root/php-7.3.3/sapi/cli/php_cli.c:1389</span><br></pre></td></tr></table></figure>\n<h1 id=\"五-总结及思考\"><a href=\"#五-总结及思考\" class=\"headerlink\" title=\"五. 总结及思考\"></a>五. 总结及思考</h1><ol>\n<li>本文主要介绍了Swoole server的两种模式: base模式、process模式, 详细讲解了两种模式的网络编程模型, 并重点介绍了process模式下, 进程间通信的方式、请求的处理流程等。</li>\n<li>process模式下, 为什么不直接在主进程中创建多个线程, 由线程直接进行处理请求(可以避免进程间通信的开销), 而是创建出manager进程, 再由manager进程创建出worker进程, 由worker进程处理请求?</li>\n</ol>\n<ul>\n<li>个人觉得可能是php对多线程的支持不是很友好, phper大都也只是进行单线程编程</li>\n<li>ZendVM 提供的 TSRM 虽然也是支持多线程环境，但实际上这是一个 按线程隔离内存的方案, 多线程并没有意义</li>\n</ul>\n<ol start=\"3\">\n<li>process模式下, 主进程中的每个reactor线程都可以同时处理多个请求, 多个请求是并发处理的, 我们从2个维度看,</li>\n</ol>\n<ul>\n<li>从主进程的角度看, 主进程同时处理多个请求, 当一个请求包全部接收完后, 转发给worker进程进行处理</li>\n<li>从某个worker进程的角度看, 这个worker进程收到的请求是串行的, 默认情况下, worker进程也是串行处理请求, 如果单个请求阻塞(Swoole的worker进程会回调phper写的事件处理函数, 该函数可能阻塞), 后续的请求也无法处理, 这个就是排头阻塞问题, 这种情况下可以使用Swoole的协程, 通过协程的调度, 单个请求阻塞时, worker进程可以继续处理其他请求。</li>\n</ul>\n<ol start=\"4\">\n<li>使用Swoole创建tcp server时, 由于tcp是字节流的协议, 需要分包, 而Swoole在不清楚客户端与服务端通信协议的情况下, 无法进行分包, process模式下, reactor交给worker进程的数据也只能是字节流的, 需要用户自行处理。当然, 一般情况也不需要自行构建协议, 使用tcp server, Swoole已经支持Http, Https等协议。</li>\n</ol>\n<h1 id=\"六-参考\"><a href=\"#六-参考\" class=\"headerlink\" title=\"六. 参考\"></a>六. 参考</h1><ul>\n<li>UNIX网络编程</li>\n<li>UNIX环境高级编程</li>\n<li>php7 底层实现与源码分析</li>\n<li><a href=\"https://wiki.swoole.com/\" target=\"_blank\" rel=\"noopener\">https://wiki.swoole.com/</a></li>\n<li><a href=\"https://www.cnblogs.com/welhzh/p/3772164.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/welhzh/p/3772164.html</a></li>\n<li><a href=\"https://www.cnblogs.com/JohnABC/p/4079669.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/JohnABC/p/4079669.html</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckg5wpdun00016331e2d3c59s","category_id":"ckg5wpduu0006633151uopl3c","_id":"ckg5wpdux000d6331owki22ud"},{"post_id":"ckg5wpduj0000633196knyglf","category_id":"ckg5wpdup000263314xp5p61j","_id":"ckg5wpduz000l6331037pjhoe"},{"post_id":"ckg5wpduj0000633196knyglf","category_id":"ckg5wpduy000f633169bwajpx","_id":"ckg5wpdv0000o6331shh8kzbz"},{"post_id":"ckg5wpdur00046331zehj9egb","category_id":"ckg5wpdup000263314xp5p61j","_id":"ckg5wpdv0000p6331bu0gflm1"},{"post_id":"ckg5wpdur00046331zehj9egb","category_id":"ckg5wpduz000j6331jmhu7aol","_id":"ckg5wpdv0000r6331smhow9bc"},{"post_id":"ckg5wpdus00056331blwmmgkz","category_id":"ckg5wpdux000c6331ccpv93zz","_id":"ckg5wpdv0000t6331zc6s2326"},{"post_id":"ckg5wpdus00056331blwmmgkz","category_id":"ckg5wpduz000m6331z3e8fveq","_id":"ckg5wpdv1000w63312s2w9vhf"},{"post_id":"ckg5wpdzl00166331tdv9d1kd","category_id":"ckg5wpdup000263314xp5p61j","_id":"ckg5wpdzv001g6331g19h35pp"},{"post_id":"ckg5wpdzl00166331tdv9d1kd","category_id":"ckg5wpduz000j6331jmhu7aol","_id":"ckg5wpdzw001i6331zuesjp0e"},{"post_id":"ckg5wpdzr001c63318i3fwlwg","category_id":"ckg5wpdup000263314xp5p61j","_id":"ckg5wpdzx001l6331ezq0pngr"},{"post_id":"ckg5wpdzr001c63318i3fwlwg","category_id":"ckg5wpduz000j6331jmhu7aol","_id":"ckg5wpdzy001p63310g2ippws"},{"post_id":"ckg5wpdz900146331ru8x3w6w","category_id":"ckg5wpdzo00186331b04qnyhl","_id":"ckg5wpdzz001t6331t15vo9tv"},{"post_id":"ckg5wpdz900146331ru8x3w6w","category_id":"ckg5wpdzy001m6331htasg0up","_id":"ckg5wpe00001w6331ud3ael0n"},{"post_id":"ckg5wpdzt001d63314vdvha97","category_id":"ckg5wpdzo00186331b04qnyhl","_id":"ckg5wpe01002063314ln4t11a"},{"post_id":"ckg5wpdzt001d63314vdvha97","category_id":"ckg5wpdzz001r6331rwgs3r4s","_id":"ckg5wpe0100226331srdy97rw"},{"post_id":"ckg5wpdzv001h6331xacik368","category_id":"ckg5wpdzo00186331b04qnyhl","_id":"ckg5wpe0200246331w3uc1udt"},{"post_id":"ckg5wpdzv001h6331xacik368","category_id":"ckg5wpdzy001m6331htasg0up","_id":"ckg5wpe0300286331hhluc4iy"},{"post_id":"ckg5wpdzp001a6331824d53xh","category_id":"ckg5wpdzu001e6331oyo6x524","_id":"ckg5wpe03002a6331k4ott58c"},{"post_id":"ckg5wpdzp001a6331824d53xh","category_id":"ckg5wpe00001z6331j5ckkhxd","_id":"ckg5wpe04002d6331hz9x2wks"},{"post_id":"ckg5wpdzx001k6331sqb0vdtf","category_id":"ckg5wpe02002663311vgso8a4","_id":"ckg5wpe05002i6331wf6yri8r"},{"post_id":"ckg5wpdzx001k6331sqb0vdtf","category_id":"ckg5wpe04002f63319wtjbjp3","_id":"ckg5wpe05002j6331s45qxt2z"}],"PostTag":[{"post_id":"ckg5wpduj0000633196knyglf","tag_id":"ckg5wpduq000363317eim8sq5","_id":"ckg5wpdux000a63317jz0ypek"},{"post_id":"ckg5wpduj0000633196knyglf","tag_id":"ckg5wpduu00076331lowx331y","_id":"ckg5wpdux000b6331wmustbi3"},{"post_id":"ckg5wpdun00016331e2d3c59s","tag_id":"ckg5wpduv00096331cu0lzuz3","_id":"ckg5wpduy000h6331klhj1f8e"},{"post_id":"ckg5wpdun00016331e2d3c59s","tag_id":"ckg5wpduy000e63317emcx0zi","_id":"ckg5wpduz000i6331gdg99lp7"},{"post_id":"ckg5wpdur00046331zehj9egb","tag_id":"ckg5wpduy000g63317sbj6zjw","_id":"ckg5wpdv0000s6331dy9p2h3w"},{"post_id":"ckg5wpdur00046331zehj9egb","tag_id":"ckg5wpduz000k6331r0qh7i81","_id":"ckg5wpdv0000u63319nhnh0yk"},{"post_id":"ckg5wpdur00046331zehj9egb","tag_id":"ckg5wpduz000n6331te417sim","_id":"ckg5wpdv1000x6331hwvmuzps"},{"post_id":"ckg5wpdus00056331blwmmgkz","tag_id":"ckg5wpdv0000q6331c2hn8tid","_id":"ckg5wpdv20010633193u03x07"},{"post_id":"ckg5wpdus00056331blwmmgkz","tag_id":"ckg5wpdv1000v63312dqwlsra","_id":"ckg5wpdv200116331pkno4tys"},{"post_id":"ckg5wpdus00056331blwmmgkz","tag_id":"ckg5wpdv1000y6331vsvc5rvi","_id":"ckg5wpdv200126331xm0r2wch"},{"post_id":"ckg5wpdus00056331blwmmgkz","tag_id":"ckg5wpdv1000z63315p4c0dju","_id":"ckg5wpdv300136331w5lfcz1e"},{"post_id":"ckg5wpdzl00166331tdv9d1kd","tag_id":"ckg5wpduz000n6331te417sim","_id":"ckg5wpdzr001b63315fdobs9v"},{"post_id":"ckg5wpdzt001d63314vdvha97","tag_id":"ckg5wpdzo00196331slcj5lf0","_id":"ckg5wpdzx001j6331mkf4yawm"},{"post_id":"ckg5wpdz900146331ru8x3w6w","tag_id":"ckg5wpdzo00196331slcj5lf0","_id":"ckg5wpdzy001o63319jez2of6"},{"post_id":"ckg5wpdz900146331ru8x3w6w","tag_id":"ckg5wpdzu001f6331mu36utzd","_id":"ckg5wpdzz001q6331rn44mam0"},{"post_id":"ckg5wpdzp001a6331824d53xh","tag_id":"ckg5wpdzy001n6331aeyvrrvb","_id":"ckg5wpe00001x6331ts3zxh17"},{"post_id":"ckg5wpdzp001a6331824d53xh","tag_id":"ckg5wpdzz001s6331s5r53ty5","_id":"ckg5wpe00001y6331v0xghdeo"},{"post_id":"ckg5wpdzr001c63318i3fwlwg","tag_id":"ckg5wpduz000n6331te417sim","_id":"ckg5wpe0100236331ps8wgz2j"},{"post_id":"ckg5wpdzr001c63318i3fwlwg","tag_id":"ckg5wpe00001v6331a9zmo5l0","_id":"ckg5wpe02002563312ik7hxdh"},{"post_id":"ckg5wpdzv001h6331xacik368","tag_id":"ckg5wpe0100216331csbobwtv","_id":"ckg5wpe0300296331uznowt0s"},{"post_id":"ckg5wpdzv001h6331xacik368","tag_id":"ckg5wpdzo00196331slcj5lf0","_id":"ckg5wpe03002b6331dy3wrm5m"},{"post_id":"ckg5wpdzv001h6331xacik368","tag_id":"ckg5wpduz000n6331te417sim","_id":"ckg5wpe04002e6331h23mn78g"},{"post_id":"ckg5wpdzx001k6331sqb0vdtf","tag_id":"ckg5wpe02002763315dtq9z1o","_id":"ckg5wpe05002g6331gz0i4zvk"},{"post_id":"ckg5wpdzx001k6331sqb0vdtf","tag_id":"ckg5wpe04002c6331l8ql8lr4","_id":"ckg5wpe05002h63311ejmmt2b"}],"Tag":[{"name":"网络","_id":"ckg5wpduq000363317eim8sq5"},{"name":"代理","_id":"ckg5wpduu00076331lowx331y"},{"name":"Mysql","_id":"ckg5wpduv00096331cu0lzuz3"},{"name":"InnoDB","_id":"ckg5wpduy000e63317emcx0zi"},{"name":"水平触发","_id":"ckg5wpduy000g63317sbj6zjw"},{"name":"边沿触发","_id":"ckg5wpduz000k6331r0qh7i81"},{"name":"网络编程","_id":"ckg5wpduz000n6331te417sim"},{"name":"编译","_id":"ckg5wpdv0000q6331c2hn8tid"},{"name":"链接","_id":"ckg5wpdv1000v63312dqwlsra"},{"name":"动态链接库","_id":"ckg5wpdv1000y6331vsvc5rvi"},{"name":"静态链接库","_id":"ckg5wpdv1000z63315p4c0dju"},{"name":"nginx","_id":"ckg5wpdzo00196331slcj5lf0"},{"name":"配置存储","_id":"ckg5wpdzu001f6331mu36utzd"},{"name":"负载均衡","_id":"ckg5wpdzy001n6331aeyvrrvb"},{"name":"分布式技术","_id":"ckg5wpdzz001s6331s5r53ty5"},{"name":"数据传输顺序","_id":"ckg5wpe00001v6331a9zmo5l0"},{"name":"epoll","_id":"ckg5wpe0100216331csbobwtv"},{"name":"server","_id":"ckg5wpe02002763315dtq9z1o"},{"name":"swoole","_id":"ckg5wpe04002c6331l8ql8lr4"}]}}